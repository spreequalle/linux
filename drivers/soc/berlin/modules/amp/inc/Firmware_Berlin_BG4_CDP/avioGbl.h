/*
 * Copyright (C) 2012 Marvell Technology Group Ltd.
 *		http://www.marvell.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

//////
/// don't edit! auto-generated by docc: avioGbl.h
////////////////////////////////////////////////////////////
#ifndef avioGbl_h
#define avioGbl_h (){}

#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

#define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
#define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
#define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
#define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
#define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
#define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif

//////
///
/// $INTERFACE avpllCh                 biu              (4,4)
///     ###
///     * AVPLL control signals for one channel
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               %unsigned 13 POSTDIV                   0x0
///               %unsigned 1  POSTDIV_0P5               0x0
///                                    ###
///                                    * Audio clock divider program
///                                    * 1, When POSTDIV_CX[12:0]=
///                                    * 0 0000 0000 0000, then disable post divider
///                                    * 2, When POSTDIV_CX[12:0]>0:
///                                    * if POSTDIV_0P5_CX=0:
///                                    * Divider=POSTDIV_CX[12:0],
///                                    * if POSTDIV_0P5_CX=1:
///                                    * Divider=POSTDIV_CX[12:0]+0.5
///                                    * For C1-C7 only
///                                    ###
///               %unsigned 1  EN_DPLL                   0x0
///                                    ###
///                                    * 0: disable channel CX's DPLL
///                                    * 1: enable channel CX's DPLL
///                                    ###
///               %unsigned 2  EN_LP                     0x0
///                                    ###
///                                    * EN_LP_CX[1:0] FREQ_OFFSET   CK_INTG
///                                    * 00        X             CK_SSC
///                                    * 01         X*2          CK_SSC/2
///                                    * 10         X              CK_SSC
///                                    * 11          X*4                CK_SSC/4
///                                    ###
///               %%        15         # Stuffing bits...
///     # 0x00004 ctrl1
///               %unsigned 19 FREQ_OFFSET               0x0
///                                    ###
///                                    * [18] is sign bit
///                                    * 0: PI's Frequency down
///                                    * 1: PI's Frequency up
///                                    * [17:0]: 1 LSB -> 0.25ppm,
///                                    * up to 5%
///                                    ###
///               %unsigned 1  FREQ_OFFSET_READY         0x0
///                                    ###
///                                    * Frequency offset value readiness
///                                    * indicator for FREQ_OFFSET_CX [18:0],
///                                    * the pulse need to be longer
///                                    * than 320/Fvco. For Fvco=3GHz,
///                                    * the pulse with should > 172ns;
///                                    * For Fvco=1.5GHz, pulse width >344ns
///                                    ###
///               %unsigned 1  PU                        0x0
///                                    ###
///                                    * 0: power down channel CX
///                                    * 1: power up channel CX
///                                    ###
///               %unsigned 1  PU_OFST_CTRL              0x1
///                                    ###
///                                    * 0: power down FREQ_OFFS
///                                    * 1: power up FREQ_OFFSET
///                                    ###
///               %%        10         # Stuffing bits...
///     # 0x00008 ctrl2
///               %unsigned 20 P_SYNC1                   0x10
///                                    ###
///                                    * Set DPLL's reference divider
///                                    * Divider= P_SYNC1_CX[19:0]
///                                    * It is forbidden when N<16
///                                    ###
///               %%        12         # Stuffing bits...
///     # 0x0000C ctrl3
///               %unsigned 20 P_SYNC2                   0x10
///                                    ###
///                                    * Set DPLL's feedback divider
///                                    * Divider= P_SYNC2_CX[19:0]
///                                    * It is forbidden when N<16
///                                    ###
///               %unsigned 1  RESET                     0x1
///                                    ###
///                                    * Reset channel CX logic:
///                                    * 0: not reset
///                                    * 1: active reset
///                                    ###
///               %unsigned 2  RESERVE_IN                0x0
///               %%        9          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      82b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_avpllCh
#define h_avpllCh (){}

#define     RA_avpllCh_ctrl                                0x0000

#define     BA_avpllCh_ctrl_POSTDIV                        0x0000
#define     B16avpllCh_ctrl_POSTDIV                        0x0000
#define   LSb32avpllCh_ctrl_POSTDIV                           0
#define   LSb16avpllCh_ctrl_POSTDIV                           0
#define       bavpllCh_ctrl_POSTDIV                        13
#define   MSK32avpllCh_ctrl_POSTDIV                           0x00001FFF

#define     BA_avpllCh_ctrl_POSTDIV_0P5                    0x0001
#define     B16avpllCh_ctrl_POSTDIV_0P5                    0x0000
#define   LSb32avpllCh_ctrl_POSTDIV_0P5                       13
#define   LSb16avpllCh_ctrl_POSTDIV_0P5                       13
#define       bavpllCh_ctrl_POSTDIV_0P5                    1
#define   MSK32avpllCh_ctrl_POSTDIV_0P5                       0x00002000

#define     BA_avpllCh_ctrl_EN_DPLL                        0x0001
#define     B16avpllCh_ctrl_EN_DPLL                        0x0000
#define   LSb32avpllCh_ctrl_EN_DPLL                           14
#define   LSb16avpllCh_ctrl_EN_DPLL                           14
#define       bavpllCh_ctrl_EN_DPLL                        1
#define   MSK32avpllCh_ctrl_EN_DPLL                           0x00004000

#define     BA_avpllCh_ctrl_EN_LP                          0x0001
#define     B16avpllCh_ctrl_EN_LP                          0x0000
#define   LSb32avpllCh_ctrl_EN_LP                             15
#define   LSb16avpllCh_ctrl_EN_LP                             15
#define       bavpllCh_ctrl_EN_LP                          2
#define   MSK32avpllCh_ctrl_EN_LP                             0x00018000

#define     RA_avpllCh_ctrl1                               0x0004

#define     BA_avpllCh_ctrl_FREQ_OFFSET                    0x0004
#define     B16avpllCh_ctrl_FREQ_OFFSET                    0x0004
#define   LSb32avpllCh_ctrl_FREQ_OFFSET                       0
#define   LSb16avpllCh_ctrl_FREQ_OFFSET                       0
#define       bavpllCh_ctrl_FREQ_OFFSET                    19
#define   MSK32avpllCh_ctrl_FREQ_OFFSET                       0x0007FFFF

#define     BA_avpllCh_ctrl_FREQ_OFFSET_READY              0x0006
#define     B16avpllCh_ctrl_FREQ_OFFSET_READY              0x0006
#define   LSb32avpllCh_ctrl_FREQ_OFFSET_READY                 19
#define   LSb16avpllCh_ctrl_FREQ_OFFSET_READY                 3
#define       bavpllCh_ctrl_FREQ_OFFSET_READY              1
#define   MSK32avpllCh_ctrl_FREQ_OFFSET_READY                 0x00080000

#define     BA_avpllCh_ctrl_PU                             0x0006
#define     B16avpllCh_ctrl_PU                             0x0006
#define   LSb32avpllCh_ctrl_PU                                20
#define   LSb16avpllCh_ctrl_PU                                4
#define       bavpllCh_ctrl_PU                             1
#define   MSK32avpllCh_ctrl_PU                                0x00100000

#define     BA_avpllCh_ctrl_PU_OFST_CTRL                   0x0006
#define     B16avpllCh_ctrl_PU_OFST_CTRL                   0x0006
#define   LSb32avpllCh_ctrl_PU_OFST_CTRL                      21
#define   LSb16avpllCh_ctrl_PU_OFST_CTRL                      5
#define       bavpllCh_ctrl_PU_OFST_CTRL                   1
#define   MSK32avpllCh_ctrl_PU_OFST_CTRL                      0x00200000

#define     RA_avpllCh_ctrl2                               0x0008

#define     BA_avpllCh_ctrl_P_SYNC1                        0x0008
#define     B16avpllCh_ctrl_P_SYNC1                        0x0008
#define   LSb32avpllCh_ctrl_P_SYNC1                           0
#define   LSb16avpllCh_ctrl_P_SYNC1                           0
#define       bavpllCh_ctrl_P_SYNC1                        20
#define   MSK32avpllCh_ctrl_P_SYNC1                           0x000FFFFF

#define     RA_avpllCh_ctrl3                               0x000C

#define     BA_avpllCh_ctrl_P_SYNC2                        0x000C
#define     B16avpllCh_ctrl_P_SYNC2                        0x000C
#define   LSb32avpllCh_ctrl_P_SYNC2                           0
#define   LSb16avpllCh_ctrl_P_SYNC2                           0
#define       bavpllCh_ctrl_P_SYNC2                        20
#define   MSK32avpllCh_ctrl_P_SYNC2                           0x000FFFFF

#define     BA_avpllCh_ctrl_RESET                          0x000E
#define     B16avpllCh_ctrl_RESET                          0x000E
#define   LSb32avpllCh_ctrl_RESET                             20
#define   LSb16avpllCh_ctrl_RESET                             4
#define       bavpllCh_ctrl_RESET                          1
#define   MSK32avpllCh_ctrl_RESET                             0x00100000

#define     BA_avpllCh_ctrl_RESERVE_IN                     0x000E
#define     B16avpllCh_ctrl_RESERVE_IN                     0x000E
#define   LSb32avpllCh_ctrl_RESERVE_IN                        21
#define   LSb16avpllCh_ctrl_RESERVE_IN                        5
#define       bavpllCh_ctrl_RESERVE_IN                     2
#define   MSK32avpllCh_ctrl_RESERVE_IN                        0x00600000
	///////////////////////////////////////////////////////////

	typedef struct SIE_avpllCh {
		///////////////////////////////////////////////////////////
#define   GET32avpllCh_ctrl_POSTDIV(r32)                   _BFGET_(r32,12, 0)
#define   SET32avpllCh_ctrl_POSTDIV(r32,v)                 _BFSET_(r32,12, 0,v)
#define   GET16avpllCh_ctrl_POSTDIV(r16)                   _BFGET_(r16,12, 0)
#define   SET16avpllCh_ctrl_POSTDIV(r16,v)                 _BFSET_(r16,12, 0,v)

#define   GET32avpllCh_ctrl_POSTDIV_0P5(r32)               _BFGET_(r32,13,13)
#define   SET32avpllCh_ctrl_POSTDIV_0P5(r32,v)             _BFSET_(r32,13,13,v)
#define   GET16avpllCh_ctrl_POSTDIV_0P5(r16)               _BFGET_(r16,13,13)
#define   SET16avpllCh_ctrl_POSTDIV_0P5(r16,v)             _BFSET_(r16,13,13,v)

#define   GET32avpllCh_ctrl_EN_DPLL(r32)                   _BFGET_(r32,14,14)
#define   SET32avpllCh_ctrl_EN_DPLL(r32,v)                 _BFSET_(r32,14,14,v)
#define   GET16avpllCh_ctrl_EN_DPLL(r16)                   _BFGET_(r16,14,14)
#define   SET16avpllCh_ctrl_EN_DPLL(r16,v)                 _BFSET_(r16,14,14,v)

#define   GET32avpllCh_ctrl_EN_LP(r32)                     _BFGET_(r32,16,15)
#define   SET32avpllCh_ctrl_EN_LP(r32,v)                   _BFSET_(r32,16,15,v)

#define     w32avpllCh_ctrl                                {\
            UNSG32 uctrl_POSTDIV                               : 13;\
            UNSG32 uctrl_POSTDIV_0P5                           :  1;\
            UNSG32 uctrl_EN_DPLL                               :  1;\
            UNSG32 uctrl_EN_LP                                 :  2;\
            UNSG32 RSVDx0_b17                                  : 15;\
          }
		union {
			UNSG32 u32avpllCh_ctrl;
			struct w32avpllCh_ctrl;
		};
#define   GET32avpllCh_ctrl_FREQ_OFFSET(r32)               _BFGET_(r32,18, 0)
#define   SET32avpllCh_ctrl_FREQ_OFFSET(r32,v)             _BFSET_(r32,18, 0,v)

#define   GET32avpllCh_ctrl_FREQ_OFFSET_READY(r32)         _BFGET_(r32,19,19)
#define   SET32avpllCh_ctrl_FREQ_OFFSET_READY(r32,v)       _BFSET_(r32,19,19,v)
#define   GET16avpllCh_ctrl_FREQ_OFFSET_READY(r16)         _BFGET_(r16, 3, 3)
#define   SET16avpllCh_ctrl_FREQ_OFFSET_READY(r16,v)       _BFSET_(r16, 3, 3,v)

#define   GET32avpllCh_ctrl_PU(r32)                        _BFGET_(r32,20,20)
#define   SET32avpllCh_ctrl_PU(r32,v)                      _BFSET_(r32,20,20,v)
#define   GET16avpllCh_ctrl_PU(r16)                        _BFGET_(r16, 4, 4)
#define   SET16avpllCh_ctrl_PU(r16,v)                      _BFSET_(r16, 4, 4,v)

#define   GET32avpllCh_ctrl_PU_OFST_CTRL(r32)              _BFGET_(r32,21,21)
#define   SET32avpllCh_ctrl_PU_OFST_CTRL(r32,v)            _BFSET_(r32,21,21,v)
#define   GET16avpllCh_ctrl_PU_OFST_CTRL(r16)              _BFGET_(r16, 5, 5)
#define   SET16avpllCh_ctrl_PU_OFST_CTRL(r16,v)            _BFSET_(r16, 5, 5,v)

#define     w32avpllCh_ctrl1                               {\
            UNSG32 uctrl_FREQ_OFFSET                           : 19;\
            UNSG32 uctrl_FREQ_OFFSET_READY                     :  1;\
            UNSG32 uctrl_PU                                    :  1;\
            UNSG32 uctrl_PU_OFST_CTRL                          :  1;\
            UNSG32 RSVDx4_b22                                  : 10;\
          }
		union {
			UNSG32 u32avpllCh_ctrl1;
			struct w32avpllCh_ctrl1;
		};
#define   GET32avpllCh_ctrl_P_SYNC1(r32)                   _BFGET_(r32,19, 0)
#define   SET32avpllCh_ctrl_P_SYNC1(r32,v)                 _BFSET_(r32,19, 0,v)

#define     w32avpllCh_ctrl2                               {\
            UNSG32 uctrl_P_SYNC1                               : 20;\
            UNSG32 RSVDx8_b20                                  : 12;\
          }
		union {
			UNSG32 u32avpllCh_ctrl2;
			struct w32avpllCh_ctrl2;
		};
#define   GET32avpllCh_ctrl_P_SYNC2(r32)                   _BFGET_(r32,19, 0)
#define   SET32avpllCh_ctrl_P_SYNC2(r32,v)                 _BFSET_(r32,19, 0,v)

#define   GET32avpllCh_ctrl_RESET(r32)                     _BFGET_(r32,20,20)
#define   SET32avpllCh_ctrl_RESET(r32,v)                   _BFSET_(r32,20,20,v)
#define   GET16avpllCh_ctrl_RESET(r16)                     _BFGET_(r16, 4, 4)
#define   SET16avpllCh_ctrl_RESET(r16,v)                   _BFSET_(r16, 4, 4,v)

#define   GET32avpllCh_ctrl_RESERVE_IN(r32)                _BFGET_(r32,22,21)
#define   SET32avpllCh_ctrl_RESERVE_IN(r32,v)              _BFSET_(r32,22,21,v)
#define   GET16avpllCh_ctrl_RESERVE_IN(r16)                _BFGET_(r16, 6, 5)
#define   SET16avpllCh_ctrl_RESERVE_IN(r16,v)              _BFSET_(r16, 6, 5,v)

#define     w32avpllCh_ctrl3                               {\
            UNSG32 uctrl_P_SYNC2                               : 20;\
            UNSG32 uctrl_RESET                                 :  1;\
            UNSG32 uctrl_RESERVE_IN                            :  2;\
            UNSG32 RSVDxC_b23                                  :  9;\
          }
		union {
			UNSG32 u32avpllCh_ctrl3;
			struct w32avpllCh_ctrl3;
		};
		///////////////////////////////////////////////////////////
	} SIE_avpllCh;

	typedef union T32avpllCh_ctrl {
		UNSG32 u32;
		struct w32avpllCh_ctrl;
	} T32avpllCh_ctrl;
	typedef union T32avpllCh_ctrl1 {
		UNSG32 u32;
		struct w32avpllCh_ctrl1;
	} T32avpllCh_ctrl1;
	typedef union T32avpllCh_ctrl2 {
		UNSG32 u32;
		struct w32avpllCh_ctrl2;
	} T32avpllCh_ctrl2;
	typedef union T32avpllCh_ctrl3 {
		UNSG32 u32;
		struct w32avpllCh_ctrl3;
	} T32avpllCh_ctrl3;
	///////////////////////////////////////////////////////////

	typedef union TavpllCh_ctrl {
		UNSG32 u32[4];
		struct {
			struct w32avpllCh_ctrl;
			struct w32avpllCh_ctrl1;
			struct w32avpllCh_ctrl2;
			struct w32avpllCh_ctrl3;
		};
	} TavpllCh_ctrl;

	///////////////////////////////////////////////////////////
	SIGN32 avpllCh_drvrd(SIE_avpllCh * p, UNSG32 base, SIGN32 mem,
			     SIGN32 tst);
	SIGN32 avpllCh_drvwr(SIE_avpllCh * p, UNSG32 base, SIGN32 mem,
			     SIGN32 tst, UNSG32 * pcmd);
	void avpllCh_reset(SIE_avpllCh * p);
	SIGN32 avpllCh_cmp(SIE_avpllCh * p, SIE_avpllCh * pie, char *pfx,
			   void *hLOG, SIGN32 mem, SIGN32 tst);
#define avpllCh_check(p,pie,pfx,hLOG) avpllCh_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define avpllCh_print(p,    pfx,hLOG) avpllCh_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: avpllCh
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE avpllCh8                biu              (4,4)
///     ###
///     * AVPLL control signals for channel 8 (Channel inside PLL)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               %unsigned 13 POSTDIV                   0x0
///               %unsigned 1  POSTDIV_0P5               0x0
///                                    ###
///                                    * Audio clock divider program
///                                    * 1, When POSTDIV_CX[12:0]=
///                                    * 0 0000 0000 0000, then disable post divider
///                                    * 2, When POSTDIV_CX[12:0]>0:
///                                    * if POSTDIV_0P5_CX=0:
///                                    * Divider=POSTDIV_CX[12:0],
///                                    * if POSTDIV_0P5_CX=1:
///                                    * Divider=POSTDIV_CX[12:0]+0.5
///                                    * For C1-C7 only
///                                    ###
///               %unsigned 1  EN_DPLL                   0x0
///                                    ###
///                                    * 0: disable channel CX's DPLL
///                                    * 1: enable channel CX's DPLL
///                                    ###
///               %unsigned 2  EN_LP                     0x0
///                                    ###
///                                    * EN_LP_CX[1:0] FREQ_OFFSET   CK_INTG
///                                    * 00        X             CK_SSC
///                                    * 01         X*2          CK_SSC/2
///                                    * 10         X              CK_SSC
///                                    * 11          X*4                CK_SSC/4
///                                    ###
///               %%        15         # Stuffing bits...
///     # 0x00004 ctrl1
///               %unsigned 19 FREQ_OFFSET               0x0
///                                    ###
///                                    * [18] is sign bit
///                                    * 0: PI's Frequency down
///                                    * 1: PI's Frequency up
///                                    * [17:0]: 1 LSB -> 0.25ppm,
///                                    * up to 5%
///                                    ###
///               %unsigned 1  FREQ_OFFSET_READY         0x0
///                                    ###
///                                    * Frequency offset value readiness
///                                    * indicator for FREQ_OFFSET_CX [18:0],
///                                    * the pulse need to be longer
///                                    * than 320/Fvco. For Fvco=3GHz,
///                                    * the pulse with should > 172ns;
///                                    * For Fvco=1.5GHz, pulse width >344ns
///                                    ###
///               %unsigned 1  PU                        0x0
///                                    ###
///                                    * 0: power down channel CX
///                                    * 1: power up channel CX
///                                    ###
///               %unsigned 1  PU_OFST_CTRL              0x1
///                                    ###
///                                    * 0: power down FREQ_OFFS
///                                    * 1: power up FREQ_OFFSET
///                                    ###
///               %%        10         # Stuffing bits...
///     # 0x00008 ctrl2
///               %unsigned 20 P_SYNC1                   0x10
///                                    ###
///                                    * Set DPLL's reference divider
///                                    * Divider= P_SYNC1_CX[19:0]
///                                    * It is forbidden when N<16
///                                    ###
///               %%        12         # Stuffing bits...
///     # 0x0000C ctrl3
///               %unsigned 20 P_SYNC2                   0x10
///                                    ###
///                                    * Set DPLL's feedback divider
///                                    * Divider= P_SYNC2_CX[19:0]
///                                    * It is forbidden when N<16
///                                    ###
///               %unsigned 1  RESET                     0x0
///                                    ###
///                                    * Reset channel CX logic:
///                                    * 0: not reset
///                                    * 1: active reset
///                                    ###
///               %unsigned 2  RESERVE_IN                0x1
///               %%        9          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      82b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_avpllCh8
#define h_avpllCh8 (){}

#define     RA_avpllCh8_ctrl                               0x0000

#define     BA_avpllCh8_ctrl_POSTDIV                       0x0000
#define     B16avpllCh8_ctrl_POSTDIV                       0x0000
#define   LSb32avpllCh8_ctrl_POSTDIV                          0
#define   LSb16avpllCh8_ctrl_POSTDIV                          0
#define       bavpllCh8_ctrl_POSTDIV                       13
#define   MSK32avpllCh8_ctrl_POSTDIV                          0x00001FFF

#define     BA_avpllCh8_ctrl_POSTDIV_0P5                   0x0001
#define     B16avpllCh8_ctrl_POSTDIV_0P5                   0x0000
#define   LSb32avpllCh8_ctrl_POSTDIV_0P5                      13
#define   LSb16avpllCh8_ctrl_POSTDIV_0P5                      13
#define       bavpllCh8_ctrl_POSTDIV_0P5                   1
#define   MSK32avpllCh8_ctrl_POSTDIV_0P5                      0x00002000

#define     BA_avpllCh8_ctrl_EN_DPLL                       0x0001
#define     B16avpllCh8_ctrl_EN_DPLL                       0x0000
#define   LSb32avpllCh8_ctrl_EN_DPLL                          14
#define   LSb16avpllCh8_ctrl_EN_DPLL                          14
#define       bavpllCh8_ctrl_EN_DPLL                       1
#define   MSK32avpllCh8_ctrl_EN_DPLL                          0x00004000

#define     BA_avpllCh8_ctrl_EN_LP                         0x0001
#define     B16avpllCh8_ctrl_EN_LP                         0x0000
#define   LSb32avpllCh8_ctrl_EN_LP                            15
#define   LSb16avpllCh8_ctrl_EN_LP                            15
#define       bavpllCh8_ctrl_EN_LP                         2
#define   MSK32avpllCh8_ctrl_EN_LP                            0x00018000

#define     RA_avpllCh8_ctrl1                              0x0004

#define     BA_avpllCh8_ctrl_FREQ_OFFSET                   0x0004
#define     B16avpllCh8_ctrl_FREQ_OFFSET                   0x0004
#define   LSb32avpllCh8_ctrl_FREQ_OFFSET                      0
#define   LSb16avpllCh8_ctrl_FREQ_OFFSET                      0
#define       bavpllCh8_ctrl_FREQ_OFFSET                   19
#define   MSK32avpllCh8_ctrl_FREQ_OFFSET                      0x0007FFFF

#define     BA_avpllCh8_ctrl_FREQ_OFFSET_READY             0x0006
#define     B16avpllCh8_ctrl_FREQ_OFFSET_READY             0x0006
#define   LSb32avpllCh8_ctrl_FREQ_OFFSET_READY                19
#define   LSb16avpllCh8_ctrl_FREQ_OFFSET_READY                3
#define       bavpllCh8_ctrl_FREQ_OFFSET_READY             1
#define   MSK32avpllCh8_ctrl_FREQ_OFFSET_READY                0x00080000

#define     BA_avpllCh8_ctrl_PU                            0x0006
#define     B16avpllCh8_ctrl_PU                            0x0006
#define   LSb32avpllCh8_ctrl_PU                               20
#define   LSb16avpllCh8_ctrl_PU                               4
#define       bavpllCh8_ctrl_PU                            1
#define   MSK32avpllCh8_ctrl_PU                               0x00100000

#define     BA_avpllCh8_ctrl_PU_OFST_CTRL                  0x0006
#define     B16avpllCh8_ctrl_PU_OFST_CTRL                  0x0006
#define   LSb32avpllCh8_ctrl_PU_OFST_CTRL                     21
#define   LSb16avpllCh8_ctrl_PU_OFST_CTRL                     5
#define       bavpllCh8_ctrl_PU_OFST_CTRL                  1
#define   MSK32avpllCh8_ctrl_PU_OFST_CTRL                     0x00200000

#define     RA_avpllCh8_ctrl2                              0x0008

#define     BA_avpllCh8_ctrl_P_SYNC1                       0x0008
#define     B16avpllCh8_ctrl_P_SYNC1                       0x0008
#define   LSb32avpllCh8_ctrl_P_SYNC1                          0
#define   LSb16avpllCh8_ctrl_P_SYNC1                          0
#define       bavpllCh8_ctrl_P_SYNC1                       20
#define   MSK32avpllCh8_ctrl_P_SYNC1                          0x000FFFFF

#define     RA_avpllCh8_ctrl3                              0x000C

#define     BA_avpllCh8_ctrl_P_SYNC2                       0x000C
#define     B16avpllCh8_ctrl_P_SYNC2                       0x000C
#define   LSb32avpllCh8_ctrl_P_SYNC2                          0
#define   LSb16avpllCh8_ctrl_P_SYNC2                          0
#define       bavpllCh8_ctrl_P_SYNC2                       20
#define   MSK32avpllCh8_ctrl_P_SYNC2                          0x000FFFFF

#define     BA_avpllCh8_ctrl_RESET                         0x000E
#define     B16avpllCh8_ctrl_RESET                         0x000E
#define   LSb32avpllCh8_ctrl_RESET                            20
#define   LSb16avpllCh8_ctrl_RESET                            4
#define       bavpllCh8_ctrl_RESET                         1
#define   MSK32avpllCh8_ctrl_RESET                            0x00100000

#define     BA_avpllCh8_ctrl_RESERVE_IN                    0x000E
#define     B16avpllCh8_ctrl_RESERVE_IN                    0x000E
#define   LSb32avpllCh8_ctrl_RESERVE_IN                       21
#define   LSb16avpllCh8_ctrl_RESERVE_IN                       5
#define       bavpllCh8_ctrl_RESERVE_IN                    2
#define   MSK32avpllCh8_ctrl_RESERVE_IN                       0x00600000
	///////////////////////////////////////////////////////////

	typedef struct SIE_avpllCh8 {
		///////////////////////////////////////////////////////////
#define   GET32avpllCh8_ctrl_POSTDIV(r32)                  _BFGET_(r32,12, 0)
#define   SET32avpllCh8_ctrl_POSTDIV(r32,v)                _BFSET_(r32,12, 0,v)
#define   GET16avpllCh8_ctrl_POSTDIV(r16)                  _BFGET_(r16,12, 0)
#define   SET16avpllCh8_ctrl_POSTDIV(r16,v)                _BFSET_(r16,12, 0,v)

#define   GET32avpllCh8_ctrl_POSTDIV_0P5(r32)              _BFGET_(r32,13,13)
#define   SET32avpllCh8_ctrl_POSTDIV_0P5(r32,v)            _BFSET_(r32,13,13,v)
#define   GET16avpllCh8_ctrl_POSTDIV_0P5(r16)              _BFGET_(r16,13,13)
#define   SET16avpllCh8_ctrl_POSTDIV_0P5(r16,v)            _BFSET_(r16,13,13,v)

#define   GET32avpllCh8_ctrl_EN_DPLL(r32)                  _BFGET_(r32,14,14)
#define   SET32avpllCh8_ctrl_EN_DPLL(r32,v)                _BFSET_(r32,14,14,v)
#define   GET16avpllCh8_ctrl_EN_DPLL(r16)                  _BFGET_(r16,14,14)
#define   SET16avpllCh8_ctrl_EN_DPLL(r16,v)                _BFSET_(r16,14,14,v)

#define   GET32avpllCh8_ctrl_EN_LP(r32)                    _BFGET_(r32,16,15)
#define   SET32avpllCh8_ctrl_EN_LP(r32,v)                  _BFSET_(r32,16,15,v)

#define     w32avpllCh8_ctrl                               {\
            UNSG32 uctrl_POSTDIV                               : 13;\
            UNSG32 uctrl_POSTDIV_0P5                           :  1;\
            UNSG32 uctrl_EN_DPLL                               :  1;\
            UNSG32 uctrl_EN_LP                                 :  2;\
            UNSG32 RSVDx0_b17                                  : 15;\
          }
		union {
			UNSG32 u32avpllCh8_ctrl;
			struct w32avpllCh8_ctrl;
		};
#define   GET32avpllCh8_ctrl_FREQ_OFFSET(r32)              _BFGET_(r32,18, 0)
#define   SET32avpllCh8_ctrl_FREQ_OFFSET(r32,v)            _BFSET_(r32,18, 0,v)

#define   GET32avpllCh8_ctrl_FREQ_OFFSET_READY(r32)        _BFGET_(r32,19,19)
#define   SET32avpllCh8_ctrl_FREQ_OFFSET_READY(r32,v)      _BFSET_(r32,19,19,v)
#define   GET16avpllCh8_ctrl_FREQ_OFFSET_READY(r16)        _BFGET_(r16, 3, 3)
#define   SET16avpllCh8_ctrl_FREQ_OFFSET_READY(r16,v)      _BFSET_(r16, 3, 3,v)

#define   GET32avpllCh8_ctrl_PU(r32)                       _BFGET_(r32,20,20)
#define   SET32avpllCh8_ctrl_PU(r32,v)                     _BFSET_(r32,20,20,v)
#define   GET16avpllCh8_ctrl_PU(r16)                       _BFGET_(r16, 4, 4)
#define   SET16avpllCh8_ctrl_PU(r16,v)                     _BFSET_(r16, 4, 4,v)

#define   GET32avpllCh8_ctrl_PU_OFST_CTRL(r32)             _BFGET_(r32,21,21)
#define   SET32avpllCh8_ctrl_PU_OFST_CTRL(r32,v)           _BFSET_(r32,21,21,v)
#define   GET16avpllCh8_ctrl_PU_OFST_CTRL(r16)             _BFGET_(r16, 5, 5)
#define   SET16avpllCh8_ctrl_PU_OFST_CTRL(r16,v)           _BFSET_(r16, 5, 5,v)

#define     w32avpllCh8_ctrl1                              {\
            UNSG32 uctrl_FREQ_OFFSET                           : 19;\
            UNSG32 uctrl_FREQ_OFFSET_READY                     :  1;\
            UNSG32 uctrl_PU                                    :  1;\
            UNSG32 uctrl_PU_OFST_CTRL                          :  1;\
            UNSG32 RSVDx4_b22                                  : 10;\
          }
		union {
			UNSG32 u32avpllCh8_ctrl1;
			struct w32avpllCh8_ctrl1;
		};
#define   GET32avpllCh8_ctrl_P_SYNC1(r32)                  _BFGET_(r32,19, 0)
#define   SET32avpllCh8_ctrl_P_SYNC1(r32,v)                _BFSET_(r32,19, 0,v)

#define     w32avpllCh8_ctrl2                              {\
            UNSG32 uctrl_P_SYNC1                               : 20;\
            UNSG32 RSVDx8_b20                                  : 12;\
          }
		union {
			UNSG32 u32avpllCh8_ctrl2;
			struct w32avpllCh8_ctrl2;
		};
#define   GET32avpllCh8_ctrl_P_SYNC2(r32)                  _BFGET_(r32,19, 0)
#define   SET32avpllCh8_ctrl_P_SYNC2(r32,v)                _BFSET_(r32,19, 0,v)

#define   GET32avpllCh8_ctrl_RESET(r32)                    _BFGET_(r32,20,20)
#define   SET32avpllCh8_ctrl_RESET(r32,v)                  _BFSET_(r32,20,20,v)
#define   GET16avpllCh8_ctrl_RESET(r16)                    _BFGET_(r16, 4, 4)
#define   SET16avpllCh8_ctrl_RESET(r16,v)                  _BFSET_(r16, 4, 4,v)

#define   GET32avpllCh8_ctrl_RESERVE_IN(r32)               _BFGET_(r32,22,21)
#define   SET32avpllCh8_ctrl_RESERVE_IN(r32,v)             _BFSET_(r32,22,21,v)
#define   GET16avpllCh8_ctrl_RESERVE_IN(r16)               _BFGET_(r16, 6, 5)
#define   SET16avpllCh8_ctrl_RESERVE_IN(r16,v)             _BFSET_(r16, 6, 5,v)

#define     w32avpllCh8_ctrl3                              {\
            UNSG32 uctrl_P_SYNC2                               : 20;\
            UNSG32 uctrl_RESET                                 :  1;\
            UNSG32 uctrl_RESERVE_IN                            :  2;\
            UNSG32 RSVDxC_b23                                  :  9;\
          }
		union {
			UNSG32 u32avpllCh8_ctrl3;
			struct w32avpllCh8_ctrl3;
		};
		///////////////////////////////////////////////////////////
	} SIE_avpllCh8;

	typedef union T32avpllCh8_ctrl {
		UNSG32 u32;
		struct w32avpllCh8_ctrl;
	} T32avpllCh8_ctrl;
	typedef union T32avpllCh8_ctrl1 {
		UNSG32 u32;
		struct w32avpllCh8_ctrl1;
	} T32avpllCh8_ctrl1;
	typedef union T32avpllCh8_ctrl2 {
		UNSG32 u32;
		struct w32avpllCh8_ctrl2;
	} T32avpllCh8_ctrl2;
	typedef union T32avpllCh8_ctrl3 {
		UNSG32 u32;
		struct w32avpllCh8_ctrl3;
	} T32avpllCh8_ctrl3;
	///////////////////////////////////////////////////////////

	typedef union TavpllCh8_ctrl {
		UNSG32 u32[4];
		struct {
			struct w32avpllCh8_ctrl;
			struct w32avpllCh8_ctrl1;
			struct w32avpllCh8_ctrl2;
			struct w32avpllCh8_ctrl3;
		};
	} TavpllCh8_ctrl;

	///////////////////////////////////////////////////////////
	SIGN32 avpllCh8_drvrd(SIE_avpllCh8 * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst);
	SIGN32 avpllCh8_drvwr(SIE_avpllCh8 * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst, UNSG32 * pcmd);
	void avpllCh8_reset(SIE_avpllCh8 * p);
	SIGN32 avpllCh8_cmp(SIE_avpllCh8 * p, SIE_avpllCh8 * pie, char *pfx,
			    void *hLOG, SIGN32 mem, SIGN32 tst);
#define avpllCh8_check(p,pie,pfx,hLOG) avpllCh8_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define avpllCh8_print(p,    pfx,hLOG) avpllCh8_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: avpllCh8
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE avPll                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrlPLL              (P-)
///               ###
///               * AVPLL Control Registers
///               * The AVPLL is designed to generate clocks for digital Audio and Video applications. It consists of only one core PLL which generates clock outputs covering the frequency range from 1.5GHz to 2.97GHz. There are totally 8 PIs, with 1 PI used inside PLL, 7 PIs used in output clock channels. The PI used inside PLL is referred to C8.
///               * Other PIs in each channel provides 7 channels output clock signal:
///               * a), The other five channels (C1..C5) can be programmed as audio/video clock. They are single end output clock.
///               * b), In contrast with C1..C5, CHANNEL6 provide clock of lower jitter. They are proposed to be programmed as video DAC or other higher performance clock (Of course, they also can be programmed as audio clock). C6 are differential output clock.
///               * c), CHANNEL7 (C7) is dedicated HDMI clock. C7 is differential output clock.
///               ###
///               %unsigned 1  RESET                     0x1
///                                    ###
///                                    * 0
///                                    * De-asserted
///                                    * 1
///                                    * Asserted
///                                    * Reset PLL
///                                    * Must be de-asserted after 10us from the time when PU is set to 1.
///                                    * Note: Firmware should first set PU then de-assert PLL reset after 10us and then enable the video and audio clocks using the clk enable register.
///                                    ###
///               %unsigned 1  PU                        0x0
///                                    ###
///                                    * Power up signal for AVPLL
///                                    * 0=power down
///                                    * 1=active
///                                    * When PU=0, all circuits including IVREF, INTP, REGULATOR and PLL are POWERED OFF
///                                    ###
///               %unsigned 3  PLL_VDDRA_SEL             0x3
///                                    ###
///                                    * Select gate voltage for
///                                    * VDDBUF
///                                    * 000   1,16v
///                                    * 001   1.18v
///                                    * 010   1.20v
///                                    * 011   1.22v
///                                    * 100      1.24v
///                                    * 101     1.26v
///                                    * 110      1.28v
///                                    * 111   1.30v
///                                    * VGATE=1.22V,
///                                    * range from 1.16-1.3,
///                                    * 20mv/step
///                                    ###
///               %unsigned 1  REG_RING_EXTRA_I_EN       0x0
///                                    ###
///                                    * "1" : turn on extra current for
///                                    * the oscillator of vdda23 charge pump
///                                    ###
///               %unsigned 2  VCO_REF1P45_SEL           0x1
///                                    ###
///                                    * Select VREF1P0V_VCO1P45
///                                    * 00        0.975v
///                                    * 01        1.0v
///                                    * 10        1.025v
///                                    * 11 1.05v
///                                    ###
///               %unsigned 2  VDDA23_PUMP_SEL           0x1
///                                    ###
///                                    * Select VREF0P96_VDDA23PUMP
///                                    * 00 0.925v
///                                    * 01 0.95v
///                                    * 10 1.0v
///                                    * 11 1.05v
///                                    ###
///               %unsigned 3  VDDBUF_ADJ                0x0
///                                    ###
///                                    * Adjust for VDDVDOFBUF
///                                    * VDDBUF_ADJ[2:1] are reserved
///                                    * VDDBUF[0]:
///                                    * 0: vddvcofbuf=vddvco
///                                    * 1: vddvcofbuf=1.08*vddvco
///                                    ###
///               %unsigned 4  VDDL                      0x5
///                                    ###
///                                    * Internal regulated VDD supply
///                                    * 0001:   0.88v
///                                    * 0010:   0.90v
///                                    * 0011:   0.92v
///                                    * 0100:   0.94 v
///                                    * 0101:   0.96 v
///                                    * 0110:   0.98 v
///                                    * 0111:   1.00 v
///                                    * 1000:   1.02 v
///                                    * 1001:   1.04 v
///                                    * 1010:   1.06 v
///                                    * 1011:   1.08 v
///                                    * 1100:   1.10v
///                                    * 1101:   1.12v
///                                    * 1110:   1.14v
///                                    * 1111:   1.16v
///                                    ###
///               %unsigned 9  FBDIV                     0x10
///                                    ###
///                                    * Feedback clock divider select
///                                    * Divider= FBDIV [8:0], start from 16.
///                                    ###
///               %unsigned 4  ICP                       0x9
///                                    ###
///                                    * Charge-pump current con
///                                    * 0000   30uA
///                                    * 0001   37.5uA
///                                    * 0010   45uA
///                                    * 0011   52.5uA
///                                    * 0100   60uA
///                                    * 0101   75uA
///                                    * 0110   90uA
///                                    * 0111   105uA
///                                    * 1000   120uA
///                                    * 1001   150uA
///                                    * 1010   180uA
///                                    * 1011   210uA
///                                    * 1100   240uA
///                                    * 1101   300uA
///                                    * 1110   360uA
///                                    * 1111   420uA
///                                    ###
///               %unsigned 1  PLL_LPFC2_LESS            0x0
///                                    ###
///                                    * PLL_LPFC1=1, C2=1.2pf
///                                    * PLL_LPFC1=0, C2=1.4pf
///                                    ###
///               %%        1          # Stuffing bits...
///     # 0x00004 ctrlPLL1
///               %unsigned 7  REFDIV                    0x1
///                                    ###
///                                    * Reference clock divider select
///                                    * [5:0]
///                                    * 0000000: not used.
///                                    * 0000001: div1.
///                                    * 0000010: div2
///                                    * 0000011: div3
///                                    * 0000100: div4
///                                    * .
///                                    * .
///                                    * Divider=REFDIV[5:0], for N>=2
///                                    ###
///               %unsigned 6  RESERVE_PLL_IN            0x0
///               %unsigned 4  EXT_SPEED                 0x0
///                                    ###
///                                    * External VCO speed control for
///                                    * different VCO frequencies. The following table is for simulation purpose, it matches the verilog model. The actual VCO speed setting is coming from the calibration result.
///                                    * SPEED[3:0]: typical freq range
///                                    * 0000   reserved
///                                    * 0001   reserved
///                                    * 0010   1.5G~1.7GHz
///                                    * 0011   1.7G~1.9GHz
///                                    * 0100   1.9G~2.1GHz
///                                    * 0101   2.1G~2.3GHz
///                                    * 0110   2.3G~2.45GHz
///                                    * 0111   2.45G~2.6GHz
///                                    * 1000   2.6G~2.75GHz
///                                    * 1001   2.75G~2.9GHz
///                                    * 1010   2.9G~3.0GHz
///                                    * 1011   reserved
///                                    * 1100   reserved
///                                    * 1101   reserved
///                                    * 1110   reserved
///                                    ###
///               %unsigned 4  SPEED_FBRES               0x0
///                                    ###
///                                    * External feedback resistor (VCO ring) set up bits
///                                    ###
///               %unsigned 1  UPDATE_SEL                0x0
///                                    ###
///                                    * Select the PLL update_rate:
///                                    * 0: 19M~26MHz
///                                    * for refclk 19.2M, 38.4M 2
///                                    * 1: 13MHz for refclk 13MHz
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00008 ctrlCAL              (P-)
///               %unsigned 9  CAL_FBDIV                 0x64
///                                    ###
///                                    * During calibration, count Fvco/CAL_FBDIV cycles in 1us, and compare it with SPEED_THRESH[5:0] to decide fvco is higher or lower than the expected frequency, set to dec100.
///                                    ###
///               %unsigned 1  EXT_SLLP_DAC_EN           0x0
///                                    ###
///                                    * 0: use the calibrated code SLLP_DAC_RD[6:0]
///                                    * 1: use the external input EXT_SLLP_DAC[6:0]
///                                    ###
///               %unsigned 1  EXT_SPEED_EN              0x0
///                                    ###
///                                    * 0: use the calibrated code SPEED_RD[3:0]
///                                    * 1: use the external input SPEED[3:0]
///                                    ###
///               %unsigned 1  EXT_SP_FBRES_EN           0x0
///                                    ###
///                                    * External speed enable pin
///                                    * 0: take SPEED_RD[3:0] for feedback resistor
///                                    * 1: take SPEED_FBRES[3:0]
///                                    ###
///               %unsigned 5  PLL_CALCLK_DIV            0x19
///                                    ###
///                                    * Divider to generate around 1MHz calibration clock from the internal update clock:
///                                    * 00000: not used.
///                                    * 00001: div1.
///                                    * 00010: div2
///                                    * 00011: div3
///                                    * 00100: div4
///                                    * .. .
///                                    * Divider=PLL_CALCLK_DIV[4:0], for N>=2
///                                    * D13 for refclk 13MHz
///                                    * D19 for refclk 19.2MHz/38.4MHz
///                                    * D25 for refclk 25MHz
///                                    * D26 for refclk 26MHz
///                                    ###
///               %unsigned 1  PLL_CAL_START             0x0
///                                    ###
///                                    * Rising edge to start PLL calibration
///                                    ###
///               %unsigned 4  REG_SETTLE_LIMIT          0x8
///                                    ###
///                                    * Select waiting time before calibration logic start to take action after PLL_CAL_START is issued, default is 8us
///                                    ###
///               %unsigned 1  SEL_VTHVCOCONT            0x1
///                                    ###
///                                    * Select the source of threshold
///                                    * 0: select IPP+IPTAT generated threshold voltage
///                                    * 1: select IPP generated threshold voltage
///                                    ###
///               %unsigned 6  SPEED_THRESH              0x1E
///                                    ###
///                                    * Digital counter threshold for VCO speed setting calibration loop, threshold value varies with the target VCO frequency.
///                                    * if CAL_FBDIV=dec100,
///                                    * speed_thresh[5:0]   VCO_frequency
///                                    * dec15                    1.5GHz
///                                    * dec20                    2.0GHz
///                                    * dec30                    3.0GHz
///                                    ###
///               %unsigned 2  VCON_SEL                  0x1
///                                    ###
///                                    * Used to set VCON value during PLL Open loop calibration
///                                    * 00: 0.6
///                                    * 01: 0.65
///                                    * 10: 0.7
///                                    * 11: 0.75
///                                    ###
///               %%        1          # Stuffing bits...
///     # 0x0000C ctrlCAL1
///               %unsigned 7  EXT_SLLP_DAC              0x1B
///                                    ###
///                                    * External input used to set VDDVCO value. Used to set Vcon reference value during PLL normal calibration.
///                                    * Vcon: 0.35 + 0.01125*VSET_SLLP_DAC[6:0] default: 01,1011 -------- Vcon=0.697V
///                                    ###
///               %unsigned 2  VTH_VCO_CAL               0x2
///                                    ###
///                                    * 2 bits to select the threshold for calibrated VDDVCO voltage
///                                    * When SEL_VTHVCOCON=1, select IPP generated threshold:
///                                    * 00 1.05v
///                                    * 01 1.075v
///                                    * 10 1.1v
///                                    * 11 1.125v
///                                    * When SEL_VTHVCOCON=0, select IPP portion for IPP+IPTAT generated threshold:
///                                    * 00: 31uA
///                                    * 01: 33uA
///                                    * 10: 35uA
///                                    * 11: 37uA
///                                    ###
///               %unsigned 2  VTH_VCO_PTAT              0x1
///                                    ###
///                                    * 2 bits to select IPTAT curren
///                                    * IPTAT current
///                                    * 00      0uA
///                                    * 01      2uA
///                                    * 10         4uA
///                                    * 11         6uA
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00010 ctrlSlowLoop         (P-)
///               %unsigned 3  PW_SLLP                   0x3
///                                    ###
///                                    * This set of signals define PLL
///                                    * 000: 2T_vco
///                                    * 001: 4T_vco
///                                    * 010: 8T_vco
///                                    * 011: 16T_vco
///                                    * 100: 32T_vco
///                                    * 101: 64T_vco
///                                    * 110:128T_vco
///                                    * 111:256T_vco
///                                    ###
///               %unsigned 1  SLLP_CLK_DIV5EN           0x0
///                                    ###
///                                    * Enable slow loop
///                                    * clock=200KHz, default is 100KHz
///                                    * SLLP_CLK_DIV5EN=0,
///                                    * slow loop clock is 100KHz;
///                                    * SLLP_CLK_DIV5EN=1,
///                                    * slow loop clock is 200KHz
///                                    ###
///               %unsigned 1  SLLP_EN_DIS               0x0
///                                    ###
///                                    * 0: Enable slow loop
///                                    * 1: Disable slow loop
///                                    ###
///               %unsigned 3  SLLP_PSF_LEVEL            0x1
///                                    ###
///                                    * IPP current control to genera
///                                    * SLLP_PSF_LEVEL[2] is re
///                                    * [1:0]   IPP current
///                                    * 00             2uA
///                                    * 01             4uA
///                                    * 10              6uA
///                                    * 11              8uA
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00014 ctrlINTP             (P-)
///               %unsigned 1  CLK_DET_EN                0x1
///                                    ###
///                                    * Enables PI output clock for internal reset circuit.
///                                    * 0: disable
///                                    * 1: enable
///                                    ###
///               %unsigned 2  DPHER_DLY_SEL             0x1
///                                    ###
///                                    * Tuning DPHERCK delay
///                                    * 00: smallest
///                                    * 01
///                                    * 10
///                                    * 11: largest
///                                    ###
///               %unsigned 4  INTPI                     0xB
///                                    ###
///                                    * Select PI bias current:
///                                    * INTPI[3:0] CURRENT VCO's Freq
///                                    * 0000       20uA
///                                    * 0001       22.5uA
///                                    * 0010       25uA     1.5GHz
///                                    * 0011       27.5uA
///                                    * 0100       30uA
///                                    * 0101       32.5uA 2.0GHz
///                                    * 0110       35uA
///                                    * 0111       37.5uA 2.3Ghz
///                                    * 1000       40uA
///                                    * 1001       42.5uA     2.65GHz
///                                    * 1010       45uA
///                                    * 1011       47.5uA     3GHz
///                                    * 1100       50uA
///                                    * 1101       52.5uA     3.3GHz
///                                    * 1110       55uA
///                                    * 1111      57.5uA     3.6GHz
///                                    * Use high frequency band on boarder
///                                    * Default setting is for 3.0GHz
///                                    ###
///               %unsigned 3  INTPR                     0x2
///                                    ###
///                                    * Used for PI Rload resistor se
///                                    * INTPR[2:0]   RES   VCO's Freq
///                                    * 000       650
///                                    * 001      750    3.3~4GHz
///                                    * 010       900   2.65~3.3GHz
///                                    * 011       1150 2.0~2.65GHz
///                                    * 100       1500   1.5~2GHz
///                                    * 101        2300   1~1.5GHz
///                                    * 110        4600
///                                    * 111          RESERVED
///                                    * Use high frequency band on boarder
///                                    * Default setting is for 3.0GHz
///                                    ###
///               %%        22         # Stuffing bits...
///     @ 0x00018 ctrlC8AddOn          (P-)
///               %unsigned 1  MASTER_SLAVEB             0x1
///                                    ###
///                                    * Used to sync frequencies
///                                    * if using 2 PLLs.
///                                    * 1 ' Master PLL
///                                    * 0 ' Slave PLL
///                                    ###
///               %unsigned 2  MODE                      0x0
///                                    ###
///                                    * Mode[1:0] cali_done fbclk
///                                    * 0x         0         fb_vco
///                                    * 0x         1         fb_pi
///                                    * 10         x         fb_vco
///                                    * 11         x         fb_pi
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0001C                      (P)
///     # 0x0001C C1
///               $avpllCh             C1                REG
///     @ 0x0002C                      (P)
///     # 0x0002C C2
///               $avpllCh             C2                REG
///     @ 0x0003C                      (P)
///     # 0x0003C C3
///               $avpllCh             C3                REG
///     @ 0x0004C                      (P)
///     # 0x0004C C4
///               $avpllCh             C4                REG
///     @ 0x0005C                      (P)
///     # 0x0005C C5
///               $avpllCh             C5                REG
///     @ 0x0006C                      (P)
///     # 0x0006C C6
///               $avpllCh             C6                REG
///     @ 0x0007C                      (P)
///     # 0x0007C C7
///               $avpllCh             C7                REG
///     @ 0x0008C                      (P)
///     # 0x0008C C8
///               $avpllCh8            C8                REG
///     @ 0x0009C ctrlTest             (P-)
///               %unsigned 1  CLKOUT_TST_EN             0x0
///                                    ###
///                                    * 0: CLKOUT_TST=0
///                                    * 1: Enable CLKOUT_TST output
///                                    ###
///               %unsigned 6  TEST_MON                  0x0
///                                    ###
///                                    * TEST_MON[5]:
///                                    * 0: TP = high Z
///                                    * 1: enable test point
///                                    * If TEST_MON[5]=1 :
///                                    * TEST_MON[4:0]      TP
///                                    * 0 0000              DVSS
///                                    * 0 0001              AVDD
///                                    * 0 0010              AVSS
///                                    * 0 0011~0 1001       AVSS
///                                    * 0 1010           TP_V0P7
///                                    * 0 1011           TP_VCOVTH
///                                    * 0 1100           VDDR_VCOFBUF
///                                    * 0 1101           TP_CHGPMP_
///                                    * 0 1110           TP_CHGPMP_
///                                    * 0 1111           VDDR_REFDIV
///                                    * 1 0000           VDDR_FBDIV
///                                    * 1 0001           VDDR_INTP_LA
///                                    * 1 0010           VDDR_INTP_LA
///                                    * 1 0011           TP_NBIAS_INTP
///                                    * 1 0100           DVDD
///                                    * 1 0101           PLL_LOCK
///                                    * 1 0110           PLL_CAL_EN
///                                    * 1 0111          PLL_CAL_DONE
///                                    * 1 1000          TP_VCTL_SLOW
///                                    * 1 1001          TP_VDAC_OUT
///                                    * 1 1010          TP_VDDVCO
///                                    * 1 1011          TP_VCON
///                                    * 1 1100~1 1111    AVSS
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x000A0 status               (R-)
///               ###
///               * PLL status register
///               ###
///               %unsigned 1  PLL_LOCK
///                                    ###
///                                    * PLL Lock
///                                    * 1: PLL locked.
///                                    * 0: PLL not locked.
///                                    ###
///               %unsigned 6  RESERVE_PLL_OUT
///               %unsigned 9  FBDIV_RD
///                                    ###
///                                    * Output register bits for calibrated FBDIV[8:0]
///                                    ###
///               %unsigned 1  PLL_CAL_DONE
///                                    ###
///                                    * Rising edge indicate the end of PLL calibration
///                                    ###
///               %unsigned 6  SPEED_CNT
///                                    ###
///                                    * Output register bits for speed counter in calibration
///                                    ###
///               %unsigned 4  SPEED_RD
///                                    ###
///                                    * Output register bits for calibrated SPEED[3:0]
///                                    ###
///               %%        5          # Stuffing bits...
///     # 0x000A4 status1
///               %unsigned 7  SLLP_DAC_RD
///                                    ###
///                                    * Output register bits for calibrated SLLP_DAC[6:0]
///                                    ###
///               %%        25         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     168B, bits:     813b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_avPll
#define h_avPll (){}

#define     RA_avPll_ctrlPLL                               0x0000

#define     BA_avPll_ctrlPLL_RESET                         0x0000
#define     B16avPll_ctrlPLL_RESET                         0x0000
#define   LSb32avPll_ctrlPLL_RESET                            0
#define   LSb16avPll_ctrlPLL_RESET                            0
#define       bavPll_ctrlPLL_RESET                         1
#define   MSK32avPll_ctrlPLL_RESET                            0x00000001

#define     BA_avPll_ctrlPLL_PU                            0x0000
#define     B16avPll_ctrlPLL_PU                            0x0000
#define   LSb32avPll_ctrlPLL_PU                               1
#define   LSb16avPll_ctrlPLL_PU                               1
#define       bavPll_ctrlPLL_PU                            1
#define   MSK32avPll_ctrlPLL_PU                               0x00000002

#define     BA_avPll_ctrlPLL_PLL_VDDRA_SEL                 0x0000
#define     B16avPll_ctrlPLL_PLL_VDDRA_SEL                 0x0000
#define   LSb32avPll_ctrlPLL_PLL_VDDRA_SEL                    2
#define   LSb16avPll_ctrlPLL_PLL_VDDRA_SEL                    2
#define       bavPll_ctrlPLL_PLL_VDDRA_SEL                 3
#define   MSK32avPll_ctrlPLL_PLL_VDDRA_SEL                    0x0000001C

#define     BA_avPll_ctrlPLL_REG_RING_EXTRA_I_EN           0x0000
#define     B16avPll_ctrlPLL_REG_RING_EXTRA_I_EN           0x0000
#define   LSb32avPll_ctrlPLL_REG_RING_EXTRA_I_EN              5
#define   LSb16avPll_ctrlPLL_REG_RING_EXTRA_I_EN              5
#define       bavPll_ctrlPLL_REG_RING_EXTRA_I_EN           1
#define   MSK32avPll_ctrlPLL_REG_RING_EXTRA_I_EN              0x00000020

#define     BA_avPll_ctrlPLL_VCO_REF1P45_SEL               0x0000
#define     B16avPll_ctrlPLL_VCO_REF1P45_SEL               0x0000
#define   LSb32avPll_ctrlPLL_VCO_REF1P45_SEL                  6
#define   LSb16avPll_ctrlPLL_VCO_REF1P45_SEL                  6
#define       bavPll_ctrlPLL_VCO_REF1P45_SEL               2
#define   MSK32avPll_ctrlPLL_VCO_REF1P45_SEL                  0x000000C0

#define     BA_avPll_ctrlPLL_VDDA23_PUMP_SEL               0x0001
#define     B16avPll_ctrlPLL_VDDA23_PUMP_SEL               0x0000
#define   LSb32avPll_ctrlPLL_VDDA23_PUMP_SEL                  8
#define   LSb16avPll_ctrlPLL_VDDA23_PUMP_SEL                  8
#define       bavPll_ctrlPLL_VDDA23_PUMP_SEL               2
#define   MSK32avPll_ctrlPLL_VDDA23_PUMP_SEL                  0x00000300

#define     BA_avPll_ctrlPLL_VDDBUF_ADJ                    0x0001
#define     B16avPll_ctrlPLL_VDDBUF_ADJ                    0x0000
#define   LSb32avPll_ctrlPLL_VDDBUF_ADJ                       10
#define   LSb16avPll_ctrlPLL_VDDBUF_ADJ                       10
#define       bavPll_ctrlPLL_VDDBUF_ADJ                    3
#define   MSK32avPll_ctrlPLL_VDDBUF_ADJ                       0x00001C00

#define     BA_avPll_ctrlPLL_VDDL                          0x0001
#define     B16avPll_ctrlPLL_VDDL                          0x0000
#define   LSb32avPll_ctrlPLL_VDDL                             13
#define   LSb16avPll_ctrlPLL_VDDL                             13
#define       bavPll_ctrlPLL_VDDL                          4
#define   MSK32avPll_ctrlPLL_VDDL                             0x0001E000

#define     BA_avPll_ctrlPLL_FBDIV                         0x0002
#define     B16avPll_ctrlPLL_FBDIV                         0x0002
#define   LSb32avPll_ctrlPLL_FBDIV                            17
#define   LSb16avPll_ctrlPLL_FBDIV                            1
#define       bavPll_ctrlPLL_FBDIV                         9
#define   MSK32avPll_ctrlPLL_FBDIV                            0x03FE0000

#define     BA_avPll_ctrlPLL_ICP                           0x0003
#define     B16avPll_ctrlPLL_ICP                           0x0002
#define   LSb32avPll_ctrlPLL_ICP                              26
#define   LSb16avPll_ctrlPLL_ICP                              10
#define       bavPll_ctrlPLL_ICP                           4
#define   MSK32avPll_ctrlPLL_ICP                              0x3C000000

#define     BA_avPll_ctrlPLL_PLL_LPFC2_LESS                0x0003
#define     B16avPll_ctrlPLL_PLL_LPFC2_LESS                0x0002
#define   LSb32avPll_ctrlPLL_PLL_LPFC2_LESS                   30
#define   LSb16avPll_ctrlPLL_PLL_LPFC2_LESS                   14
#define       bavPll_ctrlPLL_PLL_LPFC2_LESS                1
#define   MSK32avPll_ctrlPLL_PLL_LPFC2_LESS                   0x40000000

#define     RA_avPll_ctrlPLL1                              0x0004

#define     BA_avPll_ctrlPLL_REFDIV                        0x0004
#define     B16avPll_ctrlPLL_REFDIV                        0x0004
#define   LSb32avPll_ctrlPLL_REFDIV                           0
#define   LSb16avPll_ctrlPLL_REFDIV                           0
#define       bavPll_ctrlPLL_REFDIV                        7
#define   MSK32avPll_ctrlPLL_REFDIV                           0x0000007F

#define     BA_avPll_ctrlPLL_RESERVE_PLL_IN                0x0004
#define     B16avPll_ctrlPLL_RESERVE_PLL_IN                0x0004
#define   LSb32avPll_ctrlPLL_RESERVE_PLL_IN                   7
#define   LSb16avPll_ctrlPLL_RESERVE_PLL_IN                   7
#define       bavPll_ctrlPLL_RESERVE_PLL_IN                6
#define   MSK32avPll_ctrlPLL_RESERVE_PLL_IN                   0x00001F80

#define     BA_avPll_ctrlPLL_EXT_SPEED                     0x0005
#define     B16avPll_ctrlPLL_EXT_SPEED                     0x0004
#define   LSb32avPll_ctrlPLL_EXT_SPEED                        13
#define   LSb16avPll_ctrlPLL_EXT_SPEED                        13
#define       bavPll_ctrlPLL_EXT_SPEED                     4
#define   MSK32avPll_ctrlPLL_EXT_SPEED                        0x0001E000

#define     BA_avPll_ctrlPLL_SPEED_FBRES                   0x0006
#define     B16avPll_ctrlPLL_SPEED_FBRES                   0x0006
#define   LSb32avPll_ctrlPLL_SPEED_FBRES                      17
#define   LSb16avPll_ctrlPLL_SPEED_FBRES                      1
#define       bavPll_ctrlPLL_SPEED_FBRES                   4
#define   MSK32avPll_ctrlPLL_SPEED_FBRES                      0x001E0000

#define     BA_avPll_ctrlPLL_UPDATE_SEL                    0x0006
#define     B16avPll_ctrlPLL_UPDATE_SEL                    0x0006
#define   LSb32avPll_ctrlPLL_UPDATE_SEL                       21
#define   LSb16avPll_ctrlPLL_UPDATE_SEL                       5
#define       bavPll_ctrlPLL_UPDATE_SEL                    1
#define   MSK32avPll_ctrlPLL_UPDATE_SEL                       0x00200000
	///////////////////////////////////////////////////////////
#define     RA_avPll_ctrlCAL                               0x0008

#define     BA_avPll_ctrlCAL_CAL_FBDIV                     0x0008
#define     B16avPll_ctrlCAL_CAL_FBDIV                     0x0008
#define   LSb32avPll_ctrlCAL_CAL_FBDIV                        0
#define   LSb16avPll_ctrlCAL_CAL_FBDIV                        0
#define       bavPll_ctrlCAL_CAL_FBDIV                     9
#define   MSK32avPll_ctrlCAL_CAL_FBDIV                        0x000001FF

#define     BA_avPll_ctrlCAL_EXT_SLLP_DAC_EN               0x0009
#define     B16avPll_ctrlCAL_EXT_SLLP_DAC_EN               0x0008
#define   LSb32avPll_ctrlCAL_EXT_SLLP_DAC_EN                  9
#define   LSb16avPll_ctrlCAL_EXT_SLLP_DAC_EN                  9
#define       bavPll_ctrlCAL_EXT_SLLP_DAC_EN               1
#define   MSK32avPll_ctrlCAL_EXT_SLLP_DAC_EN                  0x00000200

#define     BA_avPll_ctrlCAL_EXT_SPEED_EN                  0x0009
#define     B16avPll_ctrlCAL_EXT_SPEED_EN                  0x0008
#define   LSb32avPll_ctrlCAL_EXT_SPEED_EN                     10
#define   LSb16avPll_ctrlCAL_EXT_SPEED_EN                     10
#define       bavPll_ctrlCAL_EXT_SPEED_EN                  1
#define   MSK32avPll_ctrlCAL_EXT_SPEED_EN                     0x00000400

#define     BA_avPll_ctrlCAL_EXT_SP_FBRES_EN               0x0009
#define     B16avPll_ctrlCAL_EXT_SP_FBRES_EN               0x0008
#define   LSb32avPll_ctrlCAL_EXT_SP_FBRES_EN                  11
#define   LSb16avPll_ctrlCAL_EXT_SP_FBRES_EN                  11
#define       bavPll_ctrlCAL_EXT_SP_FBRES_EN               1
#define   MSK32avPll_ctrlCAL_EXT_SP_FBRES_EN                  0x00000800

#define     BA_avPll_ctrlCAL_PLL_CALCLK_DIV                0x0009
#define     B16avPll_ctrlCAL_PLL_CALCLK_DIV                0x0008
#define   LSb32avPll_ctrlCAL_PLL_CALCLK_DIV                   12
#define   LSb16avPll_ctrlCAL_PLL_CALCLK_DIV                   12
#define       bavPll_ctrlCAL_PLL_CALCLK_DIV                5
#define   MSK32avPll_ctrlCAL_PLL_CALCLK_DIV                   0x0001F000

#define     BA_avPll_ctrlCAL_PLL_CAL_START                 0x000A
#define     B16avPll_ctrlCAL_PLL_CAL_START                 0x000A
#define   LSb32avPll_ctrlCAL_PLL_CAL_START                    17
#define   LSb16avPll_ctrlCAL_PLL_CAL_START                    1
#define       bavPll_ctrlCAL_PLL_CAL_START                 1
#define   MSK32avPll_ctrlCAL_PLL_CAL_START                    0x00020000

#define     BA_avPll_ctrlCAL_REG_SETTLE_LIMIT              0x000A
#define     B16avPll_ctrlCAL_REG_SETTLE_LIMIT              0x000A
#define   LSb32avPll_ctrlCAL_REG_SETTLE_LIMIT                 18
#define   LSb16avPll_ctrlCAL_REG_SETTLE_LIMIT                 2
#define       bavPll_ctrlCAL_REG_SETTLE_LIMIT              4
#define   MSK32avPll_ctrlCAL_REG_SETTLE_LIMIT                 0x003C0000

#define     BA_avPll_ctrlCAL_SEL_VTHVCOCONT                0x000A
#define     B16avPll_ctrlCAL_SEL_VTHVCOCONT                0x000A
#define   LSb32avPll_ctrlCAL_SEL_VTHVCOCONT                   22
#define   LSb16avPll_ctrlCAL_SEL_VTHVCOCONT                   6
#define       bavPll_ctrlCAL_SEL_VTHVCOCONT                1
#define   MSK32avPll_ctrlCAL_SEL_VTHVCOCONT                   0x00400000

#define     BA_avPll_ctrlCAL_SPEED_THRESH                  0x000A
#define     B16avPll_ctrlCAL_SPEED_THRESH                  0x000A
#define   LSb32avPll_ctrlCAL_SPEED_THRESH                     23
#define   LSb16avPll_ctrlCAL_SPEED_THRESH                     7
#define       bavPll_ctrlCAL_SPEED_THRESH                  6
#define   MSK32avPll_ctrlCAL_SPEED_THRESH                     0x1F800000

#define     BA_avPll_ctrlCAL_VCON_SEL                      0x000B
#define     B16avPll_ctrlCAL_VCON_SEL                      0x000A
#define   LSb32avPll_ctrlCAL_VCON_SEL                         29
#define   LSb16avPll_ctrlCAL_VCON_SEL                         13
#define       bavPll_ctrlCAL_VCON_SEL                      2
#define   MSK32avPll_ctrlCAL_VCON_SEL                         0x60000000

#define     RA_avPll_ctrlCAL1                              0x000C

#define     BA_avPll_ctrlCAL_EXT_SLLP_DAC                  0x000C
#define     B16avPll_ctrlCAL_EXT_SLLP_DAC                  0x000C
#define   LSb32avPll_ctrlCAL_EXT_SLLP_DAC                     0
#define   LSb16avPll_ctrlCAL_EXT_SLLP_DAC                     0
#define       bavPll_ctrlCAL_EXT_SLLP_DAC                  7
#define   MSK32avPll_ctrlCAL_EXT_SLLP_DAC                     0x0000007F

#define     BA_avPll_ctrlCAL_VTH_VCO_CAL                   0x000C
#define     B16avPll_ctrlCAL_VTH_VCO_CAL                   0x000C
#define   LSb32avPll_ctrlCAL_VTH_VCO_CAL                      7
#define   LSb16avPll_ctrlCAL_VTH_VCO_CAL                      7
#define       bavPll_ctrlCAL_VTH_VCO_CAL                   2
#define   MSK32avPll_ctrlCAL_VTH_VCO_CAL                      0x00000180

#define     BA_avPll_ctrlCAL_VTH_VCO_PTAT                  0x000D
#define     B16avPll_ctrlCAL_VTH_VCO_PTAT                  0x000C
#define   LSb32avPll_ctrlCAL_VTH_VCO_PTAT                     9
#define   LSb16avPll_ctrlCAL_VTH_VCO_PTAT                     9
#define       bavPll_ctrlCAL_VTH_VCO_PTAT                  2
#define   MSK32avPll_ctrlCAL_VTH_VCO_PTAT                     0x00000600
	///////////////////////////////////////////////////////////
#define     RA_avPll_ctrlSlowLoop                          0x0010

#define     BA_avPll_ctrlSlowLoop_PW_SLLP                  0x0010
#define     B16avPll_ctrlSlowLoop_PW_SLLP                  0x0010
#define   LSb32avPll_ctrlSlowLoop_PW_SLLP                     0
#define   LSb16avPll_ctrlSlowLoop_PW_SLLP                     0
#define       bavPll_ctrlSlowLoop_PW_SLLP                  3
#define   MSK32avPll_ctrlSlowLoop_PW_SLLP                     0x00000007

#define     BA_avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN          0x0010
#define     B16avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN          0x0010
#define   LSb32avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN             3
#define   LSb16avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN             3
#define       bavPll_ctrlSlowLoop_SLLP_CLK_DIV5EN          1
#define   MSK32avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN             0x00000008

#define     BA_avPll_ctrlSlowLoop_SLLP_EN_DIS              0x0010
#define     B16avPll_ctrlSlowLoop_SLLP_EN_DIS              0x0010
#define   LSb32avPll_ctrlSlowLoop_SLLP_EN_DIS                 4
#define   LSb16avPll_ctrlSlowLoop_SLLP_EN_DIS                 4
#define       bavPll_ctrlSlowLoop_SLLP_EN_DIS              1
#define   MSK32avPll_ctrlSlowLoop_SLLP_EN_DIS                 0x00000010

#define     BA_avPll_ctrlSlowLoop_SLLP_PSF_LEVEL           0x0010
#define     B16avPll_ctrlSlowLoop_SLLP_PSF_LEVEL           0x0010
#define   LSb32avPll_ctrlSlowLoop_SLLP_PSF_LEVEL              5
#define   LSb16avPll_ctrlSlowLoop_SLLP_PSF_LEVEL              5
#define       bavPll_ctrlSlowLoop_SLLP_PSF_LEVEL           3
#define   MSK32avPll_ctrlSlowLoop_SLLP_PSF_LEVEL              0x000000E0
	///////////////////////////////////////////////////////////
#define     RA_avPll_ctrlINTP                              0x0014

#define     BA_avPll_ctrlINTP_CLK_DET_EN                   0x0014
#define     B16avPll_ctrlINTP_CLK_DET_EN                   0x0014
#define   LSb32avPll_ctrlINTP_CLK_DET_EN                      0
#define   LSb16avPll_ctrlINTP_CLK_DET_EN                      0
#define       bavPll_ctrlINTP_CLK_DET_EN                   1
#define   MSK32avPll_ctrlINTP_CLK_DET_EN                      0x00000001

#define     BA_avPll_ctrlINTP_DPHER_DLY_SEL                0x0014
#define     B16avPll_ctrlINTP_DPHER_DLY_SEL                0x0014
#define   LSb32avPll_ctrlINTP_DPHER_DLY_SEL                   1
#define   LSb16avPll_ctrlINTP_DPHER_DLY_SEL                   1
#define       bavPll_ctrlINTP_DPHER_DLY_SEL                2
#define   MSK32avPll_ctrlINTP_DPHER_DLY_SEL                   0x00000006

#define     BA_avPll_ctrlINTP_INTPI                        0x0014
#define     B16avPll_ctrlINTP_INTPI                        0x0014
#define   LSb32avPll_ctrlINTP_INTPI                           3
#define   LSb16avPll_ctrlINTP_INTPI                           3
#define       bavPll_ctrlINTP_INTPI                        4
#define   MSK32avPll_ctrlINTP_INTPI                           0x00000078

#define     BA_avPll_ctrlINTP_INTPR                        0x0014
#define     B16avPll_ctrlINTP_INTPR                        0x0014
#define   LSb32avPll_ctrlINTP_INTPR                           7
#define   LSb16avPll_ctrlINTP_INTPR                           7
#define       bavPll_ctrlINTP_INTPR                        3
#define   MSK32avPll_ctrlINTP_INTPR                           0x00000380
	///////////////////////////////////////////////////////////
#define     RA_avPll_ctrlC8AddOn                           0x0018

#define     BA_avPll_ctrlC8AddOn_MASTER_SLAVEB             0x0018
#define     B16avPll_ctrlC8AddOn_MASTER_SLAVEB             0x0018
#define   LSb32avPll_ctrlC8AddOn_MASTER_SLAVEB                0
#define   LSb16avPll_ctrlC8AddOn_MASTER_SLAVEB                0
#define       bavPll_ctrlC8AddOn_MASTER_SLAVEB             1
#define   MSK32avPll_ctrlC8AddOn_MASTER_SLAVEB                0x00000001

#define     BA_avPll_ctrlC8AddOn_MODE                      0x0018
#define     B16avPll_ctrlC8AddOn_MODE                      0x0018
#define   LSb32avPll_ctrlC8AddOn_MODE                         1
#define   LSb16avPll_ctrlC8AddOn_MODE                         1
#define       bavPll_ctrlC8AddOn_MODE                      2
#define   MSK32avPll_ctrlC8AddOn_MODE                         0x00000006
	///////////////////////////////////////////////////////////
#define     RA_avPll_C1                                    0x001C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C2                                    0x002C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C3                                    0x003C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C4                                    0x004C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C5                                    0x005C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C6                                    0x006C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C7                                    0x007C
	///////////////////////////////////////////////////////////
#define     RA_avPll_C8                                    0x008C
	///////////////////////////////////////////////////////////
#define     RA_avPll_ctrlTest                              0x009C

#define     BA_avPll_ctrlTest_CLKOUT_TST_EN                0x009C
#define     B16avPll_ctrlTest_CLKOUT_TST_EN                0x009C
#define   LSb32avPll_ctrlTest_CLKOUT_TST_EN                   0
#define   LSb16avPll_ctrlTest_CLKOUT_TST_EN                   0
#define       bavPll_ctrlTest_CLKOUT_TST_EN                1
#define   MSK32avPll_ctrlTest_CLKOUT_TST_EN                   0x00000001

#define     BA_avPll_ctrlTest_TEST_MON                     0x009C
#define     B16avPll_ctrlTest_TEST_MON                     0x009C
#define   LSb32avPll_ctrlTest_TEST_MON                        1
#define   LSb16avPll_ctrlTest_TEST_MON                        1
#define       bavPll_ctrlTest_TEST_MON                     6
#define   MSK32avPll_ctrlTest_TEST_MON                        0x0000007E
	///////////////////////////////////////////////////////////
#define     RA_avPll_status                                0x00A0

#define     BA_avPll_status_PLL_LOCK                       0x00A0
#define     B16avPll_status_PLL_LOCK                       0x00A0
#define   LSb32avPll_status_PLL_LOCK                          0
#define   LSb16avPll_status_PLL_LOCK                          0
#define       bavPll_status_PLL_LOCK                       1
#define   MSK32avPll_status_PLL_LOCK                          0x00000001

#define     BA_avPll_status_RESERVE_PLL_OUT                0x00A0
#define     B16avPll_status_RESERVE_PLL_OUT                0x00A0
#define   LSb32avPll_status_RESERVE_PLL_OUT                   1
#define   LSb16avPll_status_RESERVE_PLL_OUT                   1
#define       bavPll_status_RESERVE_PLL_OUT                6
#define   MSK32avPll_status_RESERVE_PLL_OUT                   0x0000007E

#define     BA_avPll_status_FBDIV_RD                       0x00A0
#define     B16avPll_status_FBDIV_RD                       0x00A0
#define   LSb32avPll_status_FBDIV_RD                          7
#define   LSb16avPll_status_FBDIV_RD                          7
#define       bavPll_status_FBDIV_RD                       9
#define   MSK32avPll_status_FBDIV_RD                          0x0000FF80

#define     BA_avPll_status_PLL_CAL_DONE                   0x00A2
#define     B16avPll_status_PLL_CAL_DONE                   0x00A2
#define   LSb32avPll_status_PLL_CAL_DONE                      16
#define   LSb16avPll_status_PLL_CAL_DONE                      0
#define       bavPll_status_PLL_CAL_DONE                   1
#define   MSK32avPll_status_PLL_CAL_DONE                      0x00010000

#define     BA_avPll_status_SPEED_CNT                      0x00A2
#define     B16avPll_status_SPEED_CNT                      0x00A2
#define   LSb32avPll_status_SPEED_CNT                         17
#define   LSb16avPll_status_SPEED_CNT                         1
#define       bavPll_status_SPEED_CNT                      6
#define   MSK32avPll_status_SPEED_CNT                         0x007E0000

#define     BA_avPll_status_SPEED_RD                       0x00A2
#define     B16avPll_status_SPEED_RD                       0x00A2
#define   LSb32avPll_status_SPEED_RD                          23
#define   LSb16avPll_status_SPEED_RD                          7
#define       bavPll_status_SPEED_RD                       4
#define   MSK32avPll_status_SPEED_RD                          0x07800000

#define     RA_avPll_status1                               0x00A4

#define     BA_avPll_status_SLLP_DAC_RD                    0x00A4
#define     B16avPll_status_SLLP_DAC_RD                    0x00A4
#define   LSb32avPll_status_SLLP_DAC_RD                       0
#define   LSb16avPll_status_SLLP_DAC_RD                       0
#define       bavPll_status_SLLP_DAC_RD                    7
#define   MSK32avPll_status_SLLP_DAC_RD                       0x0000007F
	///////////////////////////////////////////////////////////

	typedef struct SIE_avPll {
		///////////////////////////////////////////////////////////
#define   GET32avPll_ctrlPLL_RESET(r32)                    _BFGET_(r32, 0, 0)
#define   SET32avPll_ctrlPLL_RESET(r32,v)                  _BFSET_(r32, 0, 0,v)
#define   GET16avPll_ctrlPLL_RESET(r16)                    _BFGET_(r16, 0, 0)
#define   SET16avPll_ctrlPLL_RESET(r16,v)                  _BFSET_(r16, 0, 0,v)

#define   GET32avPll_ctrlPLL_PU(r32)                       _BFGET_(r32, 1, 1)
#define   SET32avPll_ctrlPLL_PU(r32,v)                     _BFSET_(r32, 1, 1,v)
#define   GET16avPll_ctrlPLL_PU(r16)                       _BFGET_(r16, 1, 1)
#define   SET16avPll_ctrlPLL_PU(r16,v)                     _BFSET_(r16, 1, 1,v)

#define   GET32avPll_ctrlPLL_PLL_VDDRA_SEL(r32)            _BFGET_(r32, 4, 2)
#define   SET32avPll_ctrlPLL_PLL_VDDRA_SEL(r32,v)          _BFSET_(r32, 4, 2,v)
#define   GET16avPll_ctrlPLL_PLL_VDDRA_SEL(r16)            _BFGET_(r16, 4, 2)
#define   SET16avPll_ctrlPLL_PLL_VDDRA_SEL(r16,v)          _BFSET_(r16, 4, 2,v)

#define   GET32avPll_ctrlPLL_REG_RING_EXTRA_I_EN(r32)      _BFGET_(r32, 5, 5)
#define   SET32avPll_ctrlPLL_REG_RING_EXTRA_I_EN(r32,v)    _BFSET_(r32, 5, 5,v)
#define   GET16avPll_ctrlPLL_REG_RING_EXTRA_I_EN(r16)      _BFGET_(r16, 5, 5)
#define   SET16avPll_ctrlPLL_REG_RING_EXTRA_I_EN(r16,v)    _BFSET_(r16, 5, 5,v)

#define   GET32avPll_ctrlPLL_VCO_REF1P45_SEL(r32)          _BFGET_(r32, 7, 6)
#define   SET32avPll_ctrlPLL_VCO_REF1P45_SEL(r32,v)        _BFSET_(r32, 7, 6,v)
#define   GET16avPll_ctrlPLL_VCO_REF1P45_SEL(r16)          _BFGET_(r16, 7, 6)
#define   SET16avPll_ctrlPLL_VCO_REF1P45_SEL(r16,v)        _BFSET_(r16, 7, 6,v)

#define   GET32avPll_ctrlPLL_VDDA23_PUMP_SEL(r32)          _BFGET_(r32, 9, 8)
#define   SET32avPll_ctrlPLL_VDDA23_PUMP_SEL(r32,v)        _BFSET_(r32, 9, 8,v)
#define   GET16avPll_ctrlPLL_VDDA23_PUMP_SEL(r16)          _BFGET_(r16, 9, 8)
#define   SET16avPll_ctrlPLL_VDDA23_PUMP_SEL(r16,v)        _BFSET_(r16, 9, 8,v)

#define   GET32avPll_ctrlPLL_VDDBUF_ADJ(r32)               _BFGET_(r32,12,10)
#define   SET32avPll_ctrlPLL_VDDBUF_ADJ(r32,v)             _BFSET_(r32,12,10,v)
#define   GET16avPll_ctrlPLL_VDDBUF_ADJ(r16)               _BFGET_(r16,12,10)
#define   SET16avPll_ctrlPLL_VDDBUF_ADJ(r16,v)             _BFSET_(r16,12,10,v)

#define   GET32avPll_ctrlPLL_VDDL(r32)                     _BFGET_(r32,16,13)
#define   SET32avPll_ctrlPLL_VDDL(r32,v)                   _BFSET_(r32,16,13,v)

#define   GET32avPll_ctrlPLL_FBDIV(r32)                    _BFGET_(r32,25,17)
#define   SET32avPll_ctrlPLL_FBDIV(r32,v)                  _BFSET_(r32,25,17,v)
#define   GET16avPll_ctrlPLL_FBDIV(r16)                    _BFGET_(r16, 9, 1)
#define   SET16avPll_ctrlPLL_FBDIV(r16,v)                  _BFSET_(r16, 9, 1,v)

#define   GET32avPll_ctrlPLL_ICP(r32)                      _BFGET_(r32,29,26)
#define   SET32avPll_ctrlPLL_ICP(r32,v)                    _BFSET_(r32,29,26,v)
#define   GET16avPll_ctrlPLL_ICP(r16)                      _BFGET_(r16,13,10)
#define   SET16avPll_ctrlPLL_ICP(r16,v)                    _BFSET_(r16,13,10,v)

#define   GET32avPll_ctrlPLL_PLL_LPFC2_LESS(r32)           _BFGET_(r32,30,30)
#define   SET32avPll_ctrlPLL_PLL_LPFC2_LESS(r32,v)         _BFSET_(r32,30,30,v)
#define   GET16avPll_ctrlPLL_PLL_LPFC2_LESS(r16)           _BFGET_(r16,14,14)
#define   SET16avPll_ctrlPLL_PLL_LPFC2_LESS(r16,v)         _BFSET_(r16,14,14,v)

#define     w32avPll_ctrlPLL                               {\
            UNSG32 uctrlPLL_RESET                              :  1;\
            UNSG32 uctrlPLL_PU                                 :  1;\
            UNSG32 uctrlPLL_PLL_VDDRA_SEL                      :  3;\
            UNSG32 uctrlPLL_REG_RING_EXTRA_I_EN                :  1;\
            UNSG32 uctrlPLL_VCO_REF1P45_SEL                    :  2;\
            UNSG32 uctrlPLL_VDDA23_PUMP_SEL                    :  2;\
            UNSG32 uctrlPLL_VDDBUF_ADJ                         :  3;\
            UNSG32 uctrlPLL_VDDL                               :  4;\
            UNSG32 uctrlPLL_FBDIV                              :  9;\
            UNSG32 uctrlPLL_ICP                                :  4;\
            UNSG32 uctrlPLL_PLL_LPFC2_LESS                     :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
		union {
			UNSG32 u32avPll_ctrlPLL;
			struct w32avPll_ctrlPLL;
		};
#define   GET32avPll_ctrlPLL_REFDIV(r32)                   _BFGET_(r32, 6, 0)
#define   SET32avPll_ctrlPLL_REFDIV(r32,v)                 _BFSET_(r32, 6, 0,v)
#define   GET16avPll_ctrlPLL_REFDIV(r16)                   _BFGET_(r16, 6, 0)
#define   SET16avPll_ctrlPLL_REFDIV(r16,v)                 _BFSET_(r16, 6, 0,v)

#define   GET32avPll_ctrlPLL_RESERVE_PLL_IN(r32)           _BFGET_(r32,12, 7)
#define   SET32avPll_ctrlPLL_RESERVE_PLL_IN(r32,v)         _BFSET_(r32,12, 7,v)
#define   GET16avPll_ctrlPLL_RESERVE_PLL_IN(r16)           _BFGET_(r16,12, 7)
#define   SET16avPll_ctrlPLL_RESERVE_PLL_IN(r16,v)         _BFSET_(r16,12, 7,v)

#define   GET32avPll_ctrlPLL_EXT_SPEED(r32)                _BFGET_(r32,16,13)
#define   SET32avPll_ctrlPLL_EXT_SPEED(r32,v)              _BFSET_(r32,16,13,v)

#define   GET32avPll_ctrlPLL_SPEED_FBRES(r32)              _BFGET_(r32,20,17)
#define   SET32avPll_ctrlPLL_SPEED_FBRES(r32,v)            _BFSET_(r32,20,17,v)
#define   GET16avPll_ctrlPLL_SPEED_FBRES(r16)              _BFGET_(r16, 4, 1)
#define   SET16avPll_ctrlPLL_SPEED_FBRES(r16,v)            _BFSET_(r16, 4, 1,v)

#define   GET32avPll_ctrlPLL_UPDATE_SEL(r32)               _BFGET_(r32,21,21)
#define   SET32avPll_ctrlPLL_UPDATE_SEL(r32,v)             _BFSET_(r32,21,21,v)
#define   GET16avPll_ctrlPLL_UPDATE_SEL(r16)               _BFGET_(r16, 5, 5)
#define   SET16avPll_ctrlPLL_UPDATE_SEL(r16,v)             _BFSET_(r16, 5, 5,v)

#define     w32avPll_ctrlPLL1                              {\
            UNSG32 uctrlPLL_REFDIV                             :  7;\
            UNSG32 uctrlPLL_RESERVE_PLL_IN                     :  6;\
            UNSG32 uctrlPLL_EXT_SPEED                          :  4;\
            UNSG32 uctrlPLL_SPEED_FBRES                        :  4;\
            UNSG32 uctrlPLL_UPDATE_SEL                         :  1;\
            UNSG32 RSVDx4_b22                                  : 10;\
          }
		union {
			UNSG32 u32avPll_ctrlPLL1;
			struct w32avPll_ctrlPLL1;
		};
		///////////////////////////////////////////////////////////
#define   GET32avPll_ctrlCAL_CAL_FBDIV(r32)                _BFGET_(r32, 8, 0)
#define   SET32avPll_ctrlCAL_CAL_FBDIV(r32,v)              _BFSET_(r32, 8, 0,v)
#define   GET16avPll_ctrlCAL_CAL_FBDIV(r16)                _BFGET_(r16, 8, 0)
#define   SET16avPll_ctrlCAL_CAL_FBDIV(r16,v)              _BFSET_(r16, 8, 0,v)

#define   GET32avPll_ctrlCAL_EXT_SLLP_DAC_EN(r32)          _BFGET_(r32, 9, 9)
#define   SET32avPll_ctrlCAL_EXT_SLLP_DAC_EN(r32,v)        _BFSET_(r32, 9, 9,v)
#define   GET16avPll_ctrlCAL_EXT_SLLP_DAC_EN(r16)          _BFGET_(r16, 9, 9)
#define   SET16avPll_ctrlCAL_EXT_SLLP_DAC_EN(r16,v)        _BFSET_(r16, 9, 9,v)

#define   GET32avPll_ctrlCAL_EXT_SPEED_EN(r32)             _BFGET_(r32,10,10)
#define   SET32avPll_ctrlCAL_EXT_SPEED_EN(r32,v)           _BFSET_(r32,10,10,v)
#define   GET16avPll_ctrlCAL_EXT_SPEED_EN(r16)             _BFGET_(r16,10,10)
#define   SET16avPll_ctrlCAL_EXT_SPEED_EN(r16,v)           _BFSET_(r16,10,10,v)

#define   GET32avPll_ctrlCAL_EXT_SP_FBRES_EN(r32)          _BFGET_(r32,11,11)
#define   SET32avPll_ctrlCAL_EXT_SP_FBRES_EN(r32,v)        _BFSET_(r32,11,11,v)
#define   GET16avPll_ctrlCAL_EXT_SP_FBRES_EN(r16)          _BFGET_(r16,11,11)
#define   SET16avPll_ctrlCAL_EXT_SP_FBRES_EN(r16,v)        _BFSET_(r16,11,11,v)

#define   GET32avPll_ctrlCAL_PLL_CALCLK_DIV(r32)           _BFGET_(r32,16,12)
#define   SET32avPll_ctrlCAL_PLL_CALCLK_DIV(r32,v)         _BFSET_(r32,16,12,v)

#define   GET32avPll_ctrlCAL_PLL_CAL_START(r32)            _BFGET_(r32,17,17)
#define   SET32avPll_ctrlCAL_PLL_CAL_START(r32,v)          _BFSET_(r32,17,17,v)
#define   GET16avPll_ctrlCAL_PLL_CAL_START(r16)            _BFGET_(r16, 1, 1)
#define   SET16avPll_ctrlCAL_PLL_CAL_START(r16,v)          _BFSET_(r16, 1, 1,v)

#define   GET32avPll_ctrlCAL_REG_SETTLE_LIMIT(r32)         _BFGET_(r32,21,18)
#define   SET32avPll_ctrlCAL_REG_SETTLE_LIMIT(r32,v)       _BFSET_(r32,21,18,v)
#define   GET16avPll_ctrlCAL_REG_SETTLE_LIMIT(r16)         _BFGET_(r16, 5, 2)
#define   SET16avPll_ctrlCAL_REG_SETTLE_LIMIT(r16,v)       _BFSET_(r16, 5, 2,v)

#define   GET32avPll_ctrlCAL_SEL_VTHVCOCONT(r32)           _BFGET_(r32,22,22)
#define   SET32avPll_ctrlCAL_SEL_VTHVCOCONT(r32,v)         _BFSET_(r32,22,22,v)
#define   GET16avPll_ctrlCAL_SEL_VTHVCOCONT(r16)           _BFGET_(r16, 6, 6)
#define   SET16avPll_ctrlCAL_SEL_VTHVCOCONT(r16,v)         _BFSET_(r16, 6, 6,v)

#define   GET32avPll_ctrlCAL_SPEED_THRESH(r32)             _BFGET_(r32,28,23)
#define   SET32avPll_ctrlCAL_SPEED_THRESH(r32,v)           _BFSET_(r32,28,23,v)
#define   GET16avPll_ctrlCAL_SPEED_THRESH(r16)             _BFGET_(r16,12, 7)
#define   SET16avPll_ctrlCAL_SPEED_THRESH(r16,v)           _BFSET_(r16,12, 7,v)

#define   GET32avPll_ctrlCAL_VCON_SEL(r32)                 _BFGET_(r32,30,29)
#define   SET32avPll_ctrlCAL_VCON_SEL(r32,v)               _BFSET_(r32,30,29,v)
#define   GET16avPll_ctrlCAL_VCON_SEL(r16)                 _BFGET_(r16,14,13)
#define   SET16avPll_ctrlCAL_VCON_SEL(r16,v)               _BFSET_(r16,14,13,v)

#define     w32avPll_ctrlCAL                               {\
            UNSG32 uctrlCAL_CAL_FBDIV                          :  9;\
            UNSG32 uctrlCAL_EXT_SLLP_DAC_EN                    :  1;\
            UNSG32 uctrlCAL_EXT_SPEED_EN                       :  1;\
            UNSG32 uctrlCAL_EXT_SP_FBRES_EN                    :  1;\
            UNSG32 uctrlCAL_PLL_CALCLK_DIV                     :  5;\
            UNSG32 uctrlCAL_PLL_CAL_START                      :  1;\
            UNSG32 uctrlCAL_REG_SETTLE_LIMIT                   :  4;\
            UNSG32 uctrlCAL_SEL_VTHVCOCONT                     :  1;\
            UNSG32 uctrlCAL_SPEED_THRESH                       :  6;\
            UNSG32 uctrlCAL_VCON_SEL                           :  2;\
            UNSG32 RSVDx8_b31                                  :  1;\
          }
		union {
			UNSG32 u32avPll_ctrlCAL;
			struct w32avPll_ctrlCAL;
		};
#define   GET32avPll_ctrlCAL_EXT_SLLP_DAC(r32)             _BFGET_(r32, 6, 0)
#define   SET32avPll_ctrlCAL_EXT_SLLP_DAC(r32,v)           _BFSET_(r32, 6, 0,v)
#define   GET16avPll_ctrlCAL_EXT_SLLP_DAC(r16)             _BFGET_(r16, 6, 0)
#define   SET16avPll_ctrlCAL_EXT_SLLP_DAC(r16,v)           _BFSET_(r16, 6, 0,v)

#define   GET32avPll_ctrlCAL_VTH_VCO_CAL(r32)              _BFGET_(r32, 8, 7)
#define   SET32avPll_ctrlCAL_VTH_VCO_CAL(r32,v)            _BFSET_(r32, 8, 7,v)
#define   GET16avPll_ctrlCAL_VTH_VCO_CAL(r16)              _BFGET_(r16, 8, 7)
#define   SET16avPll_ctrlCAL_VTH_VCO_CAL(r16,v)            _BFSET_(r16, 8, 7,v)

#define   GET32avPll_ctrlCAL_VTH_VCO_PTAT(r32)             _BFGET_(r32,10, 9)
#define   SET32avPll_ctrlCAL_VTH_VCO_PTAT(r32,v)           _BFSET_(r32,10, 9,v)
#define   GET16avPll_ctrlCAL_VTH_VCO_PTAT(r16)             _BFGET_(r16,10, 9)
#define   SET16avPll_ctrlCAL_VTH_VCO_PTAT(r16,v)           _BFSET_(r16,10, 9,v)

#define     w32avPll_ctrlCAL1                              {\
            UNSG32 uctrlCAL_EXT_SLLP_DAC                       :  7;\
            UNSG32 uctrlCAL_VTH_VCO_CAL                        :  2;\
            UNSG32 uctrlCAL_VTH_VCO_PTAT                       :  2;\
            UNSG32 RSVDxC_b11                                  : 21;\
          }
		union {
			UNSG32 u32avPll_ctrlCAL1;
			struct w32avPll_ctrlCAL1;
		};
		///////////////////////////////////////////////////////////
#define   GET32avPll_ctrlSlowLoop_PW_SLLP(r32)             _BFGET_(r32, 2, 0)
#define   SET32avPll_ctrlSlowLoop_PW_SLLP(r32,v)           _BFSET_(r32, 2, 0,v)
#define   GET16avPll_ctrlSlowLoop_PW_SLLP(r16)             _BFGET_(r16, 2, 0)
#define   SET16avPll_ctrlSlowLoop_PW_SLLP(r16,v)           _BFSET_(r16, 2, 0,v)

#define   GET32avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN(r32)     _BFGET_(r32, 3, 3)
#define   SET32avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN(r32,v)   _BFSET_(r32, 3, 3,v)
#define   GET16avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN(r16)     _BFGET_(r16, 3, 3)
#define   SET16avPll_ctrlSlowLoop_SLLP_CLK_DIV5EN(r16,v)   _BFSET_(r16, 3, 3,v)

#define   GET32avPll_ctrlSlowLoop_SLLP_EN_DIS(r32)         _BFGET_(r32, 4, 4)
#define   SET32avPll_ctrlSlowLoop_SLLP_EN_DIS(r32,v)       _BFSET_(r32, 4, 4,v)
#define   GET16avPll_ctrlSlowLoop_SLLP_EN_DIS(r16)         _BFGET_(r16, 4, 4)
#define   SET16avPll_ctrlSlowLoop_SLLP_EN_DIS(r16,v)       _BFSET_(r16, 4, 4,v)

#define   GET32avPll_ctrlSlowLoop_SLLP_PSF_LEVEL(r32)      _BFGET_(r32, 7, 5)
#define   SET32avPll_ctrlSlowLoop_SLLP_PSF_LEVEL(r32,v)    _BFSET_(r32, 7, 5,v)
#define   GET16avPll_ctrlSlowLoop_SLLP_PSF_LEVEL(r16)      _BFGET_(r16, 7, 5)
#define   SET16avPll_ctrlSlowLoop_SLLP_PSF_LEVEL(r16,v)    _BFSET_(r16, 7, 5,v)

#define     w32avPll_ctrlSlowLoop                          {\
            UNSG32 uctrlSlowLoop_PW_SLLP                       :  3;\
            UNSG32 uctrlSlowLoop_SLLP_CLK_DIV5EN               :  1;\
            UNSG32 uctrlSlowLoop_SLLP_EN_DIS                   :  1;\
            UNSG32 uctrlSlowLoop_SLLP_PSF_LEVEL                :  3;\
            UNSG32 RSVDx10_b8                                  : 24;\
          }
		union {
			UNSG32 u32avPll_ctrlSlowLoop;
			struct w32avPll_ctrlSlowLoop;
		};
		///////////////////////////////////////////////////////////
#define   GET32avPll_ctrlINTP_CLK_DET_EN(r32)              _BFGET_(r32, 0, 0)
#define   SET32avPll_ctrlINTP_CLK_DET_EN(r32,v)            _BFSET_(r32, 0, 0,v)
#define   GET16avPll_ctrlINTP_CLK_DET_EN(r16)              _BFGET_(r16, 0, 0)
#define   SET16avPll_ctrlINTP_CLK_DET_EN(r16,v)            _BFSET_(r16, 0, 0,v)

#define   GET32avPll_ctrlINTP_DPHER_DLY_SEL(r32)           _BFGET_(r32, 2, 1)
#define   SET32avPll_ctrlINTP_DPHER_DLY_SEL(r32,v)         _BFSET_(r32, 2, 1,v)
#define   GET16avPll_ctrlINTP_DPHER_DLY_SEL(r16)           _BFGET_(r16, 2, 1)
#define   SET16avPll_ctrlINTP_DPHER_DLY_SEL(r16,v)         _BFSET_(r16, 2, 1,v)

#define   GET32avPll_ctrlINTP_INTPI(r32)                   _BFGET_(r32, 6, 3)
#define   SET32avPll_ctrlINTP_INTPI(r32,v)                 _BFSET_(r32, 6, 3,v)
#define   GET16avPll_ctrlINTP_INTPI(r16)                   _BFGET_(r16, 6, 3)
#define   SET16avPll_ctrlINTP_INTPI(r16,v)                 _BFSET_(r16, 6, 3,v)

#define   GET32avPll_ctrlINTP_INTPR(r32)                   _BFGET_(r32, 9, 7)
#define   SET32avPll_ctrlINTP_INTPR(r32,v)                 _BFSET_(r32, 9, 7,v)
#define   GET16avPll_ctrlINTP_INTPR(r16)                   _BFGET_(r16, 9, 7)
#define   SET16avPll_ctrlINTP_INTPR(r16,v)                 _BFSET_(r16, 9, 7,v)

#define     w32avPll_ctrlINTP                              {\
            UNSG32 uctrlINTP_CLK_DET_EN                        :  1;\
            UNSG32 uctrlINTP_DPHER_DLY_SEL                     :  2;\
            UNSG32 uctrlINTP_INTPI                             :  4;\
            UNSG32 uctrlINTP_INTPR                             :  3;\
            UNSG32 RSVDx14_b10                                 : 22;\
          }
		union {
			UNSG32 u32avPll_ctrlINTP;
			struct w32avPll_ctrlINTP;
		};
		///////////////////////////////////////////////////////////
#define   GET32avPll_ctrlC8AddOn_MASTER_SLAVEB(r32)        _BFGET_(r32, 0, 0)
#define   SET32avPll_ctrlC8AddOn_MASTER_SLAVEB(r32,v)      _BFSET_(r32, 0, 0,v)
#define   GET16avPll_ctrlC8AddOn_MASTER_SLAVEB(r16)        _BFGET_(r16, 0, 0)
#define   SET16avPll_ctrlC8AddOn_MASTER_SLAVEB(r16,v)      _BFSET_(r16, 0, 0,v)

#define   GET32avPll_ctrlC8AddOn_MODE(r32)                 _BFGET_(r32, 2, 1)
#define   SET32avPll_ctrlC8AddOn_MODE(r32,v)               _BFSET_(r32, 2, 1,v)
#define   GET16avPll_ctrlC8AddOn_MODE(r16)                 _BFGET_(r16, 2, 1)
#define   SET16avPll_ctrlC8AddOn_MODE(r16,v)               _BFSET_(r16, 2, 1,v)

#define     w32avPll_ctrlC8AddOn                           {\
            UNSG32 uctrlC8AddOn_MASTER_SLAVEB                  :  1;\
            UNSG32 uctrlC8AddOn_MODE                           :  2;\
            UNSG32 RSVDx18_b3                                  : 29;\
          }
		union {
			UNSG32 u32avPll_ctrlC8AddOn;
			struct w32avPll_ctrlC8AddOn;
		};
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C1;
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C2;
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C3;
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C4;
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C5;
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C6;
		///////////////////////////////////////////////////////////
		SIE_avpllCh ie_C7;
		///////////////////////////////////////////////////////////
		SIE_avpllCh8 ie_C8;
		///////////////////////////////////////////////////////////
#define   GET32avPll_ctrlTest_CLKOUT_TST_EN(r32)           _BFGET_(r32, 0, 0)
#define   SET32avPll_ctrlTest_CLKOUT_TST_EN(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avPll_ctrlTest_CLKOUT_TST_EN(r16)           _BFGET_(r16, 0, 0)
#define   SET16avPll_ctrlTest_CLKOUT_TST_EN(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avPll_ctrlTest_TEST_MON(r32)                _BFGET_(r32, 6, 1)
#define   SET32avPll_ctrlTest_TEST_MON(r32,v)              _BFSET_(r32, 6, 1,v)
#define   GET16avPll_ctrlTest_TEST_MON(r16)                _BFGET_(r16, 6, 1)
#define   SET16avPll_ctrlTest_TEST_MON(r16,v)              _BFSET_(r16, 6, 1,v)

#define     w32avPll_ctrlTest                              {\
            UNSG32 uctrlTest_CLKOUT_TST_EN                     :  1;\
            UNSG32 uctrlTest_TEST_MON                          :  6;\
            UNSG32 RSVDx9C_b7                                  : 25;\
          }
		union {
			UNSG32 u32avPll_ctrlTest;
			struct w32avPll_ctrlTest;
		};
		///////////////////////////////////////////////////////////
#define   GET32avPll_status_PLL_LOCK(r32)                  _BFGET_(r32, 0, 0)
#define   SET32avPll_status_PLL_LOCK(r32,v)                _BFSET_(r32, 0, 0,v)
#define   GET16avPll_status_PLL_LOCK(r16)                  _BFGET_(r16, 0, 0)
#define   SET16avPll_status_PLL_LOCK(r16,v)                _BFSET_(r16, 0, 0,v)

#define   GET32avPll_status_RESERVE_PLL_OUT(r32)           _BFGET_(r32, 6, 1)
#define   SET32avPll_status_RESERVE_PLL_OUT(r32,v)         _BFSET_(r32, 6, 1,v)
#define   GET16avPll_status_RESERVE_PLL_OUT(r16)           _BFGET_(r16, 6, 1)
#define   SET16avPll_status_RESERVE_PLL_OUT(r16,v)         _BFSET_(r16, 6, 1,v)

#define   GET32avPll_status_FBDIV_RD(r32)                  _BFGET_(r32,15, 7)
#define   SET32avPll_status_FBDIV_RD(r32,v)                _BFSET_(r32,15, 7,v)
#define   GET16avPll_status_FBDIV_RD(r16)                  _BFGET_(r16,15, 7)
#define   SET16avPll_status_FBDIV_RD(r16,v)                _BFSET_(r16,15, 7,v)

#define   GET32avPll_status_PLL_CAL_DONE(r32)              _BFGET_(r32,16,16)
#define   SET32avPll_status_PLL_CAL_DONE(r32,v)            _BFSET_(r32,16,16,v)
#define   GET16avPll_status_PLL_CAL_DONE(r16)              _BFGET_(r16, 0, 0)
#define   SET16avPll_status_PLL_CAL_DONE(r16,v)            _BFSET_(r16, 0, 0,v)

#define   GET32avPll_status_SPEED_CNT(r32)                 _BFGET_(r32,22,17)
#define   SET32avPll_status_SPEED_CNT(r32,v)               _BFSET_(r32,22,17,v)
#define   GET16avPll_status_SPEED_CNT(r16)                 _BFGET_(r16, 6, 1)
#define   SET16avPll_status_SPEED_CNT(r16,v)               _BFSET_(r16, 6, 1,v)

#define   GET32avPll_status_SPEED_RD(r32)                  _BFGET_(r32,26,23)
#define   SET32avPll_status_SPEED_RD(r32,v)                _BFSET_(r32,26,23,v)
#define   GET16avPll_status_SPEED_RD(r16)                  _BFGET_(r16,10, 7)
#define   SET16avPll_status_SPEED_RD(r16,v)                _BFSET_(r16,10, 7,v)

#define     w32avPll_status                                {\
            UNSG32 ustatus_PLL_LOCK                            :  1;\
            UNSG32 ustatus_RESERVE_PLL_OUT                     :  6;\
            UNSG32 ustatus_FBDIV_RD                            :  9;\
            UNSG32 ustatus_PLL_CAL_DONE                        :  1;\
            UNSG32 ustatus_SPEED_CNT                           :  6;\
            UNSG32 ustatus_SPEED_RD                            :  4;\
            UNSG32 RSVDxA0_b27                                 :  5;\
          }
		union {
			UNSG32 u32avPll_status;
			struct w32avPll_status;
		};
#define   GET32avPll_status_SLLP_DAC_RD(r32)               _BFGET_(r32, 6, 0)
#define   SET32avPll_status_SLLP_DAC_RD(r32,v)             _BFSET_(r32, 6, 0,v)
#define   GET16avPll_status_SLLP_DAC_RD(r16)               _BFGET_(r16, 6, 0)
#define   SET16avPll_status_SLLP_DAC_RD(r16,v)             _BFSET_(r16, 6, 0,v)

#define     w32avPll_status1                               {\
            UNSG32 ustatus_SLLP_DAC_RD                         :  7;\
            UNSG32 RSVDxA4_b7                                  : 25;\
          }
		union {
			UNSG32 u32avPll_status1;
			struct w32avPll_status1;
		};
		///////////////////////////////////////////////////////////
	} SIE_avPll;

	typedef union T32avPll_ctrlPLL {
		UNSG32 u32;
		struct w32avPll_ctrlPLL;
	} T32avPll_ctrlPLL;
	typedef union T32avPll_ctrlPLL1 {
		UNSG32 u32;
		struct w32avPll_ctrlPLL1;
	} T32avPll_ctrlPLL1;
	typedef union T32avPll_ctrlCAL {
		UNSG32 u32;
		struct w32avPll_ctrlCAL;
	} T32avPll_ctrlCAL;
	typedef union T32avPll_ctrlCAL1 {
		UNSG32 u32;
		struct w32avPll_ctrlCAL1;
	} T32avPll_ctrlCAL1;
	typedef union T32avPll_ctrlSlowLoop {
		UNSG32 u32;
		struct w32avPll_ctrlSlowLoop;
	} T32avPll_ctrlSlowLoop;
	typedef union T32avPll_ctrlINTP {
		UNSG32 u32;
		struct w32avPll_ctrlINTP;
	} T32avPll_ctrlINTP;
	typedef union T32avPll_ctrlC8AddOn {
		UNSG32 u32;
		struct w32avPll_ctrlC8AddOn;
	} T32avPll_ctrlC8AddOn;
	typedef union T32avPll_ctrlTest {
		UNSG32 u32;
		struct w32avPll_ctrlTest;
	} T32avPll_ctrlTest;
	typedef union T32avPll_status {
		UNSG32 u32;
		struct w32avPll_status;
	} T32avPll_status;
	typedef union T32avPll_status1 {
		UNSG32 u32;
		struct w32avPll_status1;
	} T32avPll_status1;
	///////////////////////////////////////////////////////////

	typedef union TavPll_ctrlPLL {
		UNSG32 u32[2];
		struct {
			struct w32avPll_ctrlPLL;
			struct w32avPll_ctrlPLL1;
		};
	} TavPll_ctrlPLL;
	typedef union TavPll_ctrlCAL {
		UNSG32 u32[2];
		struct {
			struct w32avPll_ctrlCAL;
			struct w32avPll_ctrlCAL1;
		};
	} TavPll_ctrlCAL;
	typedef union TavPll_ctrlSlowLoop {
		UNSG32 u32[1];
		struct {
			struct w32avPll_ctrlSlowLoop;
		};
	} TavPll_ctrlSlowLoop;
	typedef union TavPll_ctrlINTP {
		UNSG32 u32[1];
		struct {
			struct w32avPll_ctrlINTP;
		};
	} TavPll_ctrlINTP;
	typedef union TavPll_ctrlC8AddOn {
		UNSG32 u32[1];
		struct {
			struct w32avPll_ctrlC8AddOn;
		};
	} TavPll_ctrlC8AddOn;
	typedef union TavPll_ctrlTest {
		UNSG32 u32[1];
		struct {
			struct w32avPll_ctrlTest;
		};
	} TavPll_ctrlTest;
	typedef union TavPll_status {
		UNSG32 u32[2];
		struct {
			struct w32avPll_status;
			struct w32avPll_status1;
		};
	} TavPll_status;

	///////////////////////////////////////////////////////////
	SIGN32 avPll_drvrd(SIE_avPll * p, UNSG32 base, SIGN32 mem, SIGN32 tst);
	SIGN32 avPll_drvwr(SIE_avPll * p, UNSG32 base, SIGN32 mem, SIGN32 tst,
			   UNSG32 * pcmd);
	void avPll_reset(SIE_avPll * p);
	SIGN32 avPll_cmp(SIE_avPll * p, SIE_avPll * pie, char *pfx, void *hLOG,
			 SIGN32 mem, SIGN32 tst);
#define avPll_check(p,pie,pfx,hLOG) avPll_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define avPll_print(p,    pfx,hLOG) avPll_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: avPll
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE DAC_ctrl                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl0                (P)
///               %unsigned 8  gain_c                    0xB2
///                                    ###
///                                    * Gain value.
///                                    ###
///               %unsigned 1  pu_c                      0x0
///                                    ###
///                                    * powers up VDAC
///                                    ###
///               %unsigned 1  rst_ovl_c                 0x0
///                                    ###
///                                    * Resets overvoltage flags
///                                    ###
///               %unsigned 2  cal_c                     0x0
///               %unsigned 1  cal_en_c                  0x0
///               %unsigned 1  cal_spare_c               0x0
///               %unsigned 1  calmode_c                 0x0
///               %unsigned 1  en_cable_detect_c         0x0
///               %unsigned 1  en_fullscale_cal_c        0x0
///               %unsigned 1  en_open_detect_c          0x0
///               %unsigned 8  le_x_c                    0x0
///               %%        6          # Stuffing bits...
///     # 0x00004 ctrl01
///               %unsigned 8  le_y_c                    0x0
///               %unsigned 6  off_c                     0x20
///               %unsigned 1  pu_refgen                 0x0
///                                    ###
///                                    * power up signal of reference generator
///                                    ###
///               %unsigned 9  tst                       0x0
///                                    ###
///                                    * 8 bit digital control for test purposes
///                                    ###
///               %unsigned 4  vbg_val                   0x0
///                                    ###
///                                    * 4 bit digital control for trimming bandgap voltage
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00008 ctrl1                (P)
///               %unsigned 32 Reserved                  0x0
///                                    ###
///                                    * Reserved for future use
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      86b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DAC_ctrl
#define h_DAC_ctrl (){}

#define     RA_DAC_ctrl_ctrl0                              0x0000

#define     BA_DAC_ctrl_ctrl0_gain_c                       0x0000
#define     B16DAC_ctrl_ctrl0_gain_c                       0x0000
#define   LSb32DAC_ctrl_ctrl0_gain_c                          0
#define   LSb16DAC_ctrl_ctrl0_gain_c                          0
#define       bDAC_ctrl_ctrl0_gain_c                       8
#define   MSK32DAC_ctrl_ctrl0_gain_c                          0x000000FF

#define     BA_DAC_ctrl_ctrl0_pu_c                         0x0001
#define     B16DAC_ctrl_ctrl0_pu_c                         0x0000
#define   LSb32DAC_ctrl_ctrl0_pu_c                            8
#define   LSb16DAC_ctrl_ctrl0_pu_c                            8
#define       bDAC_ctrl_ctrl0_pu_c                         1
#define   MSK32DAC_ctrl_ctrl0_pu_c                            0x00000100

#define     BA_DAC_ctrl_ctrl0_rst_ovl_c                    0x0001
#define     B16DAC_ctrl_ctrl0_rst_ovl_c                    0x0000
#define   LSb32DAC_ctrl_ctrl0_rst_ovl_c                       9
#define   LSb16DAC_ctrl_ctrl0_rst_ovl_c                       9
#define       bDAC_ctrl_ctrl0_rst_ovl_c                    1
#define   MSK32DAC_ctrl_ctrl0_rst_ovl_c                       0x00000200

#define     BA_DAC_ctrl_ctrl0_cal_c                        0x0001
#define     B16DAC_ctrl_ctrl0_cal_c                        0x0000
#define   LSb32DAC_ctrl_ctrl0_cal_c                           10
#define   LSb16DAC_ctrl_ctrl0_cal_c                           10
#define       bDAC_ctrl_ctrl0_cal_c                        2
#define   MSK32DAC_ctrl_ctrl0_cal_c                           0x00000C00

#define     BA_DAC_ctrl_ctrl0_cal_en_c                     0x0001
#define     B16DAC_ctrl_ctrl0_cal_en_c                     0x0000
#define   LSb32DAC_ctrl_ctrl0_cal_en_c                        12
#define   LSb16DAC_ctrl_ctrl0_cal_en_c                        12
#define       bDAC_ctrl_ctrl0_cal_en_c                     1
#define   MSK32DAC_ctrl_ctrl0_cal_en_c                        0x00001000

#define     BA_DAC_ctrl_ctrl0_cal_spare_c                  0x0001
#define     B16DAC_ctrl_ctrl0_cal_spare_c                  0x0000
#define   LSb32DAC_ctrl_ctrl0_cal_spare_c                     13
#define   LSb16DAC_ctrl_ctrl0_cal_spare_c                     13
#define       bDAC_ctrl_ctrl0_cal_spare_c                  1
#define   MSK32DAC_ctrl_ctrl0_cal_spare_c                     0x00002000

#define     BA_DAC_ctrl_ctrl0_calmode_c                    0x0001
#define     B16DAC_ctrl_ctrl0_calmode_c                    0x0000
#define   LSb32DAC_ctrl_ctrl0_calmode_c                       14
#define   LSb16DAC_ctrl_ctrl0_calmode_c                       14
#define       bDAC_ctrl_ctrl0_calmode_c                    1
#define   MSK32DAC_ctrl_ctrl0_calmode_c                       0x00004000

#define     BA_DAC_ctrl_ctrl0_en_cable_detect_c            0x0001
#define     B16DAC_ctrl_ctrl0_en_cable_detect_c            0x0000
#define   LSb32DAC_ctrl_ctrl0_en_cable_detect_c               15
#define   LSb16DAC_ctrl_ctrl0_en_cable_detect_c               15
#define       bDAC_ctrl_ctrl0_en_cable_detect_c            1
#define   MSK32DAC_ctrl_ctrl0_en_cable_detect_c               0x00008000

#define     BA_DAC_ctrl_ctrl0_en_fullscale_cal_c           0x0002
#define     B16DAC_ctrl_ctrl0_en_fullscale_cal_c           0x0002
#define   LSb32DAC_ctrl_ctrl0_en_fullscale_cal_c              16
#define   LSb16DAC_ctrl_ctrl0_en_fullscale_cal_c              0
#define       bDAC_ctrl_ctrl0_en_fullscale_cal_c           1
#define   MSK32DAC_ctrl_ctrl0_en_fullscale_cal_c              0x00010000

#define     BA_DAC_ctrl_ctrl0_en_open_detect_c             0x0002
#define     B16DAC_ctrl_ctrl0_en_open_detect_c             0x0002
#define   LSb32DAC_ctrl_ctrl0_en_open_detect_c                17
#define   LSb16DAC_ctrl_ctrl0_en_open_detect_c                1
#define       bDAC_ctrl_ctrl0_en_open_detect_c             1
#define   MSK32DAC_ctrl_ctrl0_en_open_detect_c                0x00020000

#define     BA_DAC_ctrl_ctrl0_le_x_c                       0x0002
#define     B16DAC_ctrl_ctrl0_le_x_c                       0x0002
#define   LSb32DAC_ctrl_ctrl0_le_x_c                          18
#define   LSb16DAC_ctrl_ctrl0_le_x_c                          2
#define       bDAC_ctrl_ctrl0_le_x_c                       8
#define   MSK32DAC_ctrl_ctrl0_le_x_c                          0x03FC0000

#define     RA_DAC_ctrl_ctrl01                             0x0004

#define     BA_DAC_ctrl_ctrl0_le_y_c                       0x0004
#define     B16DAC_ctrl_ctrl0_le_y_c                       0x0004
#define   LSb32DAC_ctrl_ctrl0_le_y_c                          0
#define   LSb16DAC_ctrl_ctrl0_le_y_c                          0
#define       bDAC_ctrl_ctrl0_le_y_c                       8
#define   MSK32DAC_ctrl_ctrl0_le_y_c                          0x000000FF

#define     BA_DAC_ctrl_ctrl0_off_c                        0x0005
#define     B16DAC_ctrl_ctrl0_off_c                        0x0004
#define   LSb32DAC_ctrl_ctrl0_off_c                           8
#define   LSb16DAC_ctrl_ctrl0_off_c                           8
#define       bDAC_ctrl_ctrl0_off_c                        6
#define   MSK32DAC_ctrl_ctrl0_off_c                           0x00003F00

#define     BA_DAC_ctrl_ctrl0_pu_refgen                    0x0005
#define     B16DAC_ctrl_ctrl0_pu_refgen                    0x0004
#define   LSb32DAC_ctrl_ctrl0_pu_refgen                       14
#define   LSb16DAC_ctrl_ctrl0_pu_refgen                       14
#define       bDAC_ctrl_ctrl0_pu_refgen                    1
#define   MSK32DAC_ctrl_ctrl0_pu_refgen                       0x00004000

#define     BA_DAC_ctrl_ctrl0_tst                          0x0005
#define     B16DAC_ctrl_ctrl0_tst                          0x0004
#define   LSb32DAC_ctrl_ctrl0_tst                             15
#define   LSb16DAC_ctrl_ctrl0_tst                             15
#define       bDAC_ctrl_ctrl0_tst                          9
#define   MSK32DAC_ctrl_ctrl0_tst                             0x00FF8000

#define     BA_DAC_ctrl_ctrl0_vbg_val                      0x0007
#define     B16DAC_ctrl_ctrl0_vbg_val                      0x0006
#define   LSb32DAC_ctrl_ctrl0_vbg_val                         24
#define   LSb16DAC_ctrl_ctrl0_vbg_val                         8
#define       bDAC_ctrl_ctrl0_vbg_val                      4
#define   MSK32DAC_ctrl_ctrl0_vbg_val                         0x0F000000
	///////////////////////////////////////////////////////////
#define     RA_DAC_ctrl_ctrl1                              0x0008

#define     BA_DAC_ctrl_ctrl1_Reserved                     0x0008
#define     B16DAC_ctrl_ctrl1_Reserved                     0x0008
#define   LSb32DAC_ctrl_ctrl1_Reserved                        0
#define   LSb16DAC_ctrl_ctrl1_Reserved                        0
#define       bDAC_ctrl_ctrl1_Reserved                     32
#define   MSK32DAC_ctrl_ctrl1_Reserved                        0xFFFFFFFF
	///////////////////////////////////////////////////////////

	typedef struct SIE_DAC_ctrl {
		///////////////////////////////////////////////////////////
#define   GET32DAC_ctrl_ctrl0_gain_c(r32)                  _BFGET_(r32, 7, 0)
#define   SET32DAC_ctrl_ctrl0_gain_c(r32,v)                _BFSET_(r32, 7, 0,v)
#define   GET16DAC_ctrl_ctrl0_gain_c(r16)                  _BFGET_(r16, 7, 0)
#define   SET16DAC_ctrl_ctrl0_gain_c(r16,v)                _BFSET_(r16, 7, 0,v)

#define   GET32DAC_ctrl_ctrl0_pu_c(r32)                    _BFGET_(r32, 8, 8)
#define   SET32DAC_ctrl_ctrl0_pu_c(r32,v)                  _BFSET_(r32, 8, 8,v)
#define   GET16DAC_ctrl_ctrl0_pu_c(r16)                    _BFGET_(r16, 8, 8)
#define   SET16DAC_ctrl_ctrl0_pu_c(r16,v)                  _BFSET_(r16, 8, 8,v)

#define   GET32DAC_ctrl_ctrl0_rst_ovl_c(r32)               _BFGET_(r32, 9, 9)
#define   SET32DAC_ctrl_ctrl0_rst_ovl_c(r32,v)             _BFSET_(r32, 9, 9,v)
#define   GET16DAC_ctrl_ctrl0_rst_ovl_c(r16)               _BFGET_(r16, 9, 9)
#define   SET16DAC_ctrl_ctrl0_rst_ovl_c(r16,v)             _BFSET_(r16, 9, 9,v)

#define   GET32DAC_ctrl_ctrl0_cal_c(r32)                   _BFGET_(r32,11,10)
#define   SET32DAC_ctrl_ctrl0_cal_c(r32,v)                 _BFSET_(r32,11,10,v)
#define   GET16DAC_ctrl_ctrl0_cal_c(r16)                   _BFGET_(r16,11,10)
#define   SET16DAC_ctrl_ctrl0_cal_c(r16,v)                 _BFSET_(r16,11,10,v)

#define   GET32DAC_ctrl_ctrl0_cal_en_c(r32)                _BFGET_(r32,12,12)
#define   SET32DAC_ctrl_ctrl0_cal_en_c(r32,v)              _BFSET_(r32,12,12,v)
#define   GET16DAC_ctrl_ctrl0_cal_en_c(r16)                _BFGET_(r16,12,12)
#define   SET16DAC_ctrl_ctrl0_cal_en_c(r16,v)              _BFSET_(r16,12,12,v)

#define   GET32DAC_ctrl_ctrl0_cal_spare_c(r32)             _BFGET_(r32,13,13)
#define   SET32DAC_ctrl_ctrl0_cal_spare_c(r32,v)           _BFSET_(r32,13,13,v)
#define   GET16DAC_ctrl_ctrl0_cal_spare_c(r16)             _BFGET_(r16,13,13)
#define   SET16DAC_ctrl_ctrl0_cal_spare_c(r16,v)           _BFSET_(r16,13,13,v)

#define   GET32DAC_ctrl_ctrl0_calmode_c(r32)               _BFGET_(r32,14,14)
#define   SET32DAC_ctrl_ctrl0_calmode_c(r32,v)             _BFSET_(r32,14,14,v)
#define   GET16DAC_ctrl_ctrl0_calmode_c(r16)               _BFGET_(r16,14,14)
#define   SET16DAC_ctrl_ctrl0_calmode_c(r16,v)             _BFSET_(r16,14,14,v)

#define   GET32DAC_ctrl_ctrl0_en_cable_detect_c(r32)       _BFGET_(r32,15,15)
#define   SET32DAC_ctrl_ctrl0_en_cable_detect_c(r32,v)     _BFSET_(r32,15,15,v)
#define   GET16DAC_ctrl_ctrl0_en_cable_detect_c(r16)       _BFGET_(r16,15,15)
#define   SET16DAC_ctrl_ctrl0_en_cable_detect_c(r16,v)     _BFSET_(r16,15,15,v)

#define   GET32DAC_ctrl_ctrl0_en_fullscale_cal_c(r32)      _BFGET_(r32,16,16)
#define   SET32DAC_ctrl_ctrl0_en_fullscale_cal_c(r32,v)    _BFSET_(r32,16,16,v)
#define   GET16DAC_ctrl_ctrl0_en_fullscale_cal_c(r16)      _BFGET_(r16, 0, 0)
#define   SET16DAC_ctrl_ctrl0_en_fullscale_cal_c(r16,v)    _BFSET_(r16, 0, 0,v)

#define   GET32DAC_ctrl_ctrl0_en_open_detect_c(r32)        _BFGET_(r32,17,17)
#define   SET32DAC_ctrl_ctrl0_en_open_detect_c(r32,v)      _BFSET_(r32,17,17,v)
#define   GET16DAC_ctrl_ctrl0_en_open_detect_c(r16)        _BFGET_(r16, 1, 1)
#define   SET16DAC_ctrl_ctrl0_en_open_detect_c(r16,v)      _BFSET_(r16, 1, 1,v)

#define   GET32DAC_ctrl_ctrl0_le_x_c(r32)                  _BFGET_(r32,25,18)
#define   SET32DAC_ctrl_ctrl0_le_x_c(r32,v)                _BFSET_(r32,25,18,v)
#define   GET16DAC_ctrl_ctrl0_le_x_c(r16)                  _BFGET_(r16, 9, 2)
#define   SET16DAC_ctrl_ctrl0_le_x_c(r16,v)                _BFSET_(r16, 9, 2,v)

#define     w32DAC_ctrl_ctrl0                              {\
            UNSG32 uctrl0_gain_c                               :  8;\
            UNSG32 uctrl0_pu_c                                 :  1;\
            UNSG32 uctrl0_rst_ovl_c                            :  1;\
            UNSG32 uctrl0_cal_c                                :  2;\
            UNSG32 uctrl0_cal_en_c                             :  1;\
            UNSG32 uctrl0_cal_spare_c                          :  1;\
            UNSG32 uctrl0_calmode_c                            :  1;\
            UNSG32 uctrl0_en_cable_detect_c                    :  1;\
            UNSG32 uctrl0_en_fullscale_cal_c                   :  1;\
            UNSG32 uctrl0_en_open_detect_c                     :  1;\
            UNSG32 uctrl0_le_x_c                               :  8;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
		union {
			UNSG32 u32DAC_ctrl_ctrl0;
			struct w32DAC_ctrl_ctrl0;
		};
#define   GET32DAC_ctrl_ctrl0_le_y_c(r32)                  _BFGET_(r32, 7, 0)
#define   SET32DAC_ctrl_ctrl0_le_y_c(r32,v)                _BFSET_(r32, 7, 0,v)
#define   GET16DAC_ctrl_ctrl0_le_y_c(r16)                  _BFGET_(r16, 7, 0)
#define   SET16DAC_ctrl_ctrl0_le_y_c(r16,v)                _BFSET_(r16, 7, 0,v)

#define   GET32DAC_ctrl_ctrl0_off_c(r32)                   _BFGET_(r32,13, 8)
#define   SET32DAC_ctrl_ctrl0_off_c(r32,v)                 _BFSET_(r32,13, 8,v)
#define   GET16DAC_ctrl_ctrl0_off_c(r16)                   _BFGET_(r16,13, 8)
#define   SET16DAC_ctrl_ctrl0_off_c(r16,v)                 _BFSET_(r16,13, 8,v)

#define   GET32DAC_ctrl_ctrl0_pu_refgen(r32)               _BFGET_(r32,14,14)
#define   SET32DAC_ctrl_ctrl0_pu_refgen(r32,v)             _BFSET_(r32,14,14,v)
#define   GET16DAC_ctrl_ctrl0_pu_refgen(r16)               _BFGET_(r16,14,14)
#define   SET16DAC_ctrl_ctrl0_pu_refgen(r16,v)             _BFSET_(r16,14,14,v)

#define   GET32DAC_ctrl_ctrl0_tst(r32)                     _BFGET_(r32,23,15)
#define   SET32DAC_ctrl_ctrl0_tst(r32,v)                   _BFSET_(r32,23,15,v)

#define   GET32DAC_ctrl_ctrl0_vbg_val(r32)                 _BFGET_(r32,27,24)
#define   SET32DAC_ctrl_ctrl0_vbg_val(r32,v)               _BFSET_(r32,27,24,v)
#define   GET16DAC_ctrl_ctrl0_vbg_val(r16)                 _BFGET_(r16,11, 8)
#define   SET16DAC_ctrl_ctrl0_vbg_val(r16,v)               _BFSET_(r16,11, 8,v)

#define     w32DAC_ctrl_ctrl01                             {\
            UNSG32 uctrl0_le_y_c                               :  8;\
            UNSG32 uctrl0_off_c                                :  6;\
            UNSG32 uctrl0_pu_refgen                            :  1;\
            UNSG32 uctrl0_tst                                  :  9;\
            UNSG32 uctrl0_vbg_val                              :  4;\
            UNSG32 RSVDx4_b28                                  :  4;\
          }
		union {
			UNSG32 u32DAC_ctrl_ctrl01;
			struct w32DAC_ctrl_ctrl01;
		};
		///////////////////////////////////////////////////////////
#define   GET32DAC_ctrl_ctrl1_Reserved(r32)                _BFGET_(r32,31, 0)
#define   SET32DAC_ctrl_ctrl1_Reserved(r32,v)              _BFSET_(r32,31, 0,v)

#define     w32DAC_ctrl_ctrl1                              {\
            UNSG32 uctrl1_Reserved                             : 32;\
          }
		union {
			UNSG32 u32DAC_ctrl_ctrl1;
			struct w32DAC_ctrl_ctrl1;
		};
		///////////////////////////////////////////////////////////
	} SIE_DAC_ctrl;

	typedef union T32DAC_ctrl_ctrl0 {
		UNSG32 u32;
		struct w32DAC_ctrl_ctrl0;
	} T32DAC_ctrl_ctrl0;
	typedef union T32DAC_ctrl_ctrl01 {
		UNSG32 u32;
		struct w32DAC_ctrl_ctrl01;
	} T32DAC_ctrl_ctrl01;
	typedef union T32DAC_ctrl_ctrl1 {
		UNSG32 u32;
		struct w32DAC_ctrl_ctrl1;
	} T32DAC_ctrl_ctrl1;
	///////////////////////////////////////////////////////////

	typedef union TDAC_ctrl_ctrl0 {
		UNSG32 u32[2];
		struct {
			struct w32DAC_ctrl_ctrl0;
			struct w32DAC_ctrl_ctrl01;
		};
	} TDAC_ctrl_ctrl0;
	typedef union TDAC_ctrl_ctrl1 {
		UNSG32 u32[1];
		struct {
			struct w32DAC_ctrl_ctrl1;
		};
	} TDAC_ctrl_ctrl1;

	///////////////////////////////////////////////////////////
	SIGN32 DAC_ctrl_drvrd(SIE_DAC_ctrl * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst);
	SIGN32 DAC_ctrl_drvwr(SIE_DAC_ctrl * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst, UNSG32 * pcmd);
	void DAC_ctrl_reset(SIE_DAC_ctrl * p);
	SIGN32 DAC_ctrl_cmp(SIE_DAC_ctrl * p, SIE_DAC_ctrl * pie, char *pfx,
			    void *hLOG, SIGN32 mem, SIGN32 tst);
#define DAC_ctrl_check(p,pie,pfx,hLOG) DAC_ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define DAC_ctrl_print(p,    pfx,hLOG) DAC_ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DAC_ctrl
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE DAC_sts                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (R-)
///               %unsigned 1  cable_cmp_out_c
///               %unsigned 1  ovl_flag_c
///               %unsigned 1  open_c
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       3b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DAC_sts
#define h_DAC_sts (){}

#define     BA_DAC_sts_cable_cmp_out_c                     0x0000
#define     B16DAC_sts_cable_cmp_out_c                     0x0000
#define   LSb32DAC_sts_cable_cmp_out_c                        0
#define   LSb16DAC_sts_cable_cmp_out_c                        0
#define       bDAC_sts_cable_cmp_out_c                     1
#define   MSK32DAC_sts_cable_cmp_out_c                        0x00000001

#define     BA_DAC_sts_ovl_flag_c                          0x0000
#define     B16DAC_sts_ovl_flag_c                          0x0000
#define   LSb32DAC_sts_ovl_flag_c                             1
#define   LSb16DAC_sts_ovl_flag_c                             1
#define       bDAC_sts_ovl_flag_c                          1
#define   MSK32DAC_sts_ovl_flag_c                             0x00000002

#define     BA_DAC_sts_open_c                              0x0000
#define     B16DAC_sts_open_c                              0x0000
#define   LSb32DAC_sts_open_c                                 2
#define   LSb16DAC_sts_open_c                                 2
#define       bDAC_sts_open_c                              1
#define   MSK32DAC_sts_open_c                                 0x00000004
	///////////////////////////////////////////////////////////

	typedef struct SIE_DAC_sts {
		///////////////////////////////////////////////////////////
#define   GET32DAC_sts_cable_cmp_out_c(r32)                _BFGET_(r32, 0, 0)
#define   SET32DAC_sts_cable_cmp_out_c(r32,v)              _BFSET_(r32, 0, 0,v)
#define   GET16DAC_sts_cable_cmp_out_c(r16)                _BFGET_(r16, 0, 0)
#define   SET16DAC_sts_cable_cmp_out_c(r16,v)              _BFSET_(r16, 0, 0,v)

#define   GET32DAC_sts_ovl_flag_c(r32)                     _BFGET_(r32, 1, 1)
#define   SET32DAC_sts_ovl_flag_c(r32,v)                   _BFSET_(r32, 1, 1,v)
#define   GET16DAC_sts_ovl_flag_c(r16)                     _BFGET_(r16, 1, 1)
#define   SET16DAC_sts_ovl_flag_c(r16,v)                   _BFSET_(r16, 1, 1,v)

#define   GET32DAC_sts_open_c(r32)                         _BFGET_(r32, 2, 2)
#define   SET32DAC_sts_open_c(r32,v)                       _BFSET_(r32, 2, 2,v)
#define   GET16DAC_sts_open_c(r16)                         _BFGET_(r16, 2, 2)
#define   SET16DAC_sts_open_c(r16,v)                       _BFSET_(r16, 2, 2,v)

		UNSG32 u_cable_cmp_out_c:1;
		UNSG32 u_ovl_flag_c:1;
		UNSG32 u_open_c:1;
		UNSG32 RSVDx0_b3:29;
		///////////////////////////////////////////////////////////
	} SIE_DAC_sts;

	///////////////////////////////////////////////////////////
	SIGN32 DAC_sts_drvrd(SIE_DAC_sts * p, UNSG32 base, SIGN32 mem,
			     SIGN32 tst);
	SIGN32 DAC_sts_drvwr(SIE_DAC_sts * p, UNSG32 base, SIGN32 mem,
			     SIGN32 tst, UNSG32 * pcmd);
	void DAC_sts_reset(SIE_DAC_sts * p);
	SIGN32 DAC_sts_cmp(SIE_DAC_sts * p, SIE_DAC_sts * pie, char *pfx,
			   void *hLOG, SIGN32 mem, SIGN32 tst);
#define DAC_sts_check(p,pie,pfx,hLOG) DAC_sts_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define DAC_sts_print(p,    pfx,hLOG) DAC_sts_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DAC_sts
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE VDAC_ctrl               biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 a
///               $DAC_ctrl            a                 REG
///     @ 0x0000C clk                  (P)
///               %unsigned 3  N                         0x0
///                                    ###
///                                    * N to select gdac_ck/2^N clock
///                                    ###
///               %unsigned 1  En                        0x1
///                                    ###
///                                    * Enables clock
///                                    ###
///               %unsigned 1  Switch                    0x0
///                                    ###
///                                    * Enables clock switching
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      91b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VDAC_ctrl
#define h_VDAC_ctrl (){}

#define     RA_VDAC_ctrl_a                                 0x0000
	///////////////////////////////////////////////////////////
#define     RA_VDAC_ctrl_clk                               0x000C

#define     BA_VDAC_ctrl_clk_N                             0x000C
#define     B16VDAC_ctrl_clk_N                             0x000C
#define   LSb32VDAC_ctrl_clk_N                                0
#define   LSb16VDAC_ctrl_clk_N                                0
#define       bVDAC_ctrl_clk_N                             3
#define   MSK32VDAC_ctrl_clk_N                                0x00000007

#define     BA_VDAC_ctrl_clk_En                            0x000C
#define     B16VDAC_ctrl_clk_En                            0x000C
#define   LSb32VDAC_ctrl_clk_En                               3
#define   LSb16VDAC_ctrl_clk_En                               3
#define       bVDAC_ctrl_clk_En                            1
#define   MSK32VDAC_ctrl_clk_En                               0x00000008

#define     BA_VDAC_ctrl_clk_Switch                        0x000C
#define     B16VDAC_ctrl_clk_Switch                        0x000C
#define   LSb32VDAC_ctrl_clk_Switch                           4
#define   LSb16VDAC_ctrl_clk_Switch                           4
#define       bVDAC_ctrl_clk_Switch                        1
#define   MSK32VDAC_ctrl_clk_Switch                           0x00000010
	///////////////////////////////////////////////////////////

	typedef struct SIE_VDAC_ctrl {
		///////////////////////////////////////////////////////////
		SIE_DAC_ctrl ie_a;
		///////////////////////////////////////////////////////////
#define   GET32VDAC_ctrl_clk_N(r32)                        _BFGET_(r32, 2, 0)
#define   SET32VDAC_ctrl_clk_N(r32,v)                      _BFSET_(r32, 2, 0,v)
#define   GET16VDAC_ctrl_clk_N(r16)                        _BFGET_(r16, 2, 0)
#define   SET16VDAC_ctrl_clk_N(r16,v)                      _BFSET_(r16, 2, 0,v)

#define   GET32VDAC_ctrl_clk_En(r32)                       _BFGET_(r32, 3, 3)
#define   SET32VDAC_ctrl_clk_En(r32,v)                     _BFSET_(r32, 3, 3,v)
#define   GET16VDAC_ctrl_clk_En(r16)                       _BFGET_(r16, 3, 3)
#define   SET16VDAC_ctrl_clk_En(r16,v)                     _BFSET_(r16, 3, 3,v)

#define   GET32VDAC_ctrl_clk_Switch(r32)                   _BFGET_(r32, 4, 4)
#define   SET32VDAC_ctrl_clk_Switch(r32,v)                 _BFSET_(r32, 4, 4,v)
#define   GET16VDAC_ctrl_clk_Switch(r16)                   _BFGET_(r16, 4, 4)
#define   SET16VDAC_ctrl_clk_Switch(r16,v)                 _BFSET_(r16, 4, 4,v)

#define     w32VDAC_ctrl_clk                               {\
            UNSG32 uclk_N                                      :  3;\
            UNSG32 uclk_En                                     :  1;\
            UNSG32 uclk_Switch                                 :  1;\
            UNSG32 RSVDxC_b5                                   : 27;\
          }
		union {
			UNSG32 u32VDAC_ctrl_clk;
			struct w32VDAC_ctrl_clk;
		};
		///////////////////////////////////////////////////////////
	} SIE_VDAC_ctrl;

	typedef union T32VDAC_ctrl_clk {
		UNSG32 u32;
		struct w32VDAC_ctrl_clk;
	} T32VDAC_ctrl_clk;
	///////////////////////////////////////////////////////////

	typedef union TVDAC_ctrl_clk {
		UNSG32 u32[1];
		struct {
			struct w32VDAC_ctrl_clk;
		};
	} TVDAC_ctrl_clk;

	///////////////////////////////////////////////////////////
	SIGN32 VDAC_ctrl_drvrd(SIE_VDAC_ctrl * p, UNSG32 base, SIGN32 mem,
			       SIGN32 tst);
	SIGN32 VDAC_ctrl_drvwr(SIE_VDAC_ctrl * p, UNSG32 base, SIGN32 mem,
			       SIGN32 tst, UNSG32 * pcmd);
	void VDAC_ctrl_reset(SIE_VDAC_ctrl * p);
	SIGN32 VDAC_ctrl_cmp(SIE_VDAC_ctrl * p, SIE_VDAC_ctrl * pie, char *pfx,
			     void *hLOG, SIGN32 mem, SIGN32 tst);
#define VDAC_ctrl_check(p,pie,pfx,hLOG) VDAC_ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define VDAC_ctrl_print(p,    pfx,hLOG) VDAC_ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VDAC_ctrl
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE VDAC_sts                biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 rd
///               $DAC_sts             rd                REG
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       3b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VDAC_sts
#define h_VDAC_sts (){}

#define     RA_VDAC_sts_rd                                 0x0000
	///////////////////////////////////////////////////////////

	typedef struct SIE_VDAC_sts {
		///////////////////////////////////////////////////////////
		SIE_DAC_sts ie_rd;
		///////////////////////////////////////////////////////////
	} SIE_VDAC_sts;

	///////////////////////////////////////////////////////////
	SIGN32 VDAC_sts_drvrd(SIE_VDAC_sts * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst);
	SIGN32 VDAC_sts_drvwr(SIE_VDAC_sts * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst, UNSG32 * pcmd);
	void VDAC_sts_reset(SIE_VDAC_sts * p);
	SIGN32 VDAC_sts_cmp(SIE_VDAC_sts * p, SIE_VDAC_sts * pie, char *pfx,
			    void *hLOG, SIGN32 mem, SIGN32 tst);
#define VDAC_sts_check(p,pie,pfx,hLOG) VDAC_sts_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define VDAC_sts_print(p,    pfx,hLOG) VDAC_sts_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VDAC_sts
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE HDMI_ctrl               biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 1  PU_IREF                   0x0
///                                    ###
///                                    * Power down reference current (LS;AH)
///                                    * 0: power down;
///                                    * 1: power up, normal operation
///                                    ###
///               %unsigned 1  RST_TX                    0x0
///                                    ###
///                                    * Serializer Reset TX (LS;AH)
///                                    * 0: no reset; normal operation
///                                    * 1: reset the transmitter.
///                                    ###
///               %unsigned 4  PU_TX                     0x0
///                                    ###
///                                    * One bit per channel, bit0 is for channel0 (LS;AH)
///                                    * 0: power down the transmitter
///                                    * 1: power up, normal operation.
///                                    ###
///               %unsigned 4  POLSWAP_TX                0x0
///                                    ###
///                                    * Swap the Polarity of TXP/TXN (LS;AH)
///                                    * One bit per channel; bit0 is for channel0.
///                                    * 0: data-P is driven on TXP and data-N is driven on TXN
///                                    * 1: data-P is driven on TXN and data-N is driven on TXP.
///                                    ###
///               %unsigned 1  INV_CK10T                 0x0
///                                    ###
///                                    * Invert the Polarity of 10T clock (LS;AH)
///                                    * One bit per channel; bit0 is for channel0.
///                                    * 0: don't invert
///                                    * 1: invert.
///                                    ###
///               %unsigned 12 DAMP                      0x924
///                                    ###
///                                    * Data Amplitude [11:9],[8:6],[5:3],[2:0] -> for channels 3->0
///                                    ###
///               %%        9          # Stuffing bits...
///               %unsigned 12 EAMP                      0x0
///                                    ###
///                                    * PRE-EMPHASIS AMP [11:9],[8:6],[5:3],[2:0] for channel 3->0 (LS;AH)
///                                    ###
///               %unsigned 16 IDRV                      0x6666
///                                    ###
///                                    * 4-bits per channel.
///                                    * 1111 for highest speed
///                                    ###
///               %unsigned 1  TXDRVX2                   0x0
///                                    ###
///                                    * Increase VDD_DRV current driving capacity by 30% (LS;AH)
///                                    ###
///               %unsigned 3  SVTX                      0x4
///                                    ###
///                                    * SER regulated vddl voltage control(LS;AH)
///                                    ###
///               %unsigned 8  CP                        0xFF
///                                    ###
///                                    * Current driver discharging current (LS;AH)
///                                    ###
///               %unsigned 4  AJ_D                      0x0
///                                    ###
///                                    * AC JTAG Data.
///                                    ###
///               %unsigned 4  AJ_EN                     0x0
///                                    ###
///                                    * AC JTAG Enable.
///                                    ###
///               %unsigned 6  TP_EN                     0x0
///                                    ###
///                                    * Test point enable, one for each channel; one hot only. TP_EN[3:0] for CH[3:0]; TP_EN[4] for common block; TP_EN[5] for PLL. (LS;AH)
///                                    ###
///               %unsigned 4  TPC                       0x0
///                                    ###
///                                    * Test point control (LS;AH)
///                                    ###
///               %%        6          # Stuffing bits...
///               %unsigned 8  AUX_CTRL0                 0x11
///                                    ###
///                                    * {nc, nc, TXDRVX4, CPREG_EN, nc, nc, TD1T_EN, RMDJ_EN}
///                                    ###
///               %unsigned 8  AUX_CTRL_1                0x81
///                                    ###
///                                    * Reserved
///                                    ###
///               %unsigned 1  PU_ARC                    0x0
///                                    ###
///                                    * Power up the ARC RX. (LS; AH)
///                                    ###
///               %unsigned 1  ENABLE_ARC                0x0
///                                    ###
///                                    * Enable the ARC RX output. (LS; AH)
///                                    ###
///               %unsigned 1  HYST0_ARC                 0x0
///                                    ###
///                                    * Hysteresis control bit 0. (LS; AH)
///                                    ###
///               %unsigned 1  HYST1_ARC                 0x0
///                                    ###
///                                    * Hysteresis control bit 1. (LS; AH)
///                                    ###
///               %unsigned 1  M_EN_ARC                  0x0
///                                    ###
///                                    * Select HEAC_M as the input port. (LS; AH)
///                                    ###
///               %unsigned 1  P_EN_ARC                  0x1
///                                    ###
///                                    * Select HEAC_P as the input port. (LS; AH)
///                                    ###
///               %unsigned 1  POLSWAP_ARC               0x0
///                                    ###
///                                    * Swap the polarity of the data output(LS;AH)
///                                    ###
///               %unsigned 1  TM_EN_ARC                 0x1
///                                    ###
///                                    * Test mode enable.
///                                    ###
///               %unsigned 3  IPP_CTL                   0x4
///                                    ###
///                                    * IPP current control bits. 
///                                    ###
///               %unsigned 2  SEL_CK2T                  0x2
///                                    ###
///                                    * select for serializer clock.
///                                    * 00- AVPLL+DIV2
///                                    * 01- AVPLL+DCC
///                                    * 10- HTXPLL
///                                    * 11-REFCLK
///                                    ###
///               %%        3          # Stuffing bits...
///               %unsigned 16 RTERM_CTRL                0x0
///                                    ###
///                                    * Termination resistor control bits
///                                    ###
///               %unsigned 1  PU_PLL                    0x0
///                                    ###
///                                    * Power down PLL
///                                    ###
///               %unsigned 4  PLL_LOCK_TH               0x3
///                                    ###
///                                    * PLL lock detector threshold adjust ( PLL_LOCK is asserted after locked state is maintained for Tpfd * 2 ^ PLL_LOCK_TH[3:0]. )
///                                    ###
///               %unsigned 1  RESET_PLL                 0x0
///                                    ###
///                                    * PLL Reset
///                                    ###
///               %unsigned 1  SEL_420                   0x0
///                                    ###
///                                    * 420 mode (currently not being used)
///                                    ###
///               %unsigned 2  SEL_DC                    0x0
///                                    ###
///                                    * Deep color mode , 00/01/10/11 = 8b/10b/12b/invalid
///                                    ###
///               %unsigned 3  SEL_DIVA                  0x1
///                                    ###
///                                    * PFD operating frqeuency divider modulus , 000/001/010/011/100/other = 2/4/8/16/32/invalid
///                                    ###
///               %unsigned 3  SEL_DIVX                  0x2
///                                    ###
///                                    * VCO frequency divider modulus , 000/001/010/011/100/others = 1/2/4/8/16/invalid
///                                    ###
///               %unsigned 1  SEL_HF                    0x0
///                                    ###
///                                    * HF mode (currently not being used)
///                                    ###
///               %unsigned 5  SICP                      0x0
///                                    ###
///                                    * Icp constant portion scaling factor , 00000/.../11111 = 0x/.../31x
///                                    ###
///               %unsigned 5  SIKVCO                    0x1B
///                                    ###
///                                    * Icp freq proportional portion scaling factor , 00000/.../11111 = 0x/.../31x
///                                    ###
///               %unsigned 2  SVPLL                     0x1
///                                    ###
///                                    * Core voltage regulator adjust , 00/01/10/11 = 1.00V/1.07V/1.14V/1.23V
///                                    ###
///               %unsigned 2  SVPLLH                    0x2
///                                    ###
///                                    * VCO regulator adjust , 00/01/10/11 = 1.22V/1.30V/1.39V/1.50V
///                                    ###
///               %unsigned 1  VRHI                      0x0
///                                    ###
///                                    * Reference voltage level boost for core voltage regulators , 0/1 = 886mV/985mV
///                                    ###
///               %unsigned 1  VCOCAL_EN                 0x0
///                                    ###
///                                    * VCO calibration enable
///                                    ###
///               %unsigned 2  V2I_FILT_R_ADJ            0x0
///                                    ###
///                                    * V2I filter MOS resistor bias adjust , 00/../11 = (1/../4)/32*25uA
///                                    ###
///               %unsigned 2  VCOCAL_VCON_ADJ           0x1
///                                    ###
///                                    * VCO calibration offset current adjust , 00/.../11 = min/.../max
///                                    ###
///               %unsigned 2  VCOCAL_DIV_CTRL           0x1
///                                    ###
///                                    * VCO calibration clock divider # bits , 00/.../11 =8/.../14 bits
///                                    ###
///               %unsigned 2  VCOCAL_TIMER_CTRL         0x1
///                                    ###
///                                    * VCO calibration wait timer control , 00/01/10/11 = 10/30/100/300us
///                                    ###
///               %unsigned 1  VCOCAL_OVRWEN             0x0
///                                    ###
///                                    * VCOCAL overwrite enable
///                                    ###
///               %unsigned 4  VCOCAL_OVRW               0xF
///                                    ###
///                                    * VCOCAL overwrite value , 0000/.../1111 = min V2I const term/.../max V2I const term
///                                    ###
///               %unsigned 1  ICP_SCALE_OVRWEN          0x0
///                                    ###
///                                    * Icp scaling (by VCO calibration result) overwrite enable
///                                    ###
///               %unsigned 1  V2I_FILT_BYP_OVRWEN       0x0
///                                    ###
///                                    * V2I filter bypass overwrite enable
///                                    ###
///               %unsigned 1  V2I_FILT_BYP_OVRW         0x0
///                                    ###
///                                    * V2I filter bypass overwrite value , 0/1 = no bypass/bypass
///                                    ###
///               %unsigned 4  ICP_SCALE_OVRW            0x8
///                                    ###
///                                    * Icp scaling (by VCO calibration result) overwrite value , 0000/.../1111 = lowest scaling/.../highest scaling
///                                    ###
///               %unsigned 1  PLL_CP_OPT                0x1
///                                    ###
///                                    * 0 for time sharing CP, 1 for matched layout CP
///                                    ###
///               %unsigned 2  LB_CH                     0x0
///                                    ###
///                                    * Select channel for loopback test
///                                    ###
///               %unsigned 1  LB_EN                     0x0
///                                    ###
///                                    * Enable loopback test
///                                    ###
///               %unsigned 8  LB_CTRL                   0x0
///                                    ###
///                                    * {mode, ovr_wr, sela[2:0], selb[2:0]} }
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     190b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_HDMI_ctrl
#define h_HDMI_ctrl (){}

#define     BA_HDMI_ctrl_PU_IREF                           0x0000
#define     B16HDMI_ctrl_PU_IREF                           0x0000
#define   LSb32HDMI_ctrl_PU_IREF                              0
#define   LSb16HDMI_ctrl_PU_IREF                              0
#define       bHDMI_ctrl_PU_IREF                           1
#define   MSK32HDMI_ctrl_PU_IREF                              0x00000001

#define     BA_HDMI_ctrl_RST_TX                            0x0000
#define     B16HDMI_ctrl_RST_TX                            0x0000
#define   LSb32HDMI_ctrl_RST_TX                               1
#define   LSb16HDMI_ctrl_RST_TX                               1
#define       bHDMI_ctrl_RST_TX                            1
#define   MSK32HDMI_ctrl_RST_TX                               0x00000002

#define     BA_HDMI_ctrl_PU_TX                             0x0000
#define     B16HDMI_ctrl_PU_TX                             0x0000
#define   LSb32HDMI_ctrl_PU_TX                                2
#define   LSb16HDMI_ctrl_PU_TX                                2
#define       bHDMI_ctrl_PU_TX                             4
#define   MSK32HDMI_ctrl_PU_TX                                0x0000003C

#define     BA_HDMI_ctrl_POLSWAP_TX                        0x0000
#define     B16HDMI_ctrl_POLSWAP_TX                        0x0000
#define   LSb32HDMI_ctrl_POLSWAP_TX                           6
#define   LSb16HDMI_ctrl_POLSWAP_TX                           6
#define       bHDMI_ctrl_POLSWAP_TX                        4
#define   MSK32HDMI_ctrl_POLSWAP_TX                           0x000003C0

#define     BA_HDMI_ctrl_INV_CK10T                         0x0001
#define     B16HDMI_ctrl_INV_CK10T                         0x0000
#define   LSb32HDMI_ctrl_INV_CK10T                            10
#define   LSb16HDMI_ctrl_INV_CK10T                            10
#define       bHDMI_ctrl_INV_CK10T                         1
#define   MSK32HDMI_ctrl_INV_CK10T                            0x00000400

#define     BA_HDMI_ctrl_DAMP                              0x0001
#define     B16HDMI_ctrl_DAMP                              0x0000
#define   LSb32HDMI_ctrl_DAMP                                 11
#define   LSb16HDMI_ctrl_DAMP                                 11
#define       bHDMI_ctrl_DAMP                              12
#define   MSK32HDMI_ctrl_DAMP                                 0x007FF800

#define     BA_HDMI_ctrl_EAMP                              0x0004
#define     B16HDMI_ctrl_EAMP                              0x0004
#define   LSb32HDMI_ctrl_EAMP                                 0
#define   LSb16HDMI_ctrl_EAMP                                 0
#define       bHDMI_ctrl_EAMP                              12
#define   MSK32HDMI_ctrl_EAMP                                 0x00000FFF

#define     BA_HDMI_ctrl_IDRV                              0x0005
#define     B16HDMI_ctrl_IDRV                              0x0004
#define   LSb32HDMI_ctrl_IDRV                                 12
#define   LSb16HDMI_ctrl_IDRV                                 12
#define       bHDMI_ctrl_IDRV                              16
#define   MSK32HDMI_ctrl_IDRV                                 0x0FFFF000

#define     BA_HDMI_ctrl_TXDRVX2                           0x0007
#define     B16HDMI_ctrl_TXDRVX2                           0x0006
#define   LSb32HDMI_ctrl_TXDRVX2                              28
#define   LSb16HDMI_ctrl_TXDRVX2                              12
#define       bHDMI_ctrl_TXDRVX2                           1
#define   MSK32HDMI_ctrl_TXDRVX2                              0x10000000

#define     BA_HDMI_ctrl_SVTX                              0x0007
#define     B16HDMI_ctrl_SVTX                              0x0006
#define   LSb32HDMI_ctrl_SVTX                                 29
#define   LSb16HDMI_ctrl_SVTX                                 13
#define       bHDMI_ctrl_SVTX                              3
#define   MSK32HDMI_ctrl_SVTX                                 0xE0000000

#define     BA_HDMI_ctrl_CP                                0x0008
#define     B16HDMI_ctrl_CP                                0x0008
#define   LSb32HDMI_ctrl_CP                                   0
#define   LSb16HDMI_ctrl_CP                                   0
#define       bHDMI_ctrl_CP                                8
#define   MSK32HDMI_ctrl_CP                                   0x000000FF

#define     BA_HDMI_ctrl_AJ_D                              0x0009
#define     B16HDMI_ctrl_AJ_D                              0x0008
#define   LSb32HDMI_ctrl_AJ_D                                 8
#define   LSb16HDMI_ctrl_AJ_D                                 8
#define       bHDMI_ctrl_AJ_D                              4
#define   MSK32HDMI_ctrl_AJ_D                                 0x00000F00

#define     BA_HDMI_ctrl_AJ_EN                             0x0009
#define     B16HDMI_ctrl_AJ_EN                             0x0008
#define   LSb32HDMI_ctrl_AJ_EN                                12
#define   LSb16HDMI_ctrl_AJ_EN                                12
#define       bHDMI_ctrl_AJ_EN                             4
#define   MSK32HDMI_ctrl_AJ_EN                                0x0000F000

#define     BA_HDMI_ctrl_TP_EN                             0x000A
#define     B16HDMI_ctrl_TP_EN                             0x000A
#define   LSb32HDMI_ctrl_TP_EN                                16
#define   LSb16HDMI_ctrl_TP_EN                                0
#define       bHDMI_ctrl_TP_EN                             6
#define   MSK32HDMI_ctrl_TP_EN                                0x003F0000

#define     BA_HDMI_ctrl_TPC                               0x000A
#define     B16HDMI_ctrl_TPC                               0x000A
#define   LSb32HDMI_ctrl_TPC                                  22
#define   LSb16HDMI_ctrl_TPC                                  6
#define       bHDMI_ctrl_TPC                               4
#define   MSK32HDMI_ctrl_TPC                                  0x03C00000

#define     BA_HDMI_ctrl_AUX_CTRL0                         0x000C
#define     B16HDMI_ctrl_AUX_CTRL0                         0x000C
#define   LSb32HDMI_ctrl_AUX_CTRL0                            0
#define   LSb16HDMI_ctrl_AUX_CTRL0                            0
#define       bHDMI_ctrl_AUX_CTRL0                         8
#define   MSK32HDMI_ctrl_AUX_CTRL0                            0x000000FF

#define     BA_HDMI_ctrl_AUX_CTRL_1                        0x000D
#define     B16HDMI_ctrl_AUX_CTRL_1                        0x000C
#define   LSb32HDMI_ctrl_AUX_CTRL_1                           8
#define   LSb16HDMI_ctrl_AUX_CTRL_1                           8
#define       bHDMI_ctrl_AUX_CTRL_1                        8
#define   MSK32HDMI_ctrl_AUX_CTRL_1                           0x0000FF00

#define     BA_HDMI_ctrl_PU_ARC                            0x000E
#define     B16HDMI_ctrl_PU_ARC                            0x000E
#define   LSb32HDMI_ctrl_PU_ARC                               16
#define   LSb16HDMI_ctrl_PU_ARC                               0
#define       bHDMI_ctrl_PU_ARC                            1
#define   MSK32HDMI_ctrl_PU_ARC                               0x00010000

#define     BA_HDMI_ctrl_ENABLE_ARC                        0x000E
#define     B16HDMI_ctrl_ENABLE_ARC                        0x000E
#define   LSb32HDMI_ctrl_ENABLE_ARC                           17
#define   LSb16HDMI_ctrl_ENABLE_ARC                           1
#define       bHDMI_ctrl_ENABLE_ARC                        1
#define   MSK32HDMI_ctrl_ENABLE_ARC                           0x00020000

#define     BA_HDMI_ctrl_HYST0_ARC                         0x000E
#define     B16HDMI_ctrl_HYST0_ARC                         0x000E
#define   LSb32HDMI_ctrl_HYST0_ARC                            18
#define   LSb16HDMI_ctrl_HYST0_ARC                            2
#define       bHDMI_ctrl_HYST0_ARC                         1
#define   MSK32HDMI_ctrl_HYST0_ARC                            0x00040000

#define     BA_HDMI_ctrl_HYST1_ARC                         0x000E
#define     B16HDMI_ctrl_HYST1_ARC                         0x000E
#define   LSb32HDMI_ctrl_HYST1_ARC                            19
#define   LSb16HDMI_ctrl_HYST1_ARC                            3
#define       bHDMI_ctrl_HYST1_ARC                         1
#define   MSK32HDMI_ctrl_HYST1_ARC                            0x00080000

#define     BA_HDMI_ctrl_M_EN_ARC                          0x000E
#define     B16HDMI_ctrl_M_EN_ARC                          0x000E
#define   LSb32HDMI_ctrl_M_EN_ARC                             20
#define   LSb16HDMI_ctrl_M_EN_ARC                             4
#define       bHDMI_ctrl_M_EN_ARC                          1
#define   MSK32HDMI_ctrl_M_EN_ARC                             0x00100000

#define     BA_HDMI_ctrl_P_EN_ARC                          0x000E
#define     B16HDMI_ctrl_P_EN_ARC                          0x000E
#define   LSb32HDMI_ctrl_P_EN_ARC                             21
#define   LSb16HDMI_ctrl_P_EN_ARC                             5
#define       bHDMI_ctrl_P_EN_ARC                          1
#define   MSK32HDMI_ctrl_P_EN_ARC                             0x00200000

#define     BA_HDMI_ctrl_POLSWAP_ARC                       0x000E
#define     B16HDMI_ctrl_POLSWAP_ARC                       0x000E
#define   LSb32HDMI_ctrl_POLSWAP_ARC                          22
#define   LSb16HDMI_ctrl_POLSWAP_ARC                          6
#define       bHDMI_ctrl_POLSWAP_ARC                       1
#define   MSK32HDMI_ctrl_POLSWAP_ARC                          0x00400000

#define     BA_HDMI_ctrl_TM_EN_ARC                         0x000E
#define     B16HDMI_ctrl_TM_EN_ARC                         0x000E
#define   LSb32HDMI_ctrl_TM_EN_ARC                            23
#define   LSb16HDMI_ctrl_TM_EN_ARC                            7
#define       bHDMI_ctrl_TM_EN_ARC                         1
#define   MSK32HDMI_ctrl_TM_EN_ARC                            0x00800000

#define     BA_HDMI_ctrl_IPP_CTL                           0x000F
#define     B16HDMI_ctrl_IPP_CTL                           0x000E
#define   LSb32HDMI_ctrl_IPP_CTL                              24
#define   LSb16HDMI_ctrl_IPP_CTL                              8
#define       bHDMI_ctrl_IPP_CTL                           3
#define   MSK32HDMI_ctrl_IPP_CTL                              0x07000000

#define     BA_HDMI_ctrl_SEL_CK2T                          0x000F
#define     B16HDMI_ctrl_SEL_CK2T                          0x000E
#define   LSb32HDMI_ctrl_SEL_CK2T                             27
#define   LSb16HDMI_ctrl_SEL_CK2T                             11
#define       bHDMI_ctrl_SEL_CK2T                          2
#define   MSK32HDMI_ctrl_SEL_CK2T                             0x18000000

#define     BA_HDMI_ctrl_RTERM_CTRL                        0x0010
#define     B16HDMI_ctrl_RTERM_CTRL                        0x0010
#define   LSb32HDMI_ctrl_RTERM_CTRL                           0
#define   LSb16HDMI_ctrl_RTERM_CTRL                           0
#define       bHDMI_ctrl_RTERM_CTRL                        16
#define   MSK32HDMI_ctrl_RTERM_CTRL                           0x0000FFFF

#define     BA_HDMI_ctrl_PU_PLL                            0x0012
#define     B16HDMI_ctrl_PU_PLL                            0x0012
#define   LSb32HDMI_ctrl_PU_PLL                               16
#define   LSb16HDMI_ctrl_PU_PLL                               0
#define       bHDMI_ctrl_PU_PLL                            1
#define   MSK32HDMI_ctrl_PU_PLL                               0x00010000

#define     BA_HDMI_ctrl_PLL_LOCK_TH                       0x0012
#define     B16HDMI_ctrl_PLL_LOCK_TH                       0x0012
#define   LSb32HDMI_ctrl_PLL_LOCK_TH                          17
#define   LSb16HDMI_ctrl_PLL_LOCK_TH                          1
#define       bHDMI_ctrl_PLL_LOCK_TH                       4
#define   MSK32HDMI_ctrl_PLL_LOCK_TH                          0x001E0000

#define     BA_HDMI_ctrl_RESET_PLL                         0x0012
#define     B16HDMI_ctrl_RESET_PLL                         0x0012
#define   LSb32HDMI_ctrl_RESET_PLL                            21
#define   LSb16HDMI_ctrl_RESET_PLL                            5
#define       bHDMI_ctrl_RESET_PLL                         1
#define   MSK32HDMI_ctrl_RESET_PLL                            0x00200000

#define     BA_HDMI_ctrl_SEL_420                           0x0012
#define     B16HDMI_ctrl_SEL_420                           0x0012
#define   LSb32HDMI_ctrl_SEL_420                              22
#define   LSb16HDMI_ctrl_SEL_420                              6
#define       bHDMI_ctrl_SEL_420                           1
#define   MSK32HDMI_ctrl_SEL_420                              0x00400000

#define     BA_HDMI_ctrl_SEL_DC                            0x0012
#define     B16HDMI_ctrl_SEL_DC                            0x0012
#define   LSb32HDMI_ctrl_SEL_DC                               23
#define   LSb16HDMI_ctrl_SEL_DC                               7
#define       bHDMI_ctrl_SEL_DC                            2
#define   MSK32HDMI_ctrl_SEL_DC                               0x01800000

#define     BA_HDMI_ctrl_SEL_DIVA                          0x0013
#define     B16HDMI_ctrl_SEL_DIVA                          0x0012
#define   LSb32HDMI_ctrl_SEL_DIVA                             25
#define   LSb16HDMI_ctrl_SEL_DIVA                             9
#define       bHDMI_ctrl_SEL_DIVA                          3
#define   MSK32HDMI_ctrl_SEL_DIVA                             0x0E000000

#define     BA_HDMI_ctrl_SEL_DIVX                          0x0013
#define     B16HDMI_ctrl_SEL_DIVX                          0x0012
#define   LSb32HDMI_ctrl_SEL_DIVX                             28
#define   LSb16HDMI_ctrl_SEL_DIVX                             12
#define       bHDMI_ctrl_SEL_DIVX                          3
#define   MSK32HDMI_ctrl_SEL_DIVX                             0x70000000

#define     BA_HDMI_ctrl_SEL_HF                            0x0013
#define     B16HDMI_ctrl_SEL_HF                            0x0012
#define   LSb32HDMI_ctrl_SEL_HF                               31
#define   LSb16HDMI_ctrl_SEL_HF                               15
#define       bHDMI_ctrl_SEL_HF                            1
#define   MSK32HDMI_ctrl_SEL_HF                               0x80000000

#define     BA_HDMI_ctrl_SICP                              0x0014
#define     B16HDMI_ctrl_SICP                              0x0014
#define   LSb32HDMI_ctrl_SICP                                 0
#define   LSb16HDMI_ctrl_SICP                                 0
#define       bHDMI_ctrl_SICP                              5
#define   MSK32HDMI_ctrl_SICP                                 0x0000001F

#define     BA_HDMI_ctrl_SIKVCO                            0x0014
#define     B16HDMI_ctrl_SIKVCO                            0x0014
#define   LSb32HDMI_ctrl_SIKVCO                               5
#define   LSb16HDMI_ctrl_SIKVCO                               5
#define       bHDMI_ctrl_SIKVCO                            5
#define   MSK32HDMI_ctrl_SIKVCO                               0x000003E0

#define     BA_HDMI_ctrl_SVPLL                             0x0015
#define     B16HDMI_ctrl_SVPLL                             0x0014
#define   LSb32HDMI_ctrl_SVPLL                                10
#define   LSb16HDMI_ctrl_SVPLL                                10
#define       bHDMI_ctrl_SVPLL                             2
#define   MSK32HDMI_ctrl_SVPLL                                0x00000C00

#define     BA_HDMI_ctrl_SVPLLH                            0x0015
#define     B16HDMI_ctrl_SVPLLH                            0x0014
#define   LSb32HDMI_ctrl_SVPLLH                               12
#define   LSb16HDMI_ctrl_SVPLLH                               12
#define       bHDMI_ctrl_SVPLLH                            2
#define   MSK32HDMI_ctrl_SVPLLH                               0x00003000

#define     BA_HDMI_ctrl_VRHI                              0x0015
#define     B16HDMI_ctrl_VRHI                              0x0014
#define   LSb32HDMI_ctrl_VRHI                                 14
#define   LSb16HDMI_ctrl_VRHI                                 14
#define       bHDMI_ctrl_VRHI                              1
#define   MSK32HDMI_ctrl_VRHI                                 0x00004000

#define     BA_HDMI_ctrl_VCOCAL_EN                         0x0015
#define     B16HDMI_ctrl_VCOCAL_EN                         0x0014
#define   LSb32HDMI_ctrl_VCOCAL_EN                            15
#define   LSb16HDMI_ctrl_VCOCAL_EN                            15
#define       bHDMI_ctrl_VCOCAL_EN                         1
#define   MSK32HDMI_ctrl_VCOCAL_EN                            0x00008000

#define     BA_HDMI_ctrl_V2I_FILT_R_ADJ                    0x0016
#define     B16HDMI_ctrl_V2I_FILT_R_ADJ                    0x0016
#define   LSb32HDMI_ctrl_V2I_FILT_R_ADJ                       16
#define   LSb16HDMI_ctrl_V2I_FILT_R_ADJ                       0
#define       bHDMI_ctrl_V2I_FILT_R_ADJ                    2
#define   MSK32HDMI_ctrl_V2I_FILT_R_ADJ                       0x00030000

#define     BA_HDMI_ctrl_VCOCAL_VCON_ADJ                   0x0016
#define     B16HDMI_ctrl_VCOCAL_VCON_ADJ                   0x0016
#define   LSb32HDMI_ctrl_VCOCAL_VCON_ADJ                      18
#define   LSb16HDMI_ctrl_VCOCAL_VCON_ADJ                      2
#define       bHDMI_ctrl_VCOCAL_VCON_ADJ                   2
#define   MSK32HDMI_ctrl_VCOCAL_VCON_ADJ                      0x000C0000

#define     BA_HDMI_ctrl_VCOCAL_DIV_CTRL                   0x0016
#define     B16HDMI_ctrl_VCOCAL_DIV_CTRL                   0x0016
#define   LSb32HDMI_ctrl_VCOCAL_DIV_CTRL                      20
#define   LSb16HDMI_ctrl_VCOCAL_DIV_CTRL                      4
#define       bHDMI_ctrl_VCOCAL_DIV_CTRL                   2
#define   MSK32HDMI_ctrl_VCOCAL_DIV_CTRL                      0x00300000

#define     BA_HDMI_ctrl_VCOCAL_TIMER_CTRL                 0x0016
#define     B16HDMI_ctrl_VCOCAL_TIMER_CTRL                 0x0016
#define   LSb32HDMI_ctrl_VCOCAL_TIMER_CTRL                    22
#define   LSb16HDMI_ctrl_VCOCAL_TIMER_CTRL                    6
#define       bHDMI_ctrl_VCOCAL_TIMER_CTRL                 2
#define   MSK32HDMI_ctrl_VCOCAL_TIMER_CTRL                    0x00C00000

#define     BA_HDMI_ctrl_VCOCAL_OVRWEN                     0x0017
#define     B16HDMI_ctrl_VCOCAL_OVRWEN                     0x0016
#define   LSb32HDMI_ctrl_VCOCAL_OVRWEN                        24
#define   LSb16HDMI_ctrl_VCOCAL_OVRWEN                        8
#define       bHDMI_ctrl_VCOCAL_OVRWEN                     1
#define   MSK32HDMI_ctrl_VCOCAL_OVRWEN                        0x01000000

#define     BA_HDMI_ctrl_VCOCAL_OVRW                       0x0017
#define     B16HDMI_ctrl_VCOCAL_OVRW                       0x0016
#define   LSb32HDMI_ctrl_VCOCAL_OVRW                          25
#define   LSb16HDMI_ctrl_VCOCAL_OVRW                          9
#define       bHDMI_ctrl_VCOCAL_OVRW                       4
#define   MSK32HDMI_ctrl_VCOCAL_OVRW                          0x1E000000

#define     BA_HDMI_ctrl_ICP_SCALE_OVRWEN                  0x0017
#define     B16HDMI_ctrl_ICP_SCALE_OVRWEN                  0x0016
#define   LSb32HDMI_ctrl_ICP_SCALE_OVRWEN                     29
#define   LSb16HDMI_ctrl_ICP_SCALE_OVRWEN                     13
#define       bHDMI_ctrl_ICP_SCALE_OVRWEN                  1
#define   MSK32HDMI_ctrl_ICP_SCALE_OVRWEN                     0x20000000

#define     BA_HDMI_ctrl_V2I_FILT_BYP_OVRWEN               0x0017
#define     B16HDMI_ctrl_V2I_FILT_BYP_OVRWEN               0x0016
#define   LSb32HDMI_ctrl_V2I_FILT_BYP_OVRWEN                  30
#define   LSb16HDMI_ctrl_V2I_FILT_BYP_OVRWEN                  14
#define       bHDMI_ctrl_V2I_FILT_BYP_OVRWEN               1
#define   MSK32HDMI_ctrl_V2I_FILT_BYP_OVRWEN                  0x40000000

#define     BA_HDMI_ctrl_V2I_FILT_BYP_OVRW                 0x0017
#define     B16HDMI_ctrl_V2I_FILT_BYP_OVRW                 0x0016
#define   LSb32HDMI_ctrl_V2I_FILT_BYP_OVRW                    31
#define   LSb16HDMI_ctrl_V2I_FILT_BYP_OVRW                    15
#define       bHDMI_ctrl_V2I_FILT_BYP_OVRW                 1
#define   MSK32HDMI_ctrl_V2I_FILT_BYP_OVRW                    0x80000000

#define     BA_HDMI_ctrl_ICP_SCALE_OVRW                    0x0018
#define     B16HDMI_ctrl_ICP_SCALE_OVRW                    0x0018
#define   LSb32HDMI_ctrl_ICP_SCALE_OVRW                       0
#define   LSb16HDMI_ctrl_ICP_SCALE_OVRW                       0
#define       bHDMI_ctrl_ICP_SCALE_OVRW                    4
#define   MSK32HDMI_ctrl_ICP_SCALE_OVRW                       0x0000000F

#define     BA_HDMI_ctrl_PLL_CP_OPT                        0x0018
#define     B16HDMI_ctrl_PLL_CP_OPT                        0x0018
#define   LSb32HDMI_ctrl_PLL_CP_OPT                           4
#define   LSb16HDMI_ctrl_PLL_CP_OPT                           4
#define       bHDMI_ctrl_PLL_CP_OPT                        1
#define   MSK32HDMI_ctrl_PLL_CP_OPT                           0x00000010

#define     BA_HDMI_ctrl_LB_CH                             0x0018
#define     B16HDMI_ctrl_LB_CH                             0x0018
#define   LSb32HDMI_ctrl_LB_CH                                5
#define   LSb16HDMI_ctrl_LB_CH                                5
#define       bHDMI_ctrl_LB_CH                             2
#define   MSK32HDMI_ctrl_LB_CH                                0x00000060

#define     BA_HDMI_ctrl_LB_EN                             0x0018
#define     B16HDMI_ctrl_LB_EN                             0x0018
#define   LSb32HDMI_ctrl_LB_EN                                7
#define   LSb16HDMI_ctrl_LB_EN                                7
#define       bHDMI_ctrl_LB_EN                             1
#define   MSK32HDMI_ctrl_LB_EN                                0x00000080

#define     BA_HDMI_ctrl_LB_CTRL                           0x0019
#define     B16HDMI_ctrl_LB_CTRL                           0x0018
#define   LSb32HDMI_ctrl_LB_CTRL                              8
#define   LSb16HDMI_ctrl_LB_CTRL                              8
#define       bHDMI_ctrl_LB_CTRL                           8
#define   MSK32HDMI_ctrl_LB_CTRL                              0x0000FF00
	///////////////////////////////////////////////////////////

	typedef struct SIE_HDMI_ctrl {
		///////////////////////////////////////////////////////////
#define   GET32HDMI_ctrl_PU_IREF(r32)                      _BFGET_(r32, 0, 0)
#define   SET32HDMI_ctrl_PU_IREF(r32,v)                    _BFSET_(r32, 0, 0,v)
#define   GET16HDMI_ctrl_PU_IREF(r16)                      _BFGET_(r16, 0, 0)
#define   SET16HDMI_ctrl_PU_IREF(r16,v)                    _BFSET_(r16, 0, 0,v)

#define   GET32HDMI_ctrl_RST_TX(r32)                       _BFGET_(r32, 1, 1)
#define   SET32HDMI_ctrl_RST_TX(r32,v)                     _BFSET_(r32, 1, 1,v)
#define   GET16HDMI_ctrl_RST_TX(r16)                       _BFGET_(r16, 1, 1)
#define   SET16HDMI_ctrl_RST_TX(r16,v)                     _BFSET_(r16, 1, 1,v)

#define   GET32HDMI_ctrl_PU_TX(r32)                        _BFGET_(r32, 5, 2)
#define   SET32HDMI_ctrl_PU_TX(r32,v)                      _BFSET_(r32, 5, 2,v)
#define   GET16HDMI_ctrl_PU_TX(r16)                        _BFGET_(r16, 5, 2)
#define   SET16HDMI_ctrl_PU_TX(r16,v)                      _BFSET_(r16, 5, 2,v)

#define   GET32HDMI_ctrl_POLSWAP_TX(r32)                   _BFGET_(r32, 9, 6)
#define   SET32HDMI_ctrl_POLSWAP_TX(r32,v)                 _BFSET_(r32, 9, 6,v)
#define   GET16HDMI_ctrl_POLSWAP_TX(r16)                   _BFGET_(r16, 9, 6)
#define   SET16HDMI_ctrl_POLSWAP_TX(r16,v)                 _BFSET_(r16, 9, 6,v)

#define   GET32HDMI_ctrl_INV_CK10T(r32)                    _BFGET_(r32,10,10)
#define   SET32HDMI_ctrl_INV_CK10T(r32,v)                  _BFSET_(r32,10,10,v)
#define   GET16HDMI_ctrl_INV_CK10T(r16)                    _BFGET_(r16,10,10)
#define   SET16HDMI_ctrl_INV_CK10T(r16,v)                  _BFSET_(r16,10,10,v)

#define   GET32HDMI_ctrl_DAMP(r32)                         _BFGET_(r32,22,11)
#define   SET32HDMI_ctrl_DAMP(r32,v)                       _BFSET_(r32,22,11,v)

		UNSG32 u_PU_IREF:1;
		UNSG32 u_RST_TX:1;
		UNSG32 u_PU_TX:4;
		UNSG32 u_POLSWAP_TX:4;
		UNSG32 u_INV_CK10T:1;
		UNSG32 u_DAMP:12;
		UNSG32 RSVDx0_b23:9;
		///////////////////////////////////////////////////////////

#define   GET32HDMI_ctrl_EAMP(r32)                         _BFGET_(r32,11, 0)
#define   SET32HDMI_ctrl_EAMP(r32,v)                       _BFSET_(r32,11, 0,v)
#define   GET16HDMI_ctrl_EAMP(r16)                         _BFGET_(r16,11, 0)
#define   SET16HDMI_ctrl_EAMP(r16,v)                       _BFSET_(r16,11, 0,v)

#define   GET32HDMI_ctrl_IDRV(r32)                         _BFGET_(r32,27,12)
#define   SET32HDMI_ctrl_IDRV(r32,v)                       _BFSET_(r32,27,12,v)

#define   GET32HDMI_ctrl_TXDRVX2(r32)                      _BFGET_(r32,28,28)
#define   SET32HDMI_ctrl_TXDRVX2(r32,v)                    _BFSET_(r32,28,28,v)
#define   GET16HDMI_ctrl_TXDRVX2(r16)                      _BFGET_(r16,12,12)
#define   SET16HDMI_ctrl_TXDRVX2(r16,v)                    _BFSET_(r16,12,12,v)

#define   GET32HDMI_ctrl_SVTX(r32)                         _BFGET_(r32,31,29)
#define   SET32HDMI_ctrl_SVTX(r32,v)                       _BFSET_(r32,31,29,v)
#define   GET16HDMI_ctrl_SVTX(r16)                         _BFGET_(r16,15,13)
#define   SET16HDMI_ctrl_SVTX(r16,v)                       _BFSET_(r16,15,13,v)

		UNSG32 u_EAMP:12;
		UNSG32 u_IDRV:16;
		UNSG32 u_TXDRVX2:1;
		UNSG32 u_SVTX:3;
		///////////////////////////////////////////////////////////

#define   GET32HDMI_ctrl_CP(r32)                           _BFGET_(r32, 7, 0)
#define   SET32HDMI_ctrl_CP(r32,v)                         _BFSET_(r32, 7, 0,v)
#define   GET16HDMI_ctrl_CP(r16)                           _BFGET_(r16, 7, 0)
#define   SET16HDMI_ctrl_CP(r16,v)                         _BFSET_(r16, 7, 0,v)

#define   GET32HDMI_ctrl_AJ_D(r32)                         _BFGET_(r32,11, 8)
#define   SET32HDMI_ctrl_AJ_D(r32,v)                       _BFSET_(r32,11, 8,v)
#define   GET16HDMI_ctrl_AJ_D(r16)                         _BFGET_(r16,11, 8)
#define   SET16HDMI_ctrl_AJ_D(r16,v)                       _BFSET_(r16,11, 8,v)

#define   GET32HDMI_ctrl_AJ_EN(r32)                        _BFGET_(r32,15,12)
#define   SET32HDMI_ctrl_AJ_EN(r32,v)                      _BFSET_(r32,15,12,v)
#define   GET16HDMI_ctrl_AJ_EN(r16)                        _BFGET_(r16,15,12)
#define   SET16HDMI_ctrl_AJ_EN(r16,v)                      _BFSET_(r16,15,12,v)

#define   GET32HDMI_ctrl_TP_EN(r32)                        _BFGET_(r32,21,16)
#define   SET32HDMI_ctrl_TP_EN(r32,v)                      _BFSET_(r32,21,16,v)
#define   GET16HDMI_ctrl_TP_EN(r16)                        _BFGET_(r16, 5, 0)
#define   SET16HDMI_ctrl_TP_EN(r16,v)                      _BFSET_(r16, 5, 0,v)

#define   GET32HDMI_ctrl_TPC(r32)                          _BFGET_(r32,25,22)
#define   SET32HDMI_ctrl_TPC(r32,v)                        _BFSET_(r32,25,22,v)
#define   GET16HDMI_ctrl_TPC(r16)                          _BFGET_(r16, 9, 6)
#define   SET16HDMI_ctrl_TPC(r16,v)                        _BFSET_(r16, 9, 6,v)

		UNSG32 u_CP:8;
		UNSG32 u_AJ_D:4;
		UNSG32 u_AJ_EN:4;
		UNSG32 u_TP_EN:6;
		UNSG32 u_TPC:4;
		UNSG32 RSVDx8_b26:6;
		///////////////////////////////////////////////////////////

#define   GET32HDMI_ctrl_AUX_CTRL0(r32)                    _BFGET_(r32, 7, 0)
#define   SET32HDMI_ctrl_AUX_CTRL0(r32,v)                  _BFSET_(r32, 7, 0,v)
#define   GET16HDMI_ctrl_AUX_CTRL0(r16)                    _BFGET_(r16, 7, 0)
#define   SET16HDMI_ctrl_AUX_CTRL0(r16,v)                  _BFSET_(r16, 7, 0,v)

#define   GET32HDMI_ctrl_AUX_CTRL_1(r32)                   _BFGET_(r32,15, 8)
#define   SET32HDMI_ctrl_AUX_CTRL_1(r32,v)                 _BFSET_(r32,15, 8,v)
#define   GET16HDMI_ctrl_AUX_CTRL_1(r16)                   _BFGET_(r16,15, 8)
#define   SET16HDMI_ctrl_AUX_CTRL_1(r16,v)                 _BFSET_(r16,15, 8,v)

#define   GET32HDMI_ctrl_PU_ARC(r32)                       _BFGET_(r32,16,16)
#define   SET32HDMI_ctrl_PU_ARC(r32,v)                     _BFSET_(r32,16,16,v)
#define   GET16HDMI_ctrl_PU_ARC(r16)                       _BFGET_(r16, 0, 0)
#define   SET16HDMI_ctrl_PU_ARC(r16,v)                     _BFSET_(r16, 0, 0,v)

#define   GET32HDMI_ctrl_ENABLE_ARC(r32)                   _BFGET_(r32,17,17)
#define   SET32HDMI_ctrl_ENABLE_ARC(r32,v)                 _BFSET_(r32,17,17,v)
#define   GET16HDMI_ctrl_ENABLE_ARC(r16)                   _BFGET_(r16, 1, 1)
#define   SET16HDMI_ctrl_ENABLE_ARC(r16,v)                 _BFSET_(r16, 1, 1,v)

#define   GET32HDMI_ctrl_HYST0_ARC(r32)                    _BFGET_(r32,18,18)
#define   SET32HDMI_ctrl_HYST0_ARC(r32,v)                  _BFSET_(r32,18,18,v)
#define   GET16HDMI_ctrl_HYST0_ARC(r16)                    _BFGET_(r16, 2, 2)
#define   SET16HDMI_ctrl_HYST0_ARC(r16,v)                  _BFSET_(r16, 2, 2,v)

#define   GET32HDMI_ctrl_HYST1_ARC(r32)                    _BFGET_(r32,19,19)
#define   SET32HDMI_ctrl_HYST1_ARC(r32,v)                  _BFSET_(r32,19,19,v)
#define   GET16HDMI_ctrl_HYST1_ARC(r16)                    _BFGET_(r16, 3, 3)
#define   SET16HDMI_ctrl_HYST1_ARC(r16,v)                  _BFSET_(r16, 3, 3,v)

#define   GET32HDMI_ctrl_M_EN_ARC(r32)                     _BFGET_(r32,20,20)
#define   SET32HDMI_ctrl_M_EN_ARC(r32,v)                   _BFSET_(r32,20,20,v)
#define   GET16HDMI_ctrl_M_EN_ARC(r16)                     _BFGET_(r16, 4, 4)
#define   SET16HDMI_ctrl_M_EN_ARC(r16,v)                   _BFSET_(r16, 4, 4,v)

#define   GET32HDMI_ctrl_P_EN_ARC(r32)                     _BFGET_(r32,21,21)
#define   SET32HDMI_ctrl_P_EN_ARC(r32,v)                   _BFSET_(r32,21,21,v)
#define   GET16HDMI_ctrl_P_EN_ARC(r16)                     _BFGET_(r16, 5, 5)
#define   SET16HDMI_ctrl_P_EN_ARC(r16,v)                   _BFSET_(r16, 5, 5,v)

#define   GET32HDMI_ctrl_POLSWAP_ARC(r32)                  _BFGET_(r32,22,22)
#define   SET32HDMI_ctrl_POLSWAP_ARC(r32,v)                _BFSET_(r32,22,22,v)
#define   GET16HDMI_ctrl_POLSWAP_ARC(r16)                  _BFGET_(r16, 6, 6)
#define   SET16HDMI_ctrl_POLSWAP_ARC(r16,v)                _BFSET_(r16, 6, 6,v)

#define   GET32HDMI_ctrl_TM_EN_ARC(r32)                    _BFGET_(r32,23,23)
#define   SET32HDMI_ctrl_TM_EN_ARC(r32,v)                  _BFSET_(r32,23,23,v)
#define   GET16HDMI_ctrl_TM_EN_ARC(r16)                    _BFGET_(r16, 7, 7)
#define   SET16HDMI_ctrl_TM_EN_ARC(r16,v)                  _BFSET_(r16, 7, 7,v)

#define   GET32HDMI_ctrl_IPP_CTL(r32)                      _BFGET_(r32,26,24)
#define   SET32HDMI_ctrl_IPP_CTL(r32,v)                    _BFSET_(r32,26,24,v)
#define   GET16HDMI_ctrl_IPP_CTL(r16)                      _BFGET_(r16,10, 8)
#define   SET16HDMI_ctrl_IPP_CTL(r16,v)                    _BFSET_(r16,10, 8,v)

#define   GET32HDMI_ctrl_SEL_CK2T(r32)                     _BFGET_(r32,28,27)
#define   SET32HDMI_ctrl_SEL_CK2T(r32,v)                   _BFSET_(r32,28,27,v)
#define   GET16HDMI_ctrl_SEL_CK2T(r16)                     _BFGET_(r16,12,11)
#define   SET16HDMI_ctrl_SEL_CK2T(r16,v)                   _BFSET_(r16,12,11,v)

		UNSG32 u_AUX_CTRL0:8;
		UNSG32 u_AUX_CTRL_1:8;
		UNSG32 u_PU_ARC:1;
		UNSG32 u_ENABLE_ARC:1;
		UNSG32 u_HYST0_ARC:1;
		UNSG32 u_HYST1_ARC:1;
		UNSG32 u_M_EN_ARC:1;
		UNSG32 u_P_EN_ARC:1;
		UNSG32 u_POLSWAP_ARC:1;
		UNSG32 u_TM_EN_ARC:1;
		UNSG32 u_IPP_CTL:3;
		UNSG32 u_SEL_CK2T:2;
		UNSG32 RSVDxC_b29:3;
		///////////////////////////////////////////////////////////

#define   GET32HDMI_ctrl_RTERM_CTRL(r32)                   _BFGET_(r32,15, 0)
#define   SET32HDMI_ctrl_RTERM_CTRL(r32,v)                 _BFSET_(r32,15, 0,v)
#define   GET16HDMI_ctrl_RTERM_CTRL(r16)                   _BFGET_(r16,15, 0)
#define   SET16HDMI_ctrl_RTERM_CTRL(r16,v)                 _BFSET_(r16,15, 0,v)

#define   GET32HDMI_ctrl_PU_PLL(r32)                       _BFGET_(r32,16,16)
#define   SET32HDMI_ctrl_PU_PLL(r32,v)                     _BFSET_(r32,16,16,v)
#define   GET16HDMI_ctrl_PU_PLL(r16)                       _BFGET_(r16, 0, 0)
#define   SET16HDMI_ctrl_PU_PLL(r16,v)                     _BFSET_(r16, 0, 0,v)

#define   GET32HDMI_ctrl_PLL_LOCK_TH(r32)                  _BFGET_(r32,20,17)
#define   SET32HDMI_ctrl_PLL_LOCK_TH(r32,v)                _BFSET_(r32,20,17,v)
#define   GET16HDMI_ctrl_PLL_LOCK_TH(r16)                  _BFGET_(r16, 4, 1)
#define   SET16HDMI_ctrl_PLL_LOCK_TH(r16,v)                _BFSET_(r16, 4, 1,v)

#define   GET32HDMI_ctrl_RESET_PLL(r32)                    _BFGET_(r32,21,21)
#define   SET32HDMI_ctrl_RESET_PLL(r32,v)                  _BFSET_(r32,21,21,v)
#define   GET16HDMI_ctrl_RESET_PLL(r16)                    _BFGET_(r16, 5, 5)
#define   SET16HDMI_ctrl_RESET_PLL(r16,v)                  _BFSET_(r16, 5, 5,v)

#define   GET32HDMI_ctrl_SEL_420(r32)                      _BFGET_(r32,22,22)
#define   SET32HDMI_ctrl_SEL_420(r32,v)                    _BFSET_(r32,22,22,v)
#define   GET16HDMI_ctrl_SEL_420(r16)                      _BFGET_(r16, 6, 6)
#define   SET16HDMI_ctrl_SEL_420(r16,v)                    _BFSET_(r16, 6, 6,v)

#define   GET32HDMI_ctrl_SEL_DC(r32)                       _BFGET_(r32,24,23)
#define   SET32HDMI_ctrl_SEL_DC(r32,v)                     _BFSET_(r32,24,23,v)
#define   GET16HDMI_ctrl_SEL_DC(r16)                       _BFGET_(r16, 8, 7)
#define   SET16HDMI_ctrl_SEL_DC(r16,v)                     _BFSET_(r16, 8, 7,v)

#define   GET32HDMI_ctrl_SEL_DIVA(r32)                     _BFGET_(r32,27,25)
#define   SET32HDMI_ctrl_SEL_DIVA(r32,v)                   _BFSET_(r32,27,25,v)
#define   GET16HDMI_ctrl_SEL_DIVA(r16)                     _BFGET_(r16,11, 9)
#define   SET16HDMI_ctrl_SEL_DIVA(r16,v)                   _BFSET_(r16,11, 9,v)

#define   GET32HDMI_ctrl_SEL_DIVX(r32)                     _BFGET_(r32,30,28)
#define   SET32HDMI_ctrl_SEL_DIVX(r32,v)                   _BFSET_(r32,30,28,v)
#define   GET16HDMI_ctrl_SEL_DIVX(r16)                     _BFGET_(r16,14,12)
#define   SET16HDMI_ctrl_SEL_DIVX(r16,v)                   _BFSET_(r16,14,12,v)

#define   GET32HDMI_ctrl_SEL_HF(r32)                       _BFGET_(r32,31,31)
#define   SET32HDMI_ctrl_SEL_HF(r32,v)                     _BFSET_(r32,31,31,v)
#define   GET16HDMI_ctrl_SEL_HF(r16)                       _BFGET_(r16,15,15)
#define   SET16HDMI_ctrl_SEL_HF(r16,v)                     _BFSET_(r16,15,15,v)

		UNSG32 u_RTERM_CTRL:16;
		UNSG32 u_PU_PLL:1;
		UNSG32 u_PLL_LOCK_TH:4;
		UNSG32 u_RESET_PLL:1;
		UNSG32 u_SEL_420:1;
		UNSG32 u_SEL_DC:2;
		UNSG32 u_SEL_DIVA:3;
		UNSG32 u_SEL_DIVX:3;
		UNSG32 u_SEL_HF:1;
		///////////////////////////////////////////////////////////

#define   GET32HDMI_ctrl_SICP(r32)                         _BFGET_(r32, 4, 0)
#define   SET32HDMI_ctrl_SICP(r32,v)                       _BFSET_(r32, 4, 0,v)
#define   GET16HDMI_ctrl_SICP(r16)                         _BFGET_(r16, 4, 0)
#define   SET16HDMI_ctrl_SICP(r16,v)                       _BFSET_(r16, 4, 0,v)

#define   GET32HDMI_ctrl_SIKVCO(r32)                       _BFGET_(r32, 9, 5)
#define   SET32HDMI_ctrl_SIKVCO(r32,v)                     _BFSET_(r32, 9, 5,v)
#define   GET16HDMI_ctrl_SIKVCO(r16)                       _BFGET_(r16, 9, 5)
#define   SET16HDMI_ctrl_SIKVCO(r16,v)                     _BFSET_(r16, 9, 5,v)

#define   GET32HDMI_ctrl_SVPLL(r32)                        _BFGET_(r32,11,10)
#define   SET32HDMI_ctrl_SVPLL(r32,v)                      _BFSET_(r32,11,10,v)
#define   GET16HDMI_ctrl_SVPLL(r16)                        _BFGET_(r16,11,10)
#define   SET16HDMI_ctrl_SVPLL(r16,v)                      _BFSET_(r16,11,10,v)

#define   GET32HDMI_ctrl_SVPLLH(r32)                       _BFGET_(r32,13,12)
#define   SET32HDMI_ctrl_SVPLLH(r32,v)                     _BFSET_(r32,13,12,v)
#define   GET16HDMI_ctrl_SVPLLH(r16)                       _BFGET_(r16,13,12)
#define   SET16HDMI_ctrl_SVPLLH(r16,v)                     _BFSET_(r16,13,12,v)

#define   GET32HDMI_ctrl_VRHI(r32)                         _BFGET_(r32,14,14)
#define   SET32HDMI_ctrl_VRHI(r32,v)                       _BFSET_(r32,14,14,v)
#define   GET16HDMI_ctrl_VRHI(r16)                         _BFGET_(r16,14,14)
#define   SET16HDMI_ctrl_VRHI(r16,v)                       _BFSET_(r16,14,14,v)

#define   GET32HDMI_ctrl_VCOCAL_EN(r32)                    _BFGET_(r32,15,15)
#define   SET32HDMI_ctrl_VCOCAL_EN(r32,v)                  _BFSET_(r32,15,15,v)
#define   GET16HDMI_ctrl_VCOCAL_EN(r16)                    _BFGET_(r16,15,15)
#define   SET16HDMI_ctrl_VCOCAL_EN(r16,v)                  _BFSET_(r16,15,15,v)

#define   GET32HDMI_ctrl_V2I_FILT_R_ADJ(r32)               _BFGET_(r32,17,16)
#define   SET32HDMI_ctrl_V2I_FILT_R_ADJ(r32,v)             _BFSET_(r32,17,16,v)
#define   GET16HDMI_ctrl_V2I_FILT_R_ADJ(r16)               _BFGET_(r16, 1, 0)
#define   SET16HDMI_ctrl_V2I_FILT_R_ADJ(r16,v)             _BFSET_(r16, 1, 0,v)

#define   GET32HDMI_ctrl_VCOCAL_VCON_ADJ(r32)              _BFGET_(r32,19,18)
#define   SET32HDMI_ctrl_VCOCAL_VCON_ADJ(r32,v)            _BFSET_(r32,19,18,v)
#define   GET16HDMI_ctrl_VCOCAL_VCON_ADJ(r16)              _BFGET_(r16, 3, 2)
#define   SET16HDMI_ctrl_VCOCAL_VCON_ADJ(r16,v)            _BFSET_(r16, 3, 2,v)

#define   GET32HDMI_ctrl_VCOCAL_DIV_CTRL(r32)              _BFGET_(r32,21,20)
#define   SET32HDMI_ctrl_VCOCAL_DIV_CTRL(r32,v)            _BFSET_(r32,21,20,v)
#define   GET16HDMI_ctrl_VCOCAL_DIV_CTRL(r16)              _BFGET_(r16, 5, 4)
#define   SET16HDMI_ctrl_VCOCAL_DIV_CTRL(r16,v)            _BFSET_(r16, 5, 4,v)

#define   GET32HDMI_ctrl_VCOCAL_TIMER_CTRL(r32)            _BFGET_(r32,23,22)
#define   SET32HDMI_ctrl_VCOCAL_TIMER_CTRL(r32,v)          _BFSET_(r32,23,22,v)
#define   GET16HDMI_ctrl_VCOCAL_TIMER_CTRL(r16)            _BFGET_(r16, 7, 6)
#define   SET16HDMI_ctrl_VCOCAL_TIMER_CTRL(r16,v)          _BFSET_(r16, 7, 6,v)

#define   GET32HDMI_ctrl_VCOCAL_OVRWEN(r32)                _BFGET_(r32,24,24)
#define   SET32HDMI_ctrl_VCOCAL_OVRWEN(r32,v)              _BFSET_(r32,24,24,v)
#define   GET16HDMI_ctrl_VCOCAL_OVRWEN(r16)                _BFGET_(r16, 8, 8)
#define   SET16HDMI_ctrl_VCOCAL_OVRWEN(r16,v)              _BFSET_(r16, 8, 8,v)

#define   GET32HDMI_ctrl_VCOCAL_OVRW(r32)                  _BFGET_(r32,28,25)
#define   SET32HDMI_ctrl_VCOCAL_OVRW(r32,v)                _BFSET_(r32,28,25,v)
#define   GET16HDMI_ctrl_VCOCAL_OVRW(r16)                  _BFGET_(r16,12, 9)
#define   SET16HDMI_ctrl_VCOCAL_OVRW(r16,v)                _BFSET_(r16,12, 9,v)

#define   GET32HDMI_ctrl_ICP_SCALE_OVRWEN(r32)             _BFGET_(r32,29,29)
#define   SET32HDMI_ctrl_ICP_SCALE_OVRWEN(r32,v)           _BFSET_(r32,29,29,v)
#define   GET16HDMI_ctrl_ICP_SCALE_OVRWEN(r16)             _BFGET_(r16,13,13)
#define   SET16HDMI_ctrl_ICP_SCALE_OVRWEN(r16,v)           _BFSET_(r16,13,13,v)

#define   GET32HDMI_ctrl_V2I_FILT_BYP_OVRWEN(r32)          _BFGET_(r32,30,30)
#define   SET32HDMI_ctrl_V2I_FILT_BYP_OVRWEN(r32,v)        _BFSET_(r32,30,30,v)
#define   GET16HDMI_ctrl_V2I_FILT_BYP_OVRWEN(r16)          _BFGET_(r16,14,14)
#define   SET16HDMI_ctrl_V2I_FILT_BYP_OVRWEN(r16,v)        _BFSET_(r16,14,14,v)

#define   GET32HDMI_ctrl_V2I_FILT_BYP_OVRW(r32)            _BFGET_(r32,31,31)
#define   SET32HDMI_ctrl_V2I_FILT_BYP_OVRW(r32,v)          _BFSET_(r32,31,31,v)
#define   GET16HDMI_ctrl_V2I_FILT_BYP_OVRW(r16)            _BFGET_(r16,15,15)
#define   SET16HDMI_ctrl_V2I_FILT_BYP_OVRW(r16,v)          _BFSET_(r16,15,15,v)

		UNSG32 u_SICP:5;
		UNSG32 u_SIKVCO:5;
		UNSG32 u_SVPLL:2;
		UNSG32 u_SVPLLH:2;
		UNSG32 u_VRHI:1;
		UNSG32 u_VCOCAL_EN:1;
		UNSG32 u_V2I_FILT_R_ADJ:2;
		UNSG32 u_VCOCAL_VCON_ADJ:2;
		UNSG32 u_VCOCAL_DIV_CTRL:2;
		UNSG32 u_VCOCAL_TIMER_CTRL:2;
		UNSG32 u_VCOCAL_OVRWEN:1;
		UNSG32 u_VCOCAL_OVRW:4;
		UNSG32 u_ICP_SCALE_OVRWEN:1;
		UNSG32 u_V2I_FILT_BYP_OVRWEN:1;
		UNSG32 u_V2I_FILT_BYP_OVRW:1;
		///////////////////////////////////////////////////////////

#define   GET32HDMI_ctrl_ICP_SCALE_OVRW(r32)               _BFGET_(r32, 3, 0)
#define   SET32HDMI_ctrl_ICP_SCALE_OVRW(r32,v)             _BFSET_(r32, 3, 0,v)
#define   GET16HDMI_ctrl_ICP_SCALE_OVRW(r16)               _BFGET_(r16, 3, 0)
#define   SET16HDMI_ctrl_ICP_SCALE_OVRW(r16,v)             _BFSET_(r16, 3, 0,v)

#define   GET32HDMI_ctrl_PLL_CP_OPT(r32)                   _BFGET_(r32, 4, 4)
#define   SET32HDMI_ctrl_PLL_CP_OPT(r32,v)                 _BFSET_(r32, 4, 4,v)
#define   GET16HDMI_ctrl_PLL_CP_OPT(r16)                   _BFGET_(r16, 4, 4)
#define   SET16HDMI_ctrl_PLL_CP_OPT(r16,v)                 _BFSET_(r16, 4, 4,v)

#define   GET32HDMI_ctrl_LB_CH(r32)                        _BFGET_(r32, 6, 5)
#define   SET32HDMI_ctrl_LB_CH(r32,v)                      _BFSET_(r32, 6, 5,v)
#define   GET16HDMI_ctrl_LB_CH(r16)                        _BFGET_(r16, 6, 5)
#define   SET16HDMI_ctrl_LB_CH(r16,v)                      _BFSET_(r16, 6, 5,v)

#define   GET32HDMI_ctrl_LB_EN(r32)                        _BFGET_(r32, 7, 7)
#define   SET32HDMI_ctrl_LB_EN(r32,v)                      _BFSET_(r32, 7, 7,v)
#define   GET16HDMI_ctrl_LB_EN(r16)                        _BFGET_(r16, 7, 7)
#define   SET16HDMI_ctrl_LB_EN(r16,v)                      _BFSET_(r16, 7, 7,v)

#define   GET32HDMI_ctrl_LB_CTRL(r32)                      _BFGET_(r32,15, 8)
#define   SET32HDMI_ctrl_LB_CTRL(r32,v)                    _BFSET_(r32,15, 8,v)
#define   GET16HDMI_ctrl_LB_CTRL(r16)                      _BFGET_(r16,15, 8)
#define   SET16HDMI_ctrl_LB_CTRL(r16,v)                    _BFSET_(r16,15, 8,v)

		UNSG32 u_ICP_SCALE_OVRW:4;
		UNSG32 u_PLL_CP_OPT:1;
		UNSG32 u_LB_CH:2;
		UNSG32 u_LB_EN:1;
		UNSG32 u_LB_CTRL:8;
		UNSG32 RSVDx18_b16:16;
		///////////////////////////////////////////////////////////
	} SIE_HDMI_ctrl;

	///////////////////////////////////////////////////////////
	SIGN32 HDMI_ctrl_drvrd(SIE_HDMI_ctrl * p, UNSG32 base, SIGN32 mem,
			       SIGN32 tst);
	SIGN32 HDMI_ctrl_drvwr(SIE_HDMI_ctrl * p, UNSG32 base, SIGN32 mem,
			       SIGN32 tst, UNSG32 * pcmd);
	void HDMI_ctrl_reset(SIE_HDMI_ctrl * p);
	SIGN32 HDMI_ctrl_cmp(SIE_HDMI_ctrl * p, SIE_HDMI_ctrl * pie, char *pfx,
			     void *hLOG, SIGN32 mem, SIGN32 tst);
#define HDMI_ctrl_check(p,pie,pfx,hLOG) HDMI_ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define HDMI_ctrl_print(p,    pfx,hLOG) HDMI_ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: HDMI_ctrl
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE HDMI_sts                biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (R-)
///               %unsigned 8  AUX_STATUS_0
///               %unsigned 1  PLL_LOCK
///                                    ###
///                                    * PLL lock detector output
///                                    ###
///               %unsigned 1  VCOCAL_BUSY
///                                    ###
///                                    * VCO calibration busy signal , 0/1 = VCO calibration is not in progress / in progress
///                                    ###
///               %unsigned 4  VCOCAL_VAL
///                                    ###
///                                    * VCO calibration value , 0000/.../1111 = min V2I const term/.../max V2I const term
///                                    ###
///               %unsigned 1  VCOCAL_FAIL
///                                    ###
///                                    * VCO calibration fail flag
///                                    ###
///               %unsigned 4  PLL_AUX0
///                                    ###
///                                    * Reserved for status readout.
///                                    ###
///               %unsigned 8  LB_STATUS
///                                    ###
///                                    * FSM state : {state[1:0], sela_fsm[2:0], selb_fsm[2:0]}
///                                    ###
///               %%        5          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      27b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_HDMI_sts
#define h_HDMI_sts (){}

#define     BA_HDMI_sts_AUX_STATUS_0                       0x0000
#define     B16HDMI_sts_AUX_STATUS_0                       0x0000
#define   LSb32HDMI_sts_AUX_STATUS_0                          0
#define   LSb16HDMI_sts_AUX_STATUS_0                          0
#define       bHDMI_sts_AUX_STATUS_0                       8
#define   MSK32HDMI_sts_AUX_STATUS_0                          0x000000FF

#define     BA_HDMI_sts_PLL_LOCK                           0x0001
#define     B16HDMI_sts_PLL_LOCK                           0x0000
#define   LSb32HDMI_sts_PLL_LOCK                              8
#define   LSb16HDMI_sts_PLL_LOCK                              8
#define       bHDMI_sts_PLL_LOCK                           1
#define   MSK32HDMI_sts_PLL_LOCK                              0x00000100

#define     BA_HDMI_sts_VCOCAL_BUSY                        0x0001
#define     B16HDMI_sts_VCOCAL_BUSY                        0x0000
#define   LSb32HDMI_sts_VCOCAL_BUSY                           9
#define   LSb16HDMI_sts_VCOCAL_BUSY                           9
#define       bHDMI_sts_VCOCAL_BUSY                        1
#define   MSK32HDMI_sts_VCOCAL_BUSY                           0x00000200

#define     BA_HDMI_sts_VCOCAL_VAL                         0x0001
#define     B16HDMI_sts_VCOCAL_VAL                         0x0000
#define   LSb32HDMI_sts_VCOCAL_VAL                            10
#define   LSb16HDMI_sts_VCOCAL_VAL                            10
#define       bHDMI_sts_VCOCAL_VAL                         4
#define   MSK32HDMI_sts_VCOCAL_VAL                            0x00003C00

#define     BA_HDMI_sts_VCOCAL_FAIL                        0x0001
#define     B16HDMI_sts_VCOCAL_FAIL                        0x0000
#define   LSb32HDMI_sts_VCOCAL_FAIL                           14
#define   LSb16HDMI_sts_VCOCAL_FAIL                           14
#define       bHDMI_sts_VCOCAL_FAIL                        1
#define   MSK32HDMI_sts_VCOCAL_FAIL                           0x00004000

#define     BA_HDMI_sts_PLL_AUX0                           0x0001
#define     B16HDMI_sts_PLL_AUX0                           0x0000
#define   LSb32HDMI_sts_PLL_AUX0                              15
#define   LSb16HDMI_sts_PLL_AUX0                              15
#define       bHDMI_sts_PLL_AUX0                           4
#define   MSK32HDMI_sts_PLL_AUX0                              0x00078000

#define     BA_HDMI_sts_LB_STATUS                          0x0002
#define     B16HDMI_sts_LB_STATUS                          0x0002
#define   LSb32HDMI_sts_LB_STATUS                             19
#define   LSb16HDMI_sts_LB_STATUS                             3
#define       bHDMI_sts_LB_STATUS                          8
#define   MSK32HDMI_sts_LB_STATUS                             0x07F80000
	///////////////////////////////////////////////////////////

	typedef struct SIE_HDMI_sts {
		///////////////////////////////////////////////////////////
#define   GET32HDMI_sts_AUX_STATUS_0(r32)                  _BFGET_(r32, 7, 0)
#define   SET32HDMI_sts_AUX_STATUS_0(r32,v)                _BFSET_(r32, 7, 0,v)
#define   GET16HDMI_sts_AUX_STATUS_0(r16)                  _BFGET_(r16, 7, 0)
#define   SET16HDMI_sts_AUX_STATUS_0(r16,v)                _BFSET_(r16, 7, 0,v)

#define   GET32HDMI_sts_PLL_LOCK(r32)                      _BFGET_(r32, 8, 8)
#define   SET32HDMI_sts_PLL_LOCK(r32,v)                    _BFSET_(r32, 8, 8,v)
#define   GET16HDMI_sts_PLL_LOCK(r16)                      _BFGET_(r16, 8, 8)
#define   SET16HDMI_sts_PLL_LOCK(r16,v)                    _BFSET_(r16, 8, 8,v)

#define   GET32HDMI_sts_VCOCAL_BUSY(r32)                   _BFGET_(r32, 9, 9)
#define   SET32HDMI_sts_VCOCAL_BUSY(r32,v)                 _BFSET_(r32, 9, 9,v)
#define   GET16HDMI_sts_VCOCAL_BUSY(r16)                   _BFGET_(r16, 9, 9)
#define   SET16HDMI_sts_VCOCAL_BUSY(r16,v)                 _BFSET_(r16, 9, 9,v)

#define   GET32HDMI_sts_VCOCAL_VAL(r32)                    _BFGET_(r32,13,10)
#define   SET32HDMI_sts_VCOCAL_VAL(r32,v)                  _BFSET_(r32,13,10,v)
#define   GET16HDMI_sts_VCOCAL_VAL(r16)                    _BFGET_(r16,13,10)
#define   SET16HDMI_sts_VCOCAL_VAL(r16,v)                  _BFSET_(r16,13,10,v)

#define   GET32HDMI_sts_VCOCAL_FAIL(r32)                   _BFGET_(r32,14,14)
#define   SET32HDMI_sts_VCOCAL_FAIL(r32,v)                 _BFSET_(r32,14,14,v)
#define   GET16HDMI_sts_VCOCAL_FAIL(r16)                   _BFGET_(r16,14,14)
#define   SET16HDMI_sts_VCOCAL_FAIL(r16,v)                 _BFSET_(r16,14,14,v)

#define   GET32HDMI_sts_PLL_AUX0(r32)                      _BFGET_(r32,18,15)
#define   SET32HDMI_sts_PLL_AUX0(r32,v)                    _BFSET_(r32,18,15,v)

#define   GET32HDMI_sts_LB_STATUS(r32)                     _BFGET_(r32,26,19)
#define   SET32HDMI_sts_LB_STATUS(r32,v)                   _BFSET_(r32,26,19,v)
#define   GET16HDMI_sts_LB_STATUS(r16)                     _BFGET_(r16,10, 3)
#define   SET16HDMI_sts_LB_STATUS(r16,v)                   _BFSET_(r16,10, 3,v)

		UNSG32 u_AUX_STATUS_0:8;
		UNSG32 u_PLL_LOCK:1;
		UNSG32 u_VCOCAL_BUSY:1;
		UNSG32 u_VCOCAL_VAL:4;
		UNSG32 u_VCOCAL_FAIL:1;
		UNSG32 u_PLL_AUX0:4;
		UNSG32 u_LB_STATUS:8;
		UNSG32 RSVDx0_b27:5;
		///////////////////////////////////////////////////////////
	} SIE_HDMI_sts;

	///////////////////////////////////////////////////////////
	SIGN32 HDMI_sts_drvrd(SIE_HDMI_sts * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst);
	SIGN32 HDMI_sts_drvwr(SIE_HDMI_sts * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst, UNSG32 * pcmd);
	void HDMI_sts_reset(SIE_HDMI_sts * p);
	SIGN32 HDMI_sts_cmp(SIE_HDMI_sts * p, SIE_HDMI_sts * pie, char *pfx,
			    void *hLOG, SIGN32 mem, SIGN32 tst);
#define HDMI_sts_check(p,pie,pfx,hLOG) HDMI_sts_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define HDMI_sts_print(p,    pfx,hLOG) HDMI_sts_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: HDMI_sts
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE ADAC_ctrl               biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 1  DAC_EN                    0x0
///                                    ###
///                                    * Audio DAC enable bit. This bit controls the analog section of audio DAC.
///                                    * DAC_EN = '0': DAC is powered down;
///                                    * DAC_EN = '1': DAC is powered up.
///                                    ###
///               %unsigned 1  MODE_SEL                  0x0
///                                    ###
///                                    * I2S mode select bit. See I2S timing diagram for details.
///                                    * MODE_SEL = '0': Mode 0 is chosen;
///                                    * MODE_SEL = '1' : Mode 1 is selected.
///                                    ###
///               %unsigned 1  RESET                     0x1
///                                    ###
///                                    * Reset bit for audio DAC logic. Active high.
///                                    ###
///               %unsigned 1  SE_EN                     0x0
///                                    ###
///                                    * Single-ended output mode enable bit.
///                                    ###
///               %unsigned 1  CP_EN                     0x0
///                                    ###
///                                    * Charge pump power up enable bit.
///                                    ###
///               %unsigned 2  OSR                       0x0
///                                    ###
///                                    * Oversample ratio of DAC, defined as MODCLK/LRCK
///                                    ###
///               %unsigned 3  TEST_SEL                  0x0
///                                    ###
///                                    * Select the analog test signal
///                                    ###
///               %unsigned 1  TEST_EN                   0x0
///                                    ###
///                                    * Enable test signals
///                                    ###
///               %unsigned 1  EN_TEST_ADAC              0x0
///                                    ###
///                                    * Audio DAC test enable
///                                    ###
///               %unsigned 2  CP_FREQ_SEL               0x0
///                                    ###
///                                    * program the charge pump clock
///                                    ###
///               %unsigned 2  CHOP_FREQ_SEL             0x0
///                                    ###
///                                    * program the chopper clock
///                                    ###
///               %%        16         # Stuffing bits...
///               %unsigned 20 DAC_RSVD_IN               0x2006
///                                    ###
///                                    * Reserved for DAC analog test purpose.
///                                    ###
///               %unsigned 1  TEST_MODE                 0x0
///                                    ###
///                                    * Test mode register
///                                    ###
///               %%        11         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      37b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADAC_ctrl
#define h_ADAC_ctrl (){}

#define     BA_ADAC_ctrl_DAC_EN                            0x0000
#define     B16ADAC_ctrl_DAC_EN                            0x0000
#define   LSb32ADAC_ctrl_DAC_EN                               0
#define   LSb16ADAC_ctrl_DAC_EN                               0
#define       bADAC_ctrl_DAC_EN                            1
#define   MSK32ADAC_ctrl_DAC_EN                               0x00000001

#define     BA_ADAC_ctrl_MODE_SEL                          0x0000
#define     B16ADAC_ctrl_MODE_SEL                          0x0000
#define   LSb32ADAC_ctrl_MODE_SEL                             1
#define   LSb16ADAC_ctrl_MODE_SEL                             1
#define       bADAC_ctrl_MODE_SEL                          1
#define   MSK32ADAC_ctrl_MODE_SEL                             0x00000002

#define     BA_ADAC_ctrl_RESET                             0x0000
#define     B16ADAC_ctrl_RESET                             0x0000
#define   LSb32ADAC_ctrl_RESET                                2
#define   LSb16ADAC_ctrl_RESET                                2
#define       bADAC_ctrl_RESET                             1
#define   MSK32ADAC_ctrl_RESET                                0x00000004

#define     BA_ADAC_ctrl_SE_EN                             0x0000
#define     B16ADAC_ctrl_SE_EN                             0x0000
#define   LSb32ADAC_ctrl_SE_EN                                3
#define   LSb16ADAC_ctrl_SE_EN                                3
#define       bADAC_ctrl_SE_EN                             1
#define   MSK32ADAC_ctrl_SE_EN                                0x00000008

#define     BA_ADAC_ctrl_CP_EN                             0x0000
#define     B16ADAC_ctrl_CP_EN                             0x0000
#define   LSb32ADAC_ctrl_CP_EN                                4
#define   LSb16ADAC_ctrl_CP_EN                                4
#define       bADAC_ctrl_CP_EN                             1
#define   MSK32ADAC_ctrl_CP_EN                                0x00000010

#define     BA_ADAC_ctrl_OSR                               0x0000
#define     B16ADAC_ctrl_OSR                               0x0000
#define   LSb32ADAC_ctrl_OSR                                  5
#define   LSb16ADAC_ctrl_OSR                                  5
#define       bADAC_ctrl_OSR                               2
#define   MSK32ADAC_ctrl_OSR                                  0x00000060

#define     BA_ADAC_ctrl_TEST_SEL                          0x0000
#define     B16ADAC_ctrl_TEST_SEL                          0x0000
#define   LSb32ADAC_ctrl_TEST_SEL                             7
#define   LSb16ADAC_ctrl_TEST_SEL                             7
#define       bADAC_ctrl_TEST_SEL                          3
#define   MSK32ADAC_ctrl_TEST_SEL                             0x00000380

#define     BA_ADAC_ctrl_TEST_EN                           0x0001
#define     B16ADAC_ctrl_TEST_EN                           0x0000
#define   LSb32ADAC_ctrl_TEST_EN                              10
#define   LSb16ADAC_ctrl_TEST_EN                              10
#define       bADAC_ctrl_TEST_EN                           1
#define   MSK32ADAC_ctrl_TEST_EN                              0x00000400

#define     BA_ADAC_ctrl_EN_TEST_ADAC                      0x0001
#define     B16ADAC_ctrl_EN_TEST_ADAC                      0x0000
#define   LSb32ADAC_ctrl_EN_TEST_ADAC                         11
#define   LSb16ADAC_ctrl_EN_TEST_ADAC                         11
#define       bADAC_ctrl_EN_TEST_ADAC                      1
#define   MSK32ADAC_ctrl_EN_TEST_ADAC                         0x00000800

#define     BA_ADAC_ctrl_CP_FREQ_SEL                       0x0001
#define     B16ADAC_ctrl_CP_FREQ_SEL                       0x0000
#define   LSb32ADAC_ctrl_CP_FREQ_SEL                          12
#define   LSb16ADAC_ctrl_CP_FREQ_SEL                          12
#define       bADAC_ctrl_CP_FREQ_SEL                       2
#define   MSK32ADAC_ctrl_CP_FREQ_SEL                          0x00003000

#define     BA_ADAC_ctrl_CHOP_FREQ_SEL                     0x0001
#define     B16ADAC_ctrl_CHOP_FREQ_SEL                     0x0000
#define   LSb32ADAC_ctrl_CHOP_FREQ_SEL                        14
#define   LSb16ADAC_ctrl_CHOP_FREQ_SEL                        14
#define       bADAC_ctrl_CHOP_FREQ_SEL                     2
#define   MSK32ADAC_ctrl_CHOP_FREQ_SEL                        0x0000C000

#define     BA_ADAC_ctrl_DAC_RSVD_IN                       0x0004
#define     B16ADAC_ctrl_DAC_RSVD_IN                       0x0004
#define   LSb32ADAC_ctrl_DAC_RSVD_IN                          0
#define   LSb16ADAC_ctrl_DAC_RSVD_IN                          0
#define       bADAC_ctrl_DAC_RSVD_IN                       20
#define   MSK32ADAC_ctrl_DAC_RSVD_IN                          0x000FFFFF

#define     BA_ADAC_ctrl_TEST_MODE                         0x0006
#define     B16ADAC_ctrl_TEST_MODE                         0x0006
#define   LSb32ADAC_ctrl_TEST_MODE                            20
#define   LSb16ADAC_ctrl_TEST_MODE                            4
#define       bADAC_ctrl_TEST_MODE                         1
#define   MSK32ADAC_ctrl_TEST_MODE                            0x00100000
	///////////////////////////////////////////////////////////

	typedef struct SIE_ADAC_ctrl {
		///////////////////////////////////////////////////////////
#define   GET32ADAC_ctrl_DAC_EN(r32)                       _BFGET_(r32, 0, 0)
#define   SET32ADAC_ctrl_DAC_EN(r32,v)                     _BFSET_(r32, 0, 0,v)
#define   GET16ADAC_ctrl_DAC_EN(r16)                       _BFGET_(r16, 0, 0)
#define   SET16ADAC_ctrl_DAC_EN(r16,v)                     _BFSET_(r16, 0, 0,v)

#define   GET32ADAC_ctrl_MODE_SEL(r32)                     _BFGET_(r32, 1, 1)
#define   SET32ADAC_ctrl_MODE_SEL(r32,v)                   _BFSET_(r32, 1, 1,v)
#define   GET16ADAC_ctrl_MODE_SEL(r16)                     _BFGET_(r16, 1, 1)
#define   SET16ADAC_ctrl_MODE_SEL(r16,v)                   _BFSET_(r16, 1, 1,v)

#define   GET32ADAC_ctrl_RESET(r32)                        _BFGET_(r32, 2, 2)
#define   SET32ADAC_ctrl_RESET(r32,v)                      _BFSET_(r32, 2, 2,v)
#define   GET16ADAC_ctrl_RESET(r16)                        _BFGET_(r16, 2, 2)
#define   SET16ADAC_ctrl_RESET(r16,v)                      _BFSET_(r16, 2, 2,v)

#define   GET32ADAC_ctrl_SE_EN(r32)                        _BFGET_(r32, 3, 3)
#define   SET32ADAC_ctrl_SE_EN(r32,v)                      _BFSET_(r32, 3, 3,v)
#define   GET16ADAC_ctrl_SE_EN(r16)                        _BFGET_(r16, 3, 3)
#define   SET16ADAC_ctrl_SE_EN(r16,v)                      _BFSET_(r16, 3, 3,v)

#define   GET32ADAC_ctrl_CP_EN(r32)                        _BFGET_(r32, 4, 4)
#define   SET32ADAC_ctrl_CP_EN(r32,v)                      _BFSET_(r32, 4, 4,v)
#define   GET16ADAC_ctrl_CP_EN(r16)                        _BFGET_(r16, 4, 4)
#define   SET16ADAC_ctrl_CP_EN(r16,v)                      _BFSET_(r16, 4, 4,v)

#define   GET32ADAC_ctrl_OSR(r32)                          _BFGET_(r32, 6, 5)
#define   SET32ADAC_ctrl_OSR(r32,v)                        _BFSET_(r32, 6, 5,v)
#define   GET16ADAC_ctrl_OSR(r16)                          _BFGET_(r16, 6, 5)
#define   SET16ADAC_ctrl_OSR(r16,v)                        _BFSET_(r16, 6, 5,v)

#define   GET32ADAC_ctrl_TEST_SEL(r32)                     _BFGET_(r32, 9, 7)
#define   SET32ADAC_ctrl_TEST_SEL(r32,v)                   _BFSET_(r32, 9, 7,v)
#define   GET16ADAC_ctrl_TEST_SEL(r16)                     _BFGET_(r16, 9, 7)
#define   SET16ADAC_ctrl_TEST_SEL(r16,v)                   _BFSET_(r16, 9, 7,v)

#define   GET32ADAC_ctrl_TEST_EN(r32)                      _BFGET_(r32,10,10)
#define   SET32ADAC_ctrl_TEST_EN(r32,v)                    _BFSET_(r32,10,10,v)
#define   GET16ADAC_ctrl_TEST_EN(r16)                      _BFGET_(r16,10,10)
#define   SET16ADAC_ctrl_TEST_EN(r16,v)                    _BFSET_(r16,10,10,v)

#define   GET32ADAC_ctrl_EN_TEST_ADAC(r32)                 _BFGET_(r32,11,11)
#define   SET32ADAC_ctrl_EN_TEST_ADAC(r32,v)               _BFSET_(r32,11,11,v)
#define   GET16ADAC_ctrl_EN_TEST_ADAC(r16)                 _BFGET_(r16,11,11)
#define   SET16ADAC_ctrl_EN_TEST_ADAC(r16,v)               _BFSET_(r16,11,11,v)

#define   GET32ADAC_ctrl_CP_FREQ_SEL(r32)                  _BFGET_(r32,13,12)
#define   SET32ADAC_ctrl_CP_FREQ_SEL(r32,v)                _BFSET_(r32,13,12,v)
#define   GET16ADAC_ctrl_CP_FREQ_SEL(r16)                  _BFGET_(r16,13,12)
#define   SET16ADAC_ctrl_CP_FREQ_SEL(r16,v)                _BFSET_(r16,13,12,v)

#define   GET32ADAC_ctrl_CHOP_FREQ_SEL(r32)                _BFGET_(r32,15,14)
#define   SET32ADAC_ctrl_CHOP_FREQ_SEL(r32,v)              _BFSET_(r32,15,14,v)
#define   GET16ADAC_ctrl_CHOP_FREQ_SEL(r16)                _BFGET_(r16,15,14)
#define   SET16ADAC_ctrl_CHOP_FREQ_SEL(r16,v)              _BFSET_(r16,15,14,v)

		UNSG32 u_DAC_EN:1;
		UNSG32 u_MODE_SEL:1;
		UNSG32 u_RESET:1;
		UNSG32 u_SE_EN:1;
		UNSG32 u_CP_EN:1;
		UNSG32 u_OSR:2;
		UNSG32 u_TEST_SEL:3;
		UNSG32 u_TEST_EN:1;
		UNSG32 u_EN_TEST_ADAC:1;
		UNSG32 u_CP_FREQ_SEL:2;
		UNSG32 u_CHOP_FREQ_SEL:2;
		UNSG32 RSVDx0_b16:16;
		///////////////////////////////////////////////////////////

#define   GET32ADAC_ctrl_DAC_RSVD_IN(r32)                  _BFGET_(r32,19, 0)
#define   SET32ADAC_ctrl_DAC_RSVD_IN(r32,v)                _BFSET_(r32,19, 0,v)

#define   GET32ADAC_ctrl_TEST_MODE(r32)                    _BFGET_(r32,20,20)
#define   SET32ADAC_ctrl_TEST_MODE(r32,v)                  _BFSET_(r32,20,20,v)
#define   GET16ADAC_ctrl_TEST_MODE(r16)                    _BFGET_(r16, 4, 4)
#define   SET16ADAC_ctrl_TEST_MODE(r16,v)                  _BFSET_(r16, 4, 4,v)

		UNSG32 u_DAC_RSVD_IN:20;
		UNSG32 u_TEST_MODE:1;
		UNSG32 RSVDx4_b21:11;
		///////////////////////////////////////////////////////////
	} SIE_ADAC_ctrl;

	///////////////////////////////////////////////////////////
	SIGN32 ADAC_ctrl_drvrd(SIE_ADAC_ctrl * p, UNSG32 base, SIGN32 mem,
			       SIGN32 tst);
	SIGN32 ADAC_ctrl_drvwr(SIE_ADAC_ctrl * p, UNSG32 base, SIGN32 mem,
			       SIGN32 tst, UNSG32 * pcmd);
	void ADAC_ctrl_reset(SIE_ADAC_ctrl * p);
	SIGN32 ADAC_ctrl_cmp(SIE_ADAC_ctrl * p, SIE_ADAC_ctrl * pie, char *pfx,
			     void *hLOG, SIGN32 mem, SIGN32 tst);
#define ADAC_ctrl_check(p,pie,pfx,hLOG) ADAC_ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define ADAC_ctrl_print(p,    pfx,hLOG) ADAC_ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADAC_ctrl
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE ADAC_sts                biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 status               (R-)
///               %unsigned 12 DAC_RSVD_OUT
///                                    ###
///                                    * Reserved for DAC test purpose
///                                    ###
///               %%        20         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      12b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADAC_sts
#define h_ADAC_sts (){}

#define     RA_ADAC_sts_status                             0x0000

#define     BA_ADAC_sts_status_DAC_RSVD_OUT                0x0000
#define     B16ADAC_sts_status_DAC_RSVD_OUT                0x0000
#define   LSb32ADAC_sts_status_DAC_RSVD_OUT                   0
#define   LSb16ADAC_sts_status_DAC_RSVD_OUT                   0
#define       bADAC_sts_status_DAC_RSVD_OUT                12
#define   MSK32ADAC_sts_status_DAC_RSVD_OUT                   0x00000FFF
	///////////////////////////////////////////////////////////

	typedef struct SIE_ADAC_sts {
		///////////////////////////////////////////////////////////
#define   GET32ADAC_sts_status_DAC_RSVD_OUT(r32)           _BFGET_(r32,11, 0)
#define   SET32ADAC_sts_status_DAC_RSVD_OUT(r32,v)         _BFSET_(r32,11, 0,v)
#define   GET16ADAC_sts_status_DAC_RSVD_OUT(r16)           _BFGET_(r16,11, 0)
#define   SET16ADAC_sts_status_DAC_RSVD_OUT(r16,v)         _BFSET_(r16,11, 0,v)

#define     w32ADAC_sts_status                             {\
            UNSG32 ustatus_DAC_RSVD_OUT                        : 12;\
            UNSG32 RSVDx0_b12                                  : 20;\
          }
		union {
			UNSG32 u32ADAC_sts_status;
			struct w32ADAC_sts_status;
		};
		///////////////////////////////////////////////////////////
	} SIE_ADAC_sts;

	typedef union T32ADAC_sts_status {
		UNSG32 u32;
		struct w32ADAC_sts_status;
	} T32ADAC_sts_status;
	///////////////////////////////////////////////////////////

	typedef union TADAC_sts_status {
		UNSG32 u32[1];
		struct {
			struct w32ADAC_sts_status;
		};
	} TADAC_sts_status;

	///////////////////////////////////////////////////////////
	SIGN32 ADAC_sts_drvrd(SIE_ADAC_sts * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst);
	SIGN32 ADAC_sts_drvwr(SIE_ADAC_sts * p, UNSG32 base, SIGN32 mem,
			      SIGN32 tst, UNSG32 * pcmd);
	void ADAC_sts_reset(SIE_ADAC_sts * p);
	SIGN32 ADAC_sts_cmp(SIE_ADAC_sts * p, SIE_ADAC_sts * pie, char *pfx,
			    void *hLOG, SIGN32 mem, SIGN32 tst);
#define ADAC_sts_check(p,pie,pfx,hLOG) ADAC_sts_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define ADAC_sts_print(p,    pfx,hLOG) ADAC_sts_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADAC_sts
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE AVIO_debug_ctrl         biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Ctrl0                (P)
///               %unsigned 4  debug_ctrl0               0x0
///                                    ###
///                                    * AVIO debug control [3:0] : connected to pad_pin_mux
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       4b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AVIO_debug_ctrl
#define h_AVIO_debug_ctrl (){}

#define     RA_AVIO_debug_ctrl_Ctrl0                       0x0000

#define     BA_AVIO_debug_ctrl_Ctrl0_debug_ctrl0           0x0000
#define     B16AVIO_debug_ctrl_Ctrl0_debug_ctrl0           0x0000
#define   LSb32AVIO_debug_ctrl_Ctrl0_debug_ctrl0              0
#define   LSb16AVIO_debug_ctrl_Ctrl0_debug_ctrl0              0
#define       bAVIO_debug_ctrl_Ctrl0_debug_ctrl0           4
#define   MSK32AVIO_debug_ctrl_Ctrl0_debug_ctrl0              0x0000000F
	///////////////////////////////////////////////////////////

	typedef struct SIE_AVIO_debug_ctrl {
		///////////////////////////////////////////////////////////
#define   GET32AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r32)      _BFGET_(r32, 3, 0)
#define   SET32AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r32,v)    _BFSET_(r32, 3, 0,v)
#define   GET16AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r16)      _BFGET_(r16, 3, 0)
#define   SET16AVIO_debug_ctrl_Ctrl0_debug_ctrl0(r16,v)    _BFSET_(r16, 3, 0,v)

#define     w32AVIO_debug_ctrl_Ctrl0                       {\
            UNSG32 uCtrl0_debug_ctrl0                          :  4;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
		union {
			UNSG32 u32AVIO_debug_ctrl_Ctrl0;
			struct w32AVIO_debug_ctrl_Ctrl0;
		};
		///////////////////////////////////////////////////////////
	} SIE_AVIO_debug_ctrl;

	typedef union T32AVIO_debug_ctrl_Ctrl0 {
		UNSG32 u32;
		struct w32AVIO_debug_ctrl_Ctrl0;
	} T32AVIO_debug_ctrl_Ctrl0;
	///////////////////////////////////////////////////////////

	typedef union TAVIO_debug_ctrl_Ctrl0 {
		UNSG32 u32[1];
		struct {
			struct w32AVIO_debug_ctrl_Ctrl0;
		};
	} TAVIO_debug_ctrl_Ctrl0;

	///////////////////////////////////////////////////////////
	SIGN32 AVIO_debug_ctrl_drvrd(SIE_AVIO_debug_ctrl * p, UNSG32 base,
				     SIGN32 mem, SIGN32 tst);
	SIGN32 AVIO_debug_ctrl_drvwr(SIE_AVIO_debug_ctrl * p, UNSG32 base,
				     SIGN32 mem, SIGN32 tst, UNSG32 * pcmd);
	void AVIO_debug_ctrl_reset(SIE_AVIO_debug_ctrl * p);
	SIGN32 AVIO_debug_ctrl_cmp(SIE_AVIO_debug_ctrl * p,
				   SIE_AVIO_debug_ctrl * pie, char *pfx,
				   void *hLOG, SIGN32 mem, SIGN32 tst);
#define AVIO_debug_ctrl_check(p,pie,pfx,hLOG) AVIO_debug_ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define AVIO_debug_ctrl_print(p,    pfx,hLOG) AVIO_debug_ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AVIO_debug_ctrl
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE avioGbl                 biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 AVPLLA
///               $avPll               AVPLLA            REG
///                                    ###
///                                    * All the registers for AVPLL-A.
///                                    ###
///     @ 0x000A8                      (P)
///     # 0x000A8 VDAC_ctrl
///               $VDAC_ctrl           VDAC_ctrl         REG
///     @ 0x000B8                      (P)
///     # 0x000B8 VDAC_sts
///               $VDAC_sts            VDAC_sts          REG
///     @ 0x000BC                      (P)
///     # 0x000BC ADAC_ctrl
///               $ADAC_ctrl           ADAC_ctrl         REG
///     @ 0x000C4                      (P)
///     # 0x000C4 ADAC_sts
///               $ADAC_sts            ADAC_sts          REG
///     @ 0x000C8                      (P)
///     # 0x000C8 HDMI_ctrl
///               $HDMI_ctrl           HDMI_ctrl         REG
///     @ 0x000E4                      (P)
///     # 0x000E4 HDMI_sts
///               $HDMI_sts            HDMI_sts          REG
///     @ 0x000E8                      (P)
///     # 0x000E8 AVIO_debug_ctrl
///               $AVIO_debug_ctrl     AVIO_debug_ctrl   REG
///     @ 0x000EC AVPLLA_CLK_EN        (P)
///               %unsigned 6  ctrl                      0x0
///                                    ###
///                                    * Gates the output of AVPLL-A before it is passed to any logic. One bit for each channel. Bit#0 is for Channel1, Bit#1 is for Channel2, ... Bit#5 is for Channel6. Channel7 is for HDMI PHY and there is no gating on that clock.
///                                    * 0: Disable channel output
///                                    * 1: Enable channel output
///                                    * SW should program this bit as 1 after programming the respective AVPLL-A channel to make sure that clean clock is passed to the logic.
///                                    ###
///               %unsigned 1  dbg_mux_sel               0x0
///                                    ###
///                                    * 0: CLKOUT_TSTfrom AVPLL is connected to Clock Debug pin.
///                                    * 1:CLKOUT_C1 from AVPLL is connected to Clock Debug pin.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x000F0 VCLK0_CTRL           (P)
///               %unsigned 1  extClkSel                 0x0
///                                    ###
///                                    * Select External clock source or PLL output for vClk0.
///                                    * 0: Select AVPLL output
///                                    * 1: Select external clock source (please refer to pinlist to know which pin is used for bypass clock)
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x000F4 VCLK1_CTRL           (P)
///               %unsigned 1  extClkSel                 0x0
///                                    ###
///                                    * Select External clock source or PLL output for vClk1.
///                                    * 0: Select AVPLL output
///                                    * 1: Select external clock source (please refer to pinlist to know which pin is used for bypass clock)
///                                    ###
///               %unsigned 1  pllSel                    0x0
///                                    ###
///                                    * Select Video Source for vClk1 (CPCB1 clock)
///                                    * 0: Select AVPLL-A[2] as source
///                                    * 1: Select AVPLL-B[2] as source
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x000F8 VCLK2_CTRL           (P)
///               %unsigned 1  extClkSel                 0x0
///                                    ###
///                                    * Select External clock source or PLL output for vClk2.
///                                    * 0: Select AVPLL output
///                                    * 1: Select external clock source (please refer to pinlist to know which pin is used for bypass clock)
///                                    ###
///               %unsigned 1  pllSel                    0x0
///                                    ###
///                                    * Select Video source for vClk1 (CPCB2 clock)
///                                    * 0: Select AVPLL-B[1] as source
///                                    * 1: Select AVPLL-A[5] as source
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x000FC ACLK0_CTRL           (P)
///               ###
///               * Clock controls for Audio0 clock (Primary Audio Output – I2S0),
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %unsigned 1  srcSel                    0x0
///                                    ###
///                                    * 0: AVPLL-A[3] is used as clock source
///                                    * 1: AVPLL-A[4] is used as clock source
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00100 ACLK1_CTRL           (P)
///               ###
///               * Clock controls for Audio1 clock (Secondary Audio Output – I2S1).
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %unsigned 1  pllSel                    0x0
///                                    ###
///                                    * 0: Select AVPLL-B[3] as source
///                                    * 1: Select AVPLL-A[3] as source
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00104 ACLK2_CTRL           (P)
///               ###
///               * Clock Controls for Audio2 clock (Audio input – I2S2).
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %%        27         # Stuffing bits...
///     @ 0x00108 ACLK3_CTRL           (P)
///               ###
///               * Clock controls for Audio3 clock (SPDIF output)
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %%        27         # Stuffing bits...
///     @ 0x0010C ACLK4_CTRL           (P)
///               ###
///               * Clock controls for Audio4 clock (MIC 7.1 output)
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %%        27         # Stuffing bits...
///     @ 0x00110 DRM_VCLK_CTRL        (P)
///               ###
///               * Clock controls for DRM_VCLK
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %unsigned 1  clkEn                     0x0
///                                    ###
///                                    * Clock enable for DRM Vclk0.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00114 HDMIRX_VCLK_CTRL     (P)
///               ###
///               * Clock controls for HDMIRX_VCLK
///               ###
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0.
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %unsigned 1  clkEn                     0x0
///                                    ###
///                                    * Clock enable for HDMIRX Vclk0.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00118 SWRST_CTRL           (P-)
///               ###
///               * Soft resets for various blocks inside AVIO.
///               ###
///               %unsigned 1  audio0SyncRstn            0x1
///                                    ###
///                                    * Reset control for Primary Audio Output (I2S0).
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  audio1SyncRstn            0x1
///                                    ###
///                                    * Reset for Secondary Audio Output (I2S1).
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  audio2SyncRstn            0x1
///                                    ###
///                                    * Reset for SPDIF Output.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  audio3SyncRstn            0x1
///                                    ###
///                                    * Reset for 7.1 Audio Input (I2S2).
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  audio4SyncRstn            0x1
///                                    ###
///                                    * Reset for 4-channel Audio Input (I2S3).
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  audioHdSyncRstn           0x1
///                                    ###
///                                    * Reset for HDMI Audio Output.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  spdifRxSyncRstn           0x1
///                                    ###
///                                    * Reset for SPDIF Input.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  vppSyncRstn               0x1
///                                    ###
///                                    * Reset for all the logic that works on vppSysClk (FE and SCL)
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  eddcSyncRstn              0x1
///                                    ###
///                                    * Reset for EDDC module.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  appSyncRstn               0x1
///                                    ###
///                                    * Reset for APP module.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  biuSyncRstn               0x1
///                                    ###
///                                    * Reset for VPP BIU and HDMI-Tx BIU.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  CarDeintSyncRstn          0x1
///                                    ###
///                                    * Reset for CAR & Dient Module.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  hdmiRxSyncRstn            0x1
///                                    ###
///                                    * Reset for HDMIRX Module.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  fpllSyncRstn              0x1
///                                    ###
///                                    * Reset for fpll inside HDMIRX Module.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  vipPipeSyncRstn           0x1
///                                    ###
///                                    * Reset for fpll inside HDMIRX Module.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  scl1dSbSyncRstn           0x1
///                                    ###
///                                    * Reset for 1D scalar inside HDMIRX Pipe.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %unsigned 1  mclkspfClkRstn            0x1
///                                    ###
///                                    * Reset for SPDIF-TX audio on mclk.
///                                    * 1: de-assert reset
///                                    * 0: Assert reset
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x0011C SWPDWN_CTRL          (P-)
///               %unsigned 1  hdmirx_PDWN               0x0
///               %unsigned 1  hdmitx_PDWN               0x0
///               %unsigned 1  aio64bDhub_PDWN           0x0
///               %unsigned 1  vpp128bDhub_PDWN          0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  hdmirx_PDLVMC             0x0
///               %unsigned 1  hdmitx_PDLVMC             0x0
///               %unsigned 1  aio64bDhub_PDLVMC         0x0
///               %unsigned 1  vpp128bDhub_PDLVMC        0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  hdmirx_PDFVSSM            0x0
///               %unsigned 1  hdmitx_PDFVSSM            0x0
///               %unsigned 1  aio64bDhub_PDFVSSM        0x0
///               %unsigned 1  vpp128bDhub_PDFVSSM       0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00120 HDMI_CLK_EN          (P)
///               ###
///               * Clock gating for HDMI Tx and EDDC Master
///               ###
///               %unsigned 1  HdmiTx                    0x1
///                                    ###
///                                    * 1: Enable Clock gating
///                                    * 0: Disable Clock gating
///                                    ###
///               %unsigned 1  EddcMaster                0x1
///                                    ###
///                                    * 1: Enable Clock gating
///                                    * 0: Disable Clock gating
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00124 RWTC_31to0           (P)
///               ###
///               * rwtcBus[31:0]**INTERNAL_ONLY**
///               ###
///               %unsigned 32 value                     0x999955AA
///                                    ###
///                                    * RTWC [31:0] value for AVIO internal memories.
///                                    ###
///     @ 0x00128 RWTC_57to32          (P)
///               ###
///               * rwtcBus[57:32]**INTERNAL_ONLY**
///               ###
///               %unsigned 26 value                     0x155575A
///                                    ###
///                                    * RTWC [57:32] value for AVIO internal memories.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0012C VIPPIPECLK_CTRL      (P)
///               %unsigned 1  vipClkSel                 0x1
///                                    ###
///                                    * 0: select hdmirxClk
///                                    * 1: select vipPipeClk
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     304B, bits:    1318b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_avioGbl
#define h_avioGbl (){}

#define     RA_avioGbl_AVPLLA                              0x0000
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_VDAC_ctrl                           0x00A8
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_VDAC_sts                            0x00B8
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ADAC_ctrl                           0x00BC
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ADAC_sts                            0x00C4
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_HDMI_ctrl                           0x00C8
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_HDMI_sts                            0x00E4
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_AVIO_debug_ctrl                     0x00E8
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_AVPLLA_CLK_EN                       0x00EC

#define     BA_avioGbl_AVPLLA_CLK_EN_ctrl                  0x00EC
#define     B16avioGbl_AVPLLA_CLK_EN_ctrl                  0x00EC
#define   LSb32avioGbl_AVPLLA_CLK_EN_ctrl                     0
#define   LSb16avioGbl_AVPLLA_CLK_EN_ctrl                     0
#define       bavioGbl_AVPLLA_CLK_EN_ctrl                  6
#define   MSK32avioGbl_AVPLLA_CLK_EN_ctrl                     0x0000003F

#define     BA_avioGbl_AVPLLA_CLK_EN_dbg_mux_sel           0x00EC
#define     B16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel           0x00EC
#define   LSb32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel              6
#define   LSb16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel              6
#define       bavioGbl_AVPLLA_CLK_EN_dbg_mux_sel           1
#define   MSK32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel              0x00000040
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_VCLK0_CTRL                          0x00F0

#define     BA_avioGbl_VCLK0_CTRL_extClkSel                0x00F0
#define     B16avioGbl_VCLK0_CTRL_extClkSel                0x00F0
#define   LSb32avioGbl_VCLK0_CTRL_extClkSel                   0
#define   LSb16avioGbl_VCLK0_CTRL_extClkSel                   0
#define       bavioGbl_VCLK0_CTRL_extClkSel                1
#define   MSK32avioGbl_VCLK0_CTRL_extClkSel                   0x00000001
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_VCLK1_CTRL                          0x00F4

#define     BA_avioGbl_VCLK1_CTRL_extClkSel                0x00F4
#define     B16avioGbl_VCLK1_CTRL_extClkSel                0x00F4
#define   LSb32avioGbl_VCLK1_CTRL_extClkSel                   0
#define   LSb16avioGbl_VCLK1_CTRL_extClkSel                   0
#define       bavioGbl_VCLK1_CTRL_extClkSel                1
#define   MSK32avioGbl_VCLK1_CTRL_extClkSel                   0x00000001

#define     BA_avioGbl_VCLK1_CTRL_pllSel                   0x00F4
#define     B16avioGbl_VCLK1_CTRL_pllSel                   0x00F4
#define   LSb32avioGbl_VCLK1_CTRL_pllSel                      1
#define   LSb16avioGbl_VCLK1_CTRL_pllSel                      1
#define       bavioGbl_VCLK1_CTRL_pllSel                   1
#define   MSK32avioGbl_VCLK1_CTRL_pllSel                      0x00000002
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_VCLK2_CTRL                          0x00F8

#define     BA_avioGbl_VCLK2_CTRL_extClkSel                0x00F8
#define     B16avioGbl_VCLK2_CTRL_extClkSel                0x00F8
#define   LSb32avioGbl_VCLK2_CTRL_extClkSel                   0
#define   LSb16avioGbl_VCLK2_CTRL_extClkSel                   0
#define       bavioGbl_VCLK2_CTRL_extClkSel                1
#define   MSK32avioGbl_VCLK2_CTRL_extClkSel                   0x00000001

#define     BA_avioGbl_VCLK2_CTRL_pllSel                   0x00F8
#define     B16avioGbl_VCLK2_CTRL_pllSel                   0x00F8
#define   LSb32avioGbl_VCLK2_CTRL_pllSel                      1
#define   LSb16avioGbl_VCLK2_CTRL_pllSel                      1
#define       bavioGbl_VCLK2_CTRL_pllSel                   1
#define   MSK32avioGbl_VCLK2_CTRL_pllSel                      0x00000002
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ACLK0_CTRL                          0x00FC

#define     BA_avioGbl_ACLK0_CTRL_clkSwitch                0x00FC
#define     B16avioGbl_ACLK0_CTRL_clkSwitch                0x00FC
#define   LSb32avioGbl_ACLK0_CTRL_clkSwitch                   0
#define   LSb16avioGbl_ACLK0_CTRL_clkSwitch                   0
#define       bavioGbl_ACLK0_CTRL_clkSwitch                1
#define   MSK32avioGbl_ACLK0_CTRL_clkSwitch                   0x00000001

#define     BA_avioGbl_ACLK0_CTRL_clkD3Switch              0x00FC
#define     B16avioGbl_ACLK0_CTRL_clkD3Switch              0x00FC
#define   LSb32avioGbl_ACLK0_CTRL_clkD3Switch                 1
#define   LSb16avioGbl_ACLK0_CTRL_clkD3Switch                 1
#define       bavioGbl_ACLK0_CTRL_clkD3Switch              1
#define   MSK32avioGbl_ACLK0_CTRL_clkD3Switch                 0x00000002

#define     BA_avioGbl_ACLK0_CTRL_clkSel                   0x00FC
#define     B16avioGbl_ACLK0_CTRL_clkSel                   0x00FC
#define   LSb32avioGbl_ACLK0_CTRL_clkSel                      2
#define   LSb16avioGbl_ACLK0_CTRL_clkSel                      2
#define       bavioGbl_ACLK0_CTRL_clkSel                   3
#define   MSK32avioGbl_ACLK0_CTRL_clkSel                      0x0000001C
#define        avioGbl_ACLK0_CTRL_clkSel_d2                             0x1
#define        avioGbl_ACLK0_CTRL_clkSel_d4                             0x2
#define        avioGbl_ACLK0_CTRL_clkSel_d6                             0x3
#define        avioGbl_ACLK0_CTRL_clkSel_d8                             0x4
#define        avioGbl_ACLK0_CTRL_clkSel_d12                            0x5

#define     BA_avioGbl_ACLK0_CTRL_srcSel                   0x00FC
#define     B16avioGbl_ACLK0_CTRL_srcSel                   0x00FC
#define   LSb32avioGbl_ACLK0_CTRL_srcSel                      5
#define   LSb16avioGbl_ACLK0_CTRL_srcSel                      5
#define       bavioGbl_ACLK0_CTRL_srcSel                   1
#define   MSK32avioGbl_ACLK0_CTRL_srcSel                      0x00000020
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ACLK1_CTRL                          0x0100

#define     BA_avioGbl_ACLK1_CTRL_clkSwitch                0x0100
#define     B16avioGbl_ACLK1_CTRL_clkSwitch                0x0100
#define   LSb32avioGbl_ACLK1_CTRL_clkSwitch                   0
#define   LSb16avioGbl_ACLK1_CTRL_clkSwitch                   0
#define       bavioGbl_ACLK1_CTRL_clkSwitch                1
#define   MSK32avioGbl_ACLK1_CTRL_clkSwitch                   0x00000001

#define     BA_avioGbl_ACLK1_CTRL_clkD3Switch              0x0100
#define     B16avioGbl_ACLK1_CTRL_clkD3Switch              0x0100
#define   LSb32avioGbl_ACLK1_CTRL_clkD3Switch                 1
#define   LSb16avioGbl_ACLK1_CTRL_clkD3Switch                 1
#define       bavioGbl_ACLK1_CTRL_clkD3Switch              1
#define   MSK32avioGbl_ACLK1_CTRL_clkD3Switch                 0x00000002

#define     BA_avioGbl_ACLK1_CTRL_clkSel                   0x0100
#define     B16avioGbl_ACLK1_CTRL_clkSel                   0x0100
#define   LSb32avioGbl_ACLK1_CTRL_clkSel                      2
#define   LSb16avioGbl_ACLK1_CTRL_clkSel                      2
#define       bavioGbl_ACLK1_CTRL_clkSel                   3
#define   MSK32avioGbl_ACLK1_CTRL_clkSel                      0x0000001C
#define        avioGbl_ACLK1_CTRL_clkSel_d2                             0x1
#define        avioGbl_ACLK1_CTRL_clkSel_d4                             0x2
#define        avioGbl_ACLK1_CTRL_clkSel_d6                             0x3
#define        avioGbl_ACLK1_CTRL_clkSel_d8                             0x4
#define        avioGbl_ACLK1_CTRL_clkSel_d12                            0x5

#define     BA_avioGbl_ACLK1_CTRL_pllSel                   0x0100
#define     B16avioGbl_ACLK1_CTRL_pllSel                   0x0100
#define   LSb32avioGbl_ACLK1_CTRL_pllSel                      5
#define   LSb16avioGbl_ACLK1_CTRL_pllSel                      5
#define       bavioGbl_ACLK1_CTRL_pllSel                   1
#define   MSK32avioGbl_ACLK1_CTRL_pllSel                      0x00000020
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ACLK2_CTRL                          0x0104

#define     BA_avioGbl_ACLK2_CTRL_clkSwitch                0x0104
#define     B16avioGbl_ACLK2_CTRL_clkSwitch                0x0104
#define   LSb32avioGbl_ACLK2_CTRL_clkSwitch                   0
#define   LSb16avioGbl_ACLK2_CTRL_clkSwitch                   0
#define       bavioGbl_ACLK2_CTRL_clkSwitch                1
#define   MSK32avioGbl_ACLK2_CTRL_clkSwitch                   0x00000001

#define     BA_avioGbl_ACLK2_CTRL_clkD3Switch              0x0104
#define     B16avioGbl_ACLK2_CTRL_clkD3Switch              0x0104
#define   LSb32avioGbl_ACLK2_CTRL_clkD3Switch                 1
#define   LSb16avioGbl_ACLK2_CTRL_clkD3Switch                 1
#define       bavioGbl_ACLK2_CTRL_clkD3Switch              1
#define   MSK32avioGbl_ACLK2_CTRL_clkD3Switch                 0x00000002

#define     BA_avioGbl_ACLK2_CTRL_clkSel                   0x0104
#define     B16avioGbl_ACLK2_CTRL_clkSel                   0x0104
#define   LSb32avioGbl_ACLK2_CTRL_clkSel                      2
#define   LSb16avioGbl_ACLK2_CTRL_clkSel                      2
#define       bavioGbl_ACLK2_CTRL_clkSel                   3
#define   MSK32avioGbl_ACLK2_CTRL_clkSel                      0x0000001C
#define        avioGbl_ACLK2_CTRL_clkSel_d2                             0x1
#define        avioGbl_ACLK2_CTRL_clkSel_d4                             0x2
#define        avioGbl_ACLK2_CTRL_clkSel_d6                             0x3
#define        avioGbl_ACLK2_CTRL_clkSel_d8                             0x4
#define        avioGbl_ACLK2_CTRL_clkSel_d12                            0x5
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ACLK3_CTRL                          0x0108

#define     BA_avioGbl_ACLK3_CTRL_clkSwitch                0x0108
#define     B16avioGbl_ACLK3_CTRL_clkSwitch                0x0108
#define   LSb32avioGbl_ACLK3_CTRL_clkSwitch                   0
#define   LSb16avioGbl_ACLK3_CTRL_clkSwitch                   0
#define       bavioGbl_ACLK3_CTRL_clkSwitch                1
#define   MSK32avioGbl_ACLK3_CTRL_clkSwitch                   0x00000001

#define     BA_avioGbl_ACLK3_CTRL_clkD3Switch              0x0108
#define     B16avioGbl_ACLK3_CTRL_clkD3Switch              0x0108
#define   LSb32avioGbl_ACLK3_CTRL_clkD3Switch                 1
#define   LSb16avioGbl_ACLK3_CTRL_clkD3Switch                 1
#define       bavioGbl_ACLK3_CTRL_clkD3Switch              1
#define   MSK32avioGbl_ACLK3_CTRL_clkD3Switch                 0x00000002

#define     BA_avioGbl_ACLK3_CTRL_clkSel                   0x0108
#define     B16avioGbl_ACLK3_CTRL_clkSel                   0x0108
#define   LSb32avioGbl_ACLK3_CTRL_clkSel                      2
#define   LSb16avioGbl_ACLK3_CTRL_clkSel                      2
#define       bavioGbl_ACLK3_CTRL_clkSel                   3
#define   MSK32avioGbl_ACLK3_CTRL_clkSel                      0x0000001C
#define        avioGbl_ACLK3_CTRL_clkSel_d2                             0x1
#define        avioGbl_ACLK3_CTRL_clkSel_d4                             0x2
#define        avioGbl_ACLK3_CTRL_clkSel_d6                             0x3
#define        avioGbl_ACLK3_CTRL_clkSel_d8                             0x4
#define        avioGbl_ACLK3_CTRL_clkSel_d12                            0x5
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_ACLK4_CTRL                          0x010C

#define     BA_avioGbl_ACLK4_CTRL_clkSwitch                0x010C
#define     B16avioGbl_ACLK4_CTRL_clkSwitch                0x010C
#define   LSb32avioGbl_ACLK4_CTRL_clkSwitch                   0
#define   LSb16avioGbl_ACLK4_CTRL_clkSwitch                   0
#define       bavioGbl_ACLK4_CTRL_clkSwitch                1
#define   MSK32avioGbl_ACLK4_CTRL_clkSwitch                   0x00000001

#define     BA_avioGbl_ACLK4_CTRL_clkD3Switch              0x010C
#define     B16avioGbl_ACLK4_CTRL_clkD3Switch              0x010C
#define   LSb32avioGbl_ACLK4_CTRL_clkD3Switch                 1
#define   LSb16avioGbl_ACLK4_CTRL_clkD3Switch                 1
#define       bavioGbl_ACLK4_CTRL_clkD3Switch              1
#define   MSK32avioGbl_ACLK4_CTRL_clkD3Switch                 0x00000002

#define     BA_avioGbl_ACLK4_CTRL_clkSel                   0x010C
#define     B16avioGbl_ACLK4_CTRL_clkSel                   0x010C
#define   LSb32avioGbl_ACLK4_CTRL_clkSel                      2
#define   LSb16avioGbl_ACLK4_CTRL_clkSel                      2
#define       bavioGbl_ACLK4_CTRL_clkSel                   3
#define   MSK32avioGbl_ACLK4_CTRL_clkSel                      0x0000001C
#define        avioGbl_ACLK4_CTRL_clkSel_d2                             0x1
#define        avioGbl_ACLK4_CTRL_clkSel_d4                             0x2
#define        avioGbl_ACLK4_CTRL_clkSel_d6                             0x3
#define        avioGbl_ACLK4_CTRL_clkSel_d8                             0x4
#define        avioGbl_ACLK4_CTRL_clkSel_d12                            0x5
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_DRM_VCLK_CTRL                       0x0110

#define     BA_avioGbl_DRM_VCLK_CTRL_clkSwitch             0x0110
#define     B16avioGbl_DRM_VCLK_CTRL_clkSwitch             0x0110
#define   LSb32avioGbl_DRM_VCLK_CTRL_clkSwitch                0
#define   LSb16avioGbl_DRM_VCLK_CTRL_clkSwitch                0
#define       bavioGbl_DRM_VCLK_CTRL_clkSwitch             1
#define   MSK32avioGbl_DRM_VCLK_CTRL_clkSwitch                0x00000001

#define     BA_avioGbl_DRM_VCLK_CTRL_clkD3Switch           0x0110
#define     B16avioGbl_DRM_VCLK_CTRL_clkD3Switch           0x0110
#define   LSb32avioGbl_DRM_VCLK_CTRL_clkD3Switch              1
#define   LSb16avioGbl_DRM_VCLK_CTRL_clkD3Switch              1
#define       bavioGbl_DRM_VCLK_CTRL_clkD3Switch           1
#define   MSK32avioGbl_DRM_VCLK_CTRL_clkD3Switch              0x00000002

#define     BA_avioGbl_DRM_VCLK_CTRL_clkSel                0x0110
#define     B16avioGbl_DRM_VCLK_CTRL_clkSel                0x0110
#define   LSb32avioGbl_DRM_VCLK_CTRL_clkSel                   2
#define   LSb16avioGbl_DRM_VCLK_CTRL_clkSel                   2
#define       bavioGbl_DRM_VCLK_CTRL_clkSel                3
#define   MSK32avioGbl_DRM_VCLK_CTRL_clkSel                   0x0000001C
#define        avioGbl_DRM_VCLK_CTRL_clkSel_d2                          0x1
#define        avioGbl_DRM_VCLK_CTRL_clkSel_d4                          0x2
#define        avioGbl_DRM_VCLK_CTRL_clkSel_d6                          0x3
#define        avioGbl_DRM_VCLK_CTRL_clkSel_d8                          0x4
#define        avioGbl_DRM_VCLK_CTRL_clkSel_d12                         0x5

#define     BA_avioGbl_DRM_VCLK_CTRL_clkEn                 0x0110
#define     B16avioGbl_DRM_VCLK_CTRL_clkEn                 0x0110
#define   LSb32avioGbl_DRM_VCLK_CTRL_clkEn                    5
#define   LSb16avioGbl_DRM_VCLK_CTRL_clkEn                    5
#define       bavioGbl_DRM_VCLK_CTRL_clkEn                 1
#define   MSK32avioGbl_DRM_VCLK_CTRL_clkEn                    0x00000020
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_HDMIRX_VCLK_CTRL                    0x0114

#define     BA_avioGbl_HDMIRX_VCLK_CTRL_clkSwitch          0x0114
#define     B16avioGbl_HDMIRX_VCLK_CTRL_clkSwitch          0x0114
#define   LSb32avioGbl_HDMIRX_VCLK_CTRL_clkSwitch             0
#define   LSb16avioGbl_HDMIRX_VCLK_CTRL_clkSwitch             0
#define       bavioGbl_HDMIRX_VCLK_CTRL_clkSwitch          1
#define   MSK32avioGbl_HDMIRX_VCLK_CTRL_clkSwitch             0x00000001

#define     BA_avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch        0x0114
#define     B16avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch        0x0114
#define   LSb32avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch           1
#define   LSb16avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch           1
#define       bavioGbl_HDMIRX_VCLK_CTRL_clkD3Switch        1
#define   MSK32avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch           0x00000002

#define     BA_avioGbl_HDMIRX_VCLK_CTRL_clkSel             0x0114
#define     B16avioGbl_HDMIRX_VCLK_CTRL_clkSel             0x0114
#define   LSb32avioGbl_HDMIRX_VCLK_CTRL_clkSel                2
#define   LSb16avioGbl_HDMIRX_VCLK_CTRL_clkSel                2
#define       bavioGbl_HDMIRX_VCLK_CTRL_clkSel             3
#define   MSK32avioGbl_HDMIRX_VCLK_CTRL_clkSel                0x0000001C
#define        avioGbl_HDMIRX_VCLK_CTRL_clkSel_d2                       0x1
#define        avioGbl_HDMIRX_VCLK_CTRL_clkSel_d4                       0x2
#define        avioGbl_HDMIRX_VCLK_CTRL_clkSel_d6                       0x3
#define        avioGbl_HDMIRX_VCLK_CTRL_clkSel_d8                       0x4
#define        avioGbl_HDMIRX_VCLK_CTRL_clkSel_d12                      0x5

#define     BA_avioGbl_HDMIRX_VCLK_CTRL_clkEn              0x0114
#define     B16avioGbl_HDMIRX_VCLK_CTRL_clkEn              0x0114
#define   LSb32avioGbl_HDMIRX_VCLK_CTRL_clkEn                 5
#define   LSb16avioGbl_HDMIRX_VCLK_CTRL_clkEn                 5
#define       bavioGbl_HDMIRX_VCLK_CTRL_clkEn              1
#define   MSK32avioGbl_HDMIRX_VCLK_CTRL_clkEn                 0x00000020
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_SWRST_CTRL                          0x0118

#define     BA_avioGbl_SWRST_CTRL_audio0SyncRstn           0x0118
#define     B16avioGbl_SWRST_CTRL_audio0SyncRstn           0x0118
#define   LSb32avioGbl_SWRST_CTRL_audio0SyncRstn              0
#define   LSb16avioGbl_SWRST_CTRL_audio0SyncRstn              0
#define       bavioGbl_SWRST_CTRL_audio0SyncRstn           1
#define   MSK32avioGbl_SWRST_CTRL_audio0SyncRstn              0x00000001

#define     BA_avioGbl_SWRST_CTRL_audio1SyncRstn           0x0118
#define     B16avioGbl_SWRST_CTRL_audio1SyncRstn           0x0118
#define   LSb32avioGbl_SWRST_CTRL_audio1SyncRstn              1
#define   LSb16avioGbl_SWRST_CTRL_audio1SyncRstn              1
#define       bavioGbl_SWRST_CTRL_audio1SyncRstn           1
#define   MSK32avioGbl_SWRST_CTRL_audio1SyncRstn              0x00000002

#define     BA_avioGbl_SWRST_CTRL_audio2SyncRstn           0x0118
#define     B16avioGbl_SWRST_CTRL_audio2SyncRstn           0x0118
#define   LSb32avioGbl_SWRST_CTRL_audio2SyncRstn              2
#define   LSb16avioGbl_SWRST_CTRL_audio2SyncRstn              2
#define       bavioGbl_SWRST_CTRL_audio2SyncRstn           1
#define   MSK32avioGbl_SWRST_CTRL_audio2SyncRstn              0x00000004

#define     BA_avioGbl_SWRST_CTRL_audio3SyncRstn           0x0118
#define     B16avioGbl_SWRST_CTRL_audio3SyncRstn           0x0118
#define   LSb32avioGbl_SWRST_CTRL_audio3SyncRstn              3
#define   LSb16avioGbl_SWRST_CTRL_audio3SyncRstn              3
#define       bavioGbl_SWRST_CTRL_audio3SyncRstn           1
#define   MSK32avioGbl_SWRST_CTRL_audio3SyncRstn              0x00000008

#define     BA_avioGbl_SWRST_CTRL_audio4SyncRstn           0x0118
#define     B16avioGbl_SWRST_CTRL_audio4SyncRstn           0x0118
#define   LSb32avioGbl_SWRST_CTRL_audio4SyncRstn              4
#define   LSb16avioGbl_SWRST_CTRL_audio4SyncRstn              4
#define       bavioGbl_SWRST_CTRL_audio4SyncRstn           1
#define   MSK32avioGbl_SWRST_CTRL_audio4SyncRstn              0x00000010

#define     BA_avioGbl_SWRST_CTRL_audioHdSyncRstn          0x0118
#define     B16avioGbl_SWRST_CTRL_audioHdSyncRstn          0x0118
#define   LSb32avioGbl_SWRST_CTRL_audioHdSyncRstn             5
#define   LSb16avioGbl_SWRST_CTRL_audioHdSyncRstn             5
#define       bavioGbl_SWRST_CTRL_audioHdSyncRstn          1
#define   MSK32avioGbl_SWRST_CTRL_audioHdSyncRstn             0x00000020

#define     BA_avioGbl_SWRST_CTRL_spdifRxSyncRstn          0x0118
#define     B16avioGbl_SWRST_CTRL_spdifRxSyncRstn          0x0118
#define   LSb32avioGbl_SWRST_CTRL_spdifRxSyncRstn             6
#define   LSb16avioGbl_SWRST_CTRL_spdifRxSyncRstn             6
#define       bavioGbl_SWRST_CTRL_spdifRxSyncRstn          1
#define   MSK32avioGbl_SWRST_CTRL_spdifRxSyncRstn             0x00000040

#define     BA_avioGbl_SWRST_CTRL_vppSyncRstn              0x0118
#define     B16avioGbl_SWRST_CTRL_vppSyncRstn              0x0118
#define   LSb32avioGbl_SWRST_CTRL_vppSyncRstn                 7
#define   LSb16avioGbl_SWRST_CTRL_vppSyncRstn                 7
#define       bavioGbl_SWRST_CTRL_vppSyncRstn              1
#define   MSK32avioGbl_SWRST_CTRL_vppSyncRstn                 0x00000080

#define     BA_avioGbl_SWRST_CTRL_eddcSyncRstn             0x0119
#define     B16avioGbl_SWRST_CTRL_eddcSyncRstn             0x0118
#define   LSb32avioGbl_SWRST_CTRL_eddcSyncRstn                8
#define   LSb16avioGbl_SWRST_CTRL_eddcSyncRstn                8
#define       bavioGbl_SWRST_CTRL_eddcSyncRstn             1
#define   MSK32avioGbl_SWRST_CTRL_eddcSyncRstn                0x00000100

#define     BA_avioGbl_SWRST_CTRL_appSyncRstn              0x0119
#define     B16avioGbl_SWRST_CTRL_appSyncRstn              0x0118
#define   LSb32avioGbl_SWRST_CTRL_appSyncRstn                 9
#define   LSb16avioGbl_SWRST_CTRL_appSyncRstn                 9
#define       bavioGbl_SWRST_CTRL_appSyncRstn              1
#define   MSK32avioGbl_SWRST_CTRL_appSyncRstn                 0x00000200

#define     BA_avioGbl_SWRST_CTRL_biuSyncRstn              0x0119
#define     B16avioGbl_SWRST_CTRL_biuSyncRstn              0x0118
#define   LSb32avioGbl_SWRST_CTRL_biuSyncRstn                 10
#define   LSb16avioGbl_SWRST_CTRL_biuSyncRstn                 10
#define       bavioGbl_SWRST_CTRL_biuSyncRstn              1
#define   MSK32avioGbl_SWRST_CTRL_biuSyncRstn                 0x00000400

#define     BA_avioGbl_SWRST_CTRL_CarDeintSyncRstn         0x0119
#define     B16avioGbl_SWRST_CTRL_CarDeintSyncRstn         0x0118
#define   LSb32avioGbl_SWRST_CTRL_CarDeintSyncRstn            11
#define   LSb16avioGbl_SWRST_CTRL_CarDeintSyncRstn            11
#define       bavioGbl_SWRST_CTRL_CarDeintSyncRstn         1
#define   MSK32avioGbl_SWRST_CTRL_CarDeintSyncRstn            0x00000800

#define     BA_avioGbl_SWRST_CTRL_hdmiRxSyncRstn           0x0119
#define     B16avioGbl_SWRST_CTRL_hdmiRxSyncRstn           0x0118
#define   LSb32avioGbl_SWRST_CTRL_hdmiRxSyncRstn              12
#define   LSb16avioGbl_SWRST_CTRL_hdmiRxSyncRstn              12
#define       bavioGbl_SWRST_CTRL_hdmiRxSyncRstn           1
#define   MSK32avioGbl_SWRST_CTRL_hdmiRxSyncRstn              0x00001000

#define     BA_avioGbl_SWRST_CTRL_fpllSyncRstn             0x0119
#define     B16avioGbl_SWRST_CTRL_fpllSyncRstn             0x0118
#define   LSb32avioGbl_SWRST_CTRL_fpllSyncRstn                13
#define   LSb16avioGbl_SWRST_CTRL_fpllSyncRstn                13
#define       bavioGbl_SWRST_CTRL_fpllSyncRstn             1
#define   MSK32avioGbl_SWRST_CTRL_fpllSyncRstn                0x00002000

#define     BA_avioGbl_SWRST_CTRL_vipPipeSyncRstn          0x0119
#define     B16avioGbl_SWRST_CTRL_vipPipeSyncRstn          0x0118
#define   LSb32avioGbl_SWRST_CTRL_vipPipeSyncRstn             14
#define   LSb16avioGbl_SWRST_CTRL_vipPipeSyncRstn             14
#define       bavioGbl_SWRST_CTRL_vipPipeSyncRstn          1
#define   MSK32avioGbl_SWRST_CTRL_vipPipeSyncRstn             0x00004000

#define     BA_avioGbl_SWRST_CTRL_scl1dSbSyncRstn          0x0119
#define     B16avioGbl_SWRST_CTRL_scl1dSbSyncRstn          0x0118
#define   LSb32avioGbl_SWRST_CTRL_scl1dSbSyncRstn             15
#define   LSb16avioGbl_SWRST_CTRL_scl1dSbSyncRstn             15
#define       bavioGbl_SWRST_CTRL_scl1dSbSyncRstn          1
#define   MSK32avioGbl_SWRST_CTRL_scl1dSbSyncRstn             0x00008000

#define     BA_avioGbl_SWRST_CTRL_mclkspfClkRstn           0x011A
#define     B16avioGbl_SWRST_CTRL_mclkspfClkRstn           0x011A
#define   LSb32avioGbl_SWRST_CTRL_mclkspfClkRstn              16
#define   LSb16avioGbl_SWRST_CTRL_mclkspfClkRstn              0
#define       bavioGbl_SWRST_CTRL_mclkspfClkRstn           1
#define   MSK32avioGbl_SWRST_CTRL_mclkspfClkRstn              0x00010000
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_SWPDWN_CTRL                         0x011C

#define     BA_avioGbl_SWPDWN_CTRL_hdmirx_PDWN             0x011C
#define     B16avioGbl_SWPDWN_CTRL_hdmirx_PDWN             0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_hdmirx_PDWN                0
#define   LSb16avioGbl_SWPDWN_CTRL_hdmirx_PDWN                0
#define       bavioGbl_SWPDWN_CTRL_hdmirx_PDWN             1
#define   MSK32avioGbl_SWPDWN_CTRL_hdmirx_PDWN                0x00000001

#define     BA_avioGbl_SWPDWN_CTRL_hdmitx_PDWN             0x011C
#define     B16avioGbl_SWPDWN_CTRL_hdmitx_PDWN             0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_hdmitx_PDWN                1
#define   LSb16avioGbl_SWPDWN_CTRL_hdmitx_PDWN                1
#define       bavioGbl_SWPDWN_CTRL_hdmitx_PDWN             1
#define   MSK32avioGbl_SWPDWN_CTRL_hdmitx_PDWN                0x00000002

#define     BA_avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN         0x011C
#define     B16avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN         0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN            2
#define   LSb16avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN            2
#define       bavioGbl_SWPDWN_CTRL_aio64bDhub_PDWN         1
#define   MSK32avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN            0x00000004

#define     BA_avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN        0x011C
#define     B16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN        0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN           3
#define   LSb16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN           3
#define       bavioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN        1
#define   MSK32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN           0x00000008

#define     BA_avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC           0x011C
#define     B16avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC           0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC              4
#define   LSb16avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC              4
#define       bavioGbl_SWPDWN_CTRL_hdmirx_PDLVMC           1
#define   MSK32avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC              0x00000010

#define     BA_avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC           0x011C
#define     B16avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC           0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC              5
#define   LSb16avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC              5
#define       bavioGbl_SWPDWN_CTRL_hdmitx_PDLVMC           1
#define   MSK32avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC              0x00000020

#define     BA_avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC       0x011C
#define     B16avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC       0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC          6
#define   LSb16avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC          6
#define       bavioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC       1
#define   MSK32avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC          0x00000040

#define     BA_avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC      0x011C
#define     B16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC      0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC         7
#define   LSb16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC         7
#define       bavioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC      1
#define   MSK32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC         0x00000080

#define     BA_avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM          0x011D
#define     B16avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM          0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM             8
#define   LSb16avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM             8
#define       bavioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM          1
#define   MSK32avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM             0x00000100

#define     BA_avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM          0x011D
#define     B16avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM          0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM             9
#define   LSb16avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM             9
#define       bavioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM          1
#define   MSK32avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM             0x00000200

#define     BA_avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM      0x011D
#define     B16avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM      0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM         10
#define   LSb16avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM         10
#define       bavioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM      1
#define   MSK32avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM         0x00000400

#define     BA_avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM     0x011D
#define     B16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM     0x011C
#define   LSb32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM        11
#define   LSb16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM        11
#define       bavioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM     1
#define   MSK32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM        0x00000800
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_HDMI_CLK_EN                         0x0120

#define     BA_avioGbl_HDMI_CLK_EN_HdmiTx                  0x0120
#define     B16avioGbl_HDMI_CLK_EN_HdmiTx                  0x0120
#define   LSb32avioGbl_HDMI_CLK_EN_HdmiTx                     0
#define   LSb16avioGbl_HDMI_CLK_EN_HdmiTx                     0
#define       bavioGbl_HDMI_CLK_EN_HdmiTx                  1
#define   MSK32avioGbl_HDMI_CLK_EN_HdmiTx                     0x00000001

#define     BA_avioGbl_HDMI_CLK_EN_EddcMaster              0x0120
#define     B16avioGbl_HDMI_CLK_EN_EddcMaster              0x0120
#define   LSb32avioGbl_HDMI_CLK_EN_EddcMaster                 1
#define   LSb16avioGbl_HDMI_CLK_EN_EddcMaster                 1
#define       bavioGbl_HDMI_CLK_EN_EddcMaster              1
#define   MSK32avioGbl_HDMI_CLK_EN_EddcMaster                 0x00000002
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_RWTC_31to0                          0x0124

#define     BA_avioGbl_RWTC_31to0_value                    0x0124
#define     B16avioGbl_RWTC_31to0_value                    0x0124
#define   LSb32avioGbl_RWTC_31to0_value                       0
#define   LSb16avioGbl_RWTC_31to0_value                       0
#define       bavioGbl_RWTC_31to0_value                    32
#define   MSK32avioGbl_RWTC_31to0_value                       0xFFFFFFFF
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_RWTC_57to32                         0x0128

#define     BA_avioGbl_RWTC_57to32_value                   0x0128
#define     B16avioGbl_RWTC_57to32_value                   0x0128
#define   LSb32avioGbl_RWTC_57to32_value                      0
#define   LSb16avioGbl_RWTC_57to32_value                      0
#define       bavioGbl_RWTC_57to32_value                   26
#define   MSK32avioGbl_RWTC_57to32_value                      0x03FFFFFF
	///////////////////////////////////////////////////////////
#define     RA_avioGbl_VIPPIPECLK_CTRL                     0x012C

#define     BA_avioGbl_VIPPIPECLK_CTRL_vipClkSel           0x012C
#define     B16avioGbl_VIPPIPECLK_CTRL_vipClkSel           0x012C
#define   LSb32avioGbl_VIPPIPECLK_CTRL_vipClkSel              0
#define   LSb16avioGbl_VIPPIPECLK_CTRL_vipClkSel              0
#define       bavioGbl_VIPPIPECLK_CTRL_vipClkSel           1
#define   MSK32avioGbl_VIPPIPECLK_CTRL_vipClkSel              0x00000001
	///////////////////////////////////////////////////////////

	typedef struct SIE_avioGbl {
		///////////////////////////////////////////////////////////
		SIE_avPll ie_AVPLLA;
		///////////////////////////////////////////////////////////
		SIE_VDAC_ctrl ie_VDAC_ctrl;
		///////////////////////////////////////////////////////////
		SIE_VDAC_sts ie_VDAC_sts;
		///////////////////////////////////////////////////////////
		SIE_ADAC_ctrl ie_ADAC_ctrl;
		///////////////////////////////////////////////////////////
		SIE_ADAC_sts ie_ADAC_sts;
		///////////////////////////////////////////////////////////
		SIE_HDMI_ctrl ie_HDMI_ctrl;
		///////////////////////////////////////////////////////////
		SIE_HDMI_sts ie_HDMI_sts;
		///////////////////////////////////////////////////////////
		SIE_AVIO_debug_ctrl ie_AVIO_debug_ctrl;
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_AVPLLA_CLK_EN_ctrl(r32)             _BFGET_(r32, 5, 0)
#define   SET32avioGbl_AVPLLA_CLK_EN_ctrl(r32,v)           _BFSET_(r32, 5, 0,v)
#define   GET16avioGbl_AVPLLA_CLK_EN_ctrl(r16)             _BFGET_(r16, 5, 0)
#define   SET16avioGbl_AVPLLA_CLK_EN_ctrl(r16,v)           _BFSET_(r16, 5, 0,v)

#define   GET32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r32)      _BFGET_(r32, 6, 6)
#define   SET32avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r32,v)    _BFSET_(r32, 6, 6,v)
#define   GET16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r16)      _BFGET_(r16, 6, 6)
#define   SET16avioGbl_AVPLLA_CLK_EN_dbg_mux_sel(r16,v)    _BFSET_(r16, 6, 6,v)

#define     w32avioGbl_AVPLLA_CLK_EN                       {\
            UNSG32 uAVPLLA_CLK_EN_ctrl                         :  6;\
            UNSG32 uAVPLLA_CLK_EN_dbg_mux_sel                  :  1;\
            UNSG32 RSVDxEC_b7                                  : 25;\
          }
		union {
			UNSG32 u32avioGbl_AVPLLA_CLK_EN;
			struct w32avioGbl_AVPLLA_CLK_EN;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_VCLK0_CTRL_extClkSel(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_VCLK0_CTRL_extClkSel(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_VCLK0_CTRL_extClkSel(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_VCLK0_CTRL_extClkSel(r16,v)         _BFSET_(r16, 0, 0,v)

#define     w32avioGbl_VCLK0_CTRL                          {\
            UNSG32 uVCLK0_CTRL_extClkSel                       :  1;\
            UNSG32 RSVDxF0_b1                                  : 31;\
          }
		union {
			UNSG32 u32avioGbl_VCLK0_CTRL;
			struct w32avioGbl_VCLK0_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_VCLK1_CTRL_extClkSel(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_VCLK1_CTRL_extClkSel(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_VCLK1_CTRL_extClkSel(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_VCLK1_CTRL_extClkSel(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_VCLK1_CTRL_pllSel(r32)              _BFGET_(r32, 1, 1)
#define   SET32avioGbl_VCLK1_CTRL_pllSel(r32,v)            _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_VCLK1_CTRL_pllSel(r16)              _BFGET_(r16, 1, 1)
#define   SET16avioGbl_VCLK1_CTRL_pllSel(r16,v)            _BFSET_(r16, 1, 1,v)

#define     w32avioGbl_VCLK1_CTRL                          {\
            UNSG32 uVCLK1_CTRL_extClkSel                       :  1;\
            UNSG32 uVCLK1_CTRL_pllSel                          :  1;\
            UNSG32 RSVDxF4_b2                                  : 30;\
          }
		union {
			UNSG32 u32avioGbl_VCLK1_CTRL;
			struct w32avioGbl_VCLK1_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_VCLK2_CTRL_extClkSel(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_VCLK2_CTRL_extClkSel(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_VCLK2_CTRL_extClkSel(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_VCLK2_CTRL_extClkSel(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_VCLK2_CTRL_pllSel(r32)              _BFGET_(r32, 1, 1)
#define   SET32avioGbl_VCLK2_CTRL_pllSel(r32,v)            _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_VCLK2_CTRL_pllSel(r16)              _BFGET_(r16, 1, 1)
#define   SET16avioGbl_VCLK2_CTRL_pllSel(r16,v)            _BFSET_(r16, 1, 1,v)

#define     w32avioGbl_VCLK2_CTRL                          {\
            UNSG32 uVCLK2_CTRL_extClkSel                       :  1;\
            UNSG32 uVCLK2_CTRL_pllSel                          :  1;\
            UNSG32 RSVDxF8_b2                                  : 30;\
          }
		union {
			UNSG32 u32avioGbl_VCLK2_CTRL;
			struct w32avioGbl_VCLK2_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_ACLK0_CTRL_clkSwitch(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_ACLK0_CTRL_clkSwitch(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_ACLK0_CTRL_clkSwitch(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_ACLK0_CTRL_clkSwitch(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_ACLK0_CTRL_clkD3Switch(r32)         _BFGET_(r32, 1, 1)
#define   SET32avioGbl_ACLK0_CTRL_clkD3Switch(r32,v)       _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_ACLK0_CTRL_clkD3Switch(r16)         _BFGET_(r16, 1, 1)
#define   SET16avioGbl_ACLK0_CTRL_clkD3Switch(r16,v)       _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_ACLK0_CTRL_clkSel(r32)              _BFGET_(r32, 4, 2)
#define   SET32avioGbl_ACLK0_CTRL_clkSel(r32,v)            _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_ACLK0_CTRL_clkSel(r16)              _BFGET_(r16, 4, 2)
#define   SET16avioGbl_ACLK0_CTRL_clkSel(r16,v)            _BFSET_(r16, 4, 2,v)

#define   GET32avioGbl_ACLK0_CTRL_srcSel(r32)              _BFGET_(r32, 5, 5)
#define   SET32avioGbl_ACLK0_CTRL_srcSel(r32,v)            _BFSET_(r32, 5, 5,v)
#define   GET16avioGbl_ACLK0_CTRL_srcSel(r16)              _BFGET_(r16, 5, 5)
#define   SET16avioGbl_ACLK0_CTRL_srcSel(r16,v)            _BFSET_(r16, 5, 5,v)

#define     w32avioGbl_ACLK0_CTRL                          {\
            UNSG32 uACLK0_CTRL_clkSwitch                       :  1;\
            UNSG32 uACLK0_CTRL_clkD3Switch                     :  1;\
            UNSG32 uACLK0_CTRL_clkSel                          :  3;\
            UNSG32 uACLK0_CTRL_srcSel                          :  1;\
            UNSG32 RSVDxFC_b6                                  : 26;\
          }
		union {
			UNSG32 u32avioGbl_ACLK0_CTRL;
			struct w32avioGbl_ACLK0_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_ACLK1_CTRL_clkSwitch(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_ACLK1_CTRL_clkSwitch(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_ACLK1_CTRL_clkSwitch(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_ACLK1_CTRL_clkSwitch(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_ACLK1_CTRL_clkD3Switch(r32)         _BFGET_(r32, 1, 1)
#define   SET32avioGbl_ACLK1_CTRL_clkD3Switch(r32,v)       _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_ACLK1_CTRL_clkD3Switch(r16)         _BFGET_(r16, 1, 1)
#define   SET16avioGbl_ACLK1_CTRL_clkD3Switch(r16,v)       _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_ACLK1_CTRL_clkSel(r32)              _BFGET_(r32, 4, 2)
#define   SET32avioGbl_ACLK1_CTRL_clkSel(r32,v)            _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_ACLK1_CTRL_clkSel(r16)              _BFGET_(r16, 4, 2)
#define   SET16avioGbl_ACLK1_CTRL_clkSel(r16,v)            _BFSET_(r16, 4, 2,v)

#define   GET32avioGbl_ACLK1_CTRL_pllSel(r32)              _BFGET_(r32, 5, 5)
#define   SET32avioGbl_ACLK1_CTRL_pllSel(r32,v)            _BFSET_(r32, 5, 5,v)
#define   GET16avioGbl_ACLK1_CTRL_pllSel(r16)              _BFGET_(r16, 5, 5)
#define   SET16avioGbl_ACLK1_CTRL_pllSel(r16,v)            _BFSET_(r16, 5, 5,v)

#define     w32avioGbl_ACLK1_CTRL                          {\
            UNSG32 uACLK1_CTRL_clkSwitch                       :  1;\
            UNSG32 uACLK1_CTRL_clkD3Switch                     :  1;\
            UNSG32 uACLK1_CTRL_clkSel                          :  3;\
            UNSG32 uACLK1_CTRL_pllSel                          :  1;\
            UNSG32 RSVDx100_b6                                 : 26;\
          }
		union {
			UNSG32 u32avioGbl_ACLK1_CTRL;
			struct w32avioGbl_ACLK1_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_ACLK2_CTRL_clkSwitch(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_ACLK2_CTRL_clkSwitch(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_ACLK2_CTRL_clkSwitch(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_ACLK2_CTRL_clkSwitch(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_ACLK2_CTRL_clkD3Switch(r32)         _BFGET_(r32, 1, 1)
#define   SET32avioGbl_ACLK2_CTRL_clkD3Switch(r32,v)       _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_ACLK2_CTRL_clkD3Switch(r16)         _BFGET_(r16, 1, 1)
#define   SET16avioGbl_ACLK2_CTRL_clkD3Switch(r16,v)       _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_ACLK2_CTRL_clkSel(r32)              _BFGET_(r32, 4, 2)
#define   SET32avioGbl_ACLK2_CTRL_clkSel(r32,v)            _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_ACLK2_CTRL_clkSel(r16)              _BFGET_(r16, 4, 2)
#define   SET16avioGbl_ACLK2_CTRL_clkSel(r16,v)            _BFSET_(r16, 4, 2,v)

#define     w32avioGbl_ACLK2_CTRL                          {\
            UNSG32 uACLK2_CTRL_clkSwitch                       :  1;\
            UNSG32 uACLK2_CTRL_clkD3Switch                     :  1;\
            UNSG32 uACLK2_CTRL_clkSel                          :  3;\
            UNSG32 RSVDx104_b5                                 : 27;\
          }
		union {
			UNSG32 u32avioGbl_ACLK2_CTRL;
			struct w32avioGbl_ACLK2_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_ACLK3_CTRL_clkSwitch(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_ACLK3_CTRL_clkSwitch(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_ACLK3_CTRL_clkSwitch(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_ACLK3_CTRL_clkSwitch(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_ACLK3_CTRL_clkD3Switch(r32)         _BFGET_(r32, 1, 1)
#define   SET32avioGbl_ACLK3_CTRL_clkD3Switch(r32,v)       _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_ACLK3_CTRL_clkD3Switch(r16)         _BFGET_(r16, 1, 1)
#define   SET16avioGbl_ACLK3_CTRL_clkD3Switch(r16,v)       _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_ACLK3_CTRL_clkSel(r32)              _BFGET_(r32, 4, 2)
#define   SET32avioGbl_ACLK3_CTRL_clkSel(r32,v)            _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_ACLK3_CTRL_clkSel(r16)              _BFGET_(r16, 4, 2)
#define   SET16avioGbl_ACLK3_CTRL_clkSel(r16,v)            _BFSET_(r16, 4, 2,v)

#define     w32avioGbl_ACLK3_CTRL                          {\
            UNSG32 uACLK3_CTRL_clkSwitch                       :  1;\
            UNSG32 uACLK3_CTRL_clkD3Switch                     :  1;\
            UNSG32 uACLK3_CTRL_clkSel                          :  3;\
            UNSG32 RSVDx108_b5                                 : 27;\
          }
		union {
			UNSG32 u32avioGbl_ACLK3_CTRL;
			struct w32avioGbl_ACLK3_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_ACLK4_CTRL_clkSwitch(r32)           _BFGET_(r32, 0, 0)
#define   SET32avioGbl_ACLK4_CTRL_clkSwitch(r32,v)         _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_ACLK4_CTRL_clkSwitch(r16)           _BFGET_(r16, 0, 0)
#define   SET16avioGbl_ACLK4_CTRL_clkSwitch(r16,v)         _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_ACLK4_CTRL_clkD3Switch(r32)         _BFGET_(r32, 1, 1)
#define   SET32avioGbl_ACLK4_CTRL_clkD3Switch(r32,v)       _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_ACLK4_CTRL_clkD3Switch(r16)         _BFGET_(r16, 1, 1)
#define   SET16avioGbl_ACLK4_CTRL_clkD3Switch(r16,v)       _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_ACLK4_CTRL_clkSel(r32)              _BFGET_(r32, 4, 2)
#define   SET32avioGbl_ACLK4_CTRL_clkSel(r32,v)            _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_ACLK4_CTRL_clkSel(r16)              _BFGET_(r16, 4, 2)
#define   SET16avioGbl_ACLK4_CTRL_clkSel(r16,v)            _BFSET_(r16, 4, 2,v)

#define     w32avioGbl_ACLK4_CTRL                          {\
            UNSG32 uACLK4_CTRL_clkSwitch                       :  1;\
            UNSG32 uACLK4_CTRL_clkD3Switch                     :  1;\
            UNSG32 uACLK4_CTRL_clkSel                          :  3;\
            UNSG32 RSVDx10C_b5                                 : 27;\
          }
		union {
			UNSG32 u32avioGbl_ACLK4_CTRL;
			struct w32avioGbl_ACLK4_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_DRM_VCLK_CTRL_clkSwitch(r32)        _BFGET_(r32, 0, 0)
#define   SET32avioGbl_DRM_VCLK_CTRL_clkSwitch(r32,v)      _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_DRM_VCLK_CTRL_clkSwitch(r16)        _BFGET_(r16, 0, 0)
#define   SET16avioGbl_DRM_VCLK_CTRL_clkSwitch(r16,v)      _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_DRM_VCLK_CTRL_clkD3Switch(r32)      _BFGET_(r32, 1, 1)
#define   SET32avioGbl_DRM_VCLK_CTRL_clkD3Switch(r32,v)    _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_DRM_VCLK_CTRL_clkD3Switch(r16)      _BFGET_(r16, 1, 1)
#define   SET16avioGbl_DRM_VCLK_CTRL_clkD3Switch(r16,v)    _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_DRM_VCLK_CTRL_clkSel(r32)           _BFGET_(r32, 4, 2)
#define   SET32avioGbl_DRM_VCLK_CTRL_clkSel(r32,v)         _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_DRM_VCLK_CTRL_clkSel(r16)           _BFGET_(r16, 4, 2)
#define   SET16avioGbl_DRM_VCLK_CTRL_clkSel(r16,v)         _BFSET_(r16, 4, 2,v)

#define   GET32avioGbl_DRM_VCLK_CTRL_clkEn(r32)            _BFGET_(r32, 5, 5)
#define   SET32avioGbl_DRM_VCLK_CTRL_clkEn(r32,v)          _BFSET_(r32, 5, 5,v)
#define   GET16avioGbl_DRM_VCLK_CTRL_clkEn(r16)            _BFGET_(r16, 5, 5)
#define   SET16avioGbl_DRM_VCLK_CTRL_clkEn(r16,v)          _BFSET_(r16, 5, 5,v)

#define     w32avioGbl_DRM_VCLK_CTRL                       {\
            UNSG32 uDRM_VCLK_CTRL_clkSwitch                    :  1;\
            UNSG32 uDRM_VCLK_CTRL_clkD3Switch                  :  1;\
            UNSG32 uDRM_VCLK_CTRL_clkSel                       :  3;\
            UNSG32 uDRM_VCLK_CTRL_clkEn                        :  1;\
            UNSG32 RSVDx110_b6                                 : 26;\
          }
		union {
			UNSG32 u32avioGbl_DRM_VCLK_CTRL;
			struct w32avioGbl_DRM_VCLK_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_HDMIRX_VCLK_CTRL_clkSwitch(r32)     _BFGET_(r32, 0, 0)
#define   SET32avioGbl_HDMIRX_VCLK_CTRL_clkSwitch(r32,v)   _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_HDMIRX_VCLK_CTRL_clkSwitch(r16)     _BFGET_(r16, 0, 0)
#define   SET16avioGbl_HDMIRX_VCLK_CTRL_clkSwitch(r16,v)   _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch(r32)   _BFGET_(r32, 1, 1)
#define   SET32avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch(r32,v) _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch(r16)   _BFGET_(r16, 1, 1)
#define   SET16avioGbl_HDMIRX_VCLK_CTRL_clkD3Switch(r16,v) _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_HDMIRX_VCLK_CTRL_clkSel(r32)        _BFGET_(r32, 4, 2)
#define   SET32avioGbl_HDMIRX_VCLK_CTRL_clkSel(r32,v)      _BFSET_(r32, 4, 2,v)
#define   GET16avioGbl_HDMIRX_VCLK_CTRL_clkSel(r16)        _BFGET_(r16, 4, 2)
#define   SET16avioGbl_HDMIRX_VCLK_CTRL_clkSel(r16,v)      _BFSET_(r16, 4, 2,v)

#define   GET32avioGbl_HDMIRX_VCLK_CTRL_clkEn(r32)         _BFGET_(r32, 5, 5)
#define   SET32avioGbl_HDMIRX_VCLK_CTRL_clkEn(r32,v)       _BFSET_(r32, 5, 5,v)
#define   GET16avioGbl_HDMIRX_VCLK_CTRL_clkEn(r16)         _BFGET_(r16, 5, 5)
#define   SET16avioGbl_HDMIRX_VCLK_CTRL_clkEn(r16,v)       _BFSET_(r16, 5, 5,v)

#define     w32avioGbl_HDMIRX_VCLK_CTRL                    {\
            UNSG32 uHDMIRX_VCLK_CTRL_clkSwitch                 :  1;\
            UNSG32 uHDMIRX_VCLK_CTRL_clkD3Switch               :  1;\
            UNSG32 uHDMIRX_VCLK_CTRL_clkSel                    :  3;\
            UNSG32 uHDMIRX_VCLK_CTRL_clkEn                     :  1;\
            UNSG32 RSVDx114_b6                                 : 26;\
          }
		union {
			UNSG32 u32avioGbl_HDMIRX_VCLK_CTRL;
			struct w32avioGbl_HDMIRX_VCLK_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_SWRST_CTRL_audio0SyncRstn(r32)      _BFGET_(r32, 0, 0)
#define   SET32avioGbl_SWRST_CTRL_audio0SyncRstn(r32,v)    _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_SWRST_CTRL_audio0SyncRstn(r16)      _BFGET_(r16, 0, 0)
#define   SET16avioGbl_SWRST_CTRL_audio0SyncRstn(r16,v)    _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_SWRST_CTRL_audio1SyncRstn(r32)      _BFGET_(r32, 1, 1)
#define   SET32avioGbl_SWRST_CTRL_audio1SyncRstn(r32,v)    _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_SWRST_CTRL_audio1SyncRstn(r16)      _BFGET_(r16, 1, 1)
#define   SET16avioGbl_SWRST_CTRL_audio1SyncRstn(r16,v)    _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_SWRST_CTRL_audio2SyncRstn(r32)      _BFGET_(r32, 2, 2)
#define   SET32avioGbl_SWRST_CTRL_audio2SyncRstn(r32,v)    _BFSET_(r32, 2, 2,v)
#define   GET16avioGbl_SWRST_CTRL_audio2SyncRstn(r16)      _BFGET_(r16, 2, 2)
#define   SET16avioGbl_SWRST_CTRL_audio2SyncRstn(r16,v)    _BFSET_(r16, 2, 2,v)

#define   GET32avioGbl_SWRST_CTRL_audio3SyncRstn(r32)      _BFGET_(r32, 3, 3)
#define   SET32avioGbl_SWRST_CTRL_audio3SyncRstn(r32,v)    _BFSET_(r32, 3, 3,v)
#define   GET16avioGbl_SWRST_CTRL_audio3SyncRstn(r16)      _BFGET_(r16, 3, 3)
#define   SET16avioGbl_SWRST_CTRL_audio3SyncRstn(r16,v)    _BFSET_(r16, 3, 3,v)

#define   GET32avioGbl_SWRST_CTRL_audio4SyncRstn(r32)      _BFGET_(r32, 4, 4)
#define   SET32avioGbl_SWRST_CTRL_audio4SyncRstn(r32,v)    _BFSET_(r32, 4, 4,v)
#define   GET16avioGbl_SWRST_CTRL_audio4SyncRstn(r16)      _BFGET_(r16, 4, 4)
#define   SET16avioGbl_SWRST_CTRL_audio4SyncRstn(r16,v)    _BFSET_(r16, 4, 4,v)

#define   GET32avioGbl_SWRST_CTRL_audioHdSyncRstn(r32)     _BFGET_(r32, 5, 5)
#define   SET32avioGbl_SWRST_CTRL_audioHdSyncRstn(r32,v)   _BFSET_(r32, 5, 5,v)
#define   GET16avioGbl_SWRST_CTRL_audioHdSyncRstn(r16)     _BFGET_(r16, 5, 5)
#define   SET16avioGbl_SWRST_CTRL_audioHdSyncRstn(r16,v)   _BFSET_(r16, 5, 5,v)

#define   GET32avioGbl_SWRST_CTRL_spdifRxSyncRstn(r32)     _BFGET_(r32, 6, 6)
#define   SET32avioGbl_SWRST_CTRL_spdifRxSyncRstn(r32,v)   _BFSET_(r32, 6, 6,v)
#define   GET16avioGbl_SWRST_CTRL_spdifRxSyncRstn(r16)     _BFGET_(r16, 6, 6)
#define   SET16avioGbl_SWRST_CTRL_spdifRxSyncRstn(r16,v)   _BFSET_(r16, 6, 6,v)

#define   GET32avioGbl_SWRST_CTRL_vppSyncRstn(r32)         _BFGET_(r32, 7, 7)
#define   SET32avioGbl_SWRST_CTRL_vppSyncRstn(r32,v)       _BFSET_(r32, 7, 7,v)
#define   GET16avioGbl_SWRST_CTRL_vppSyncRstn(r16)         _BFGET_(r16, 7, 7)
#define   SET16avioGbl_SWRST_CTRL_vppSyncRstn(r16,v)       _BFSET_(r16, 7, 7,v)

#define   GET32avioGbl_SWRST_CTRL_eddcSyncRstn(r32)        _BFGET_(r32, 8, 8)
#define   SET32avioGbl_SWRST_CTRL_eddcSyncRstn(r32,v)      _BFSET_(r32, 8, 8,v)
#define   GET16avioGbl_SWRST_CTRL_eddcSyncRstn(r16)        _BFGET_(r16, 8, 8)
#define   SET16avioGbl_SWRST_CTRL_eddcSyncRstn(r16,v)      _BFSET_(r16, 8, 8,v)

#define   GET32avioGbl_SWRST_CTRL_appSyncRstn(r32)         _BFGET_(r32, 9, 9)
#define   SET32avioGbl_SWRST_CTRL_appSyncRstn(r32,v)       _BFSET_(r32, 9, 9,v)
#define   GET16avioGbl_SWRST_CTRL_appSyncRstn(r16)         _BFGET_(r16, 9, 9)
#define   SET16avioGbl_SWRST_CTRL_appSyncRstn(r16,v)       _BFSET_(r16, 9, 9,v)

#define   GET32avioGbl_SWRST_CTRL_biuSyncRstn(r32)         _BFGET_(r32,10,10)
#define   SET32avioGbl_SWRST_CTRL_biuSyncRstn(r32,v)       _BFSET_(r32,10,10,v)
#define   GET16avioGbl_SWRST_CTRL_biuSyncRstn(r16)         _BFGET_(r16,10,10)
#define   SET16avioGbl_SWRST_CTRL_biuSyncRstn(r16,v)       _BFSET_(r16,10,10,v)

#define   GET32avioGbl_SWRST_CTRL_CarDeintSyncRstn(r32)    _BFGET_(r32,11,11)
#define   SET32avioGbl_SWRST_CTRL_CarDeintSyncRstn(r32,v)  _BFSET_(r32,11,11,v)
#define   GET16avioGbl_SWRST_CTRL_CarDeintSyncRstn(r16)    _BFGET_(r16,11,11)
#define   SET16avioGbl_SWRST_CTRL_CarDeintSyncRstn(r16,v)  _BFSET_(r16,11,11,v)

#define   GET32avioGbl_SWRST_CTRL_hdmiRxSyncRstn(r32)      _BFGET_(r32,12,12)
#define   SET32avioGbl_SWRST_CTRL_hdmiRxSyncRstn(r32,v)    _BFSET_(r32,12,12,v)
#define   GET16avioGbl_SWRST_CTRL_hdmiRxSyncRstn(r16)      _BFGET_(r16,12,12)
#define   SET16avioGbl_SWRST_CTRL_hdmiRxSyncRstn(r16,v)    _BFSET_(r16,12,12,v)

#define   GET32avioGbl_SWRST_CTRL_fpllSyncRstn(r32)        _BFGET_(r32,13,13)
#define   SET32avioGbl_SWRST_CTRL_fpllSyncRstn(r32,v)      _BFSET_(r32,13,13,v)
#define   GET16avioGbl_SWRST_CTRL_fpllSyncRstn(r16)        _BFGET_(r16,13,13)
#define   SET16avioGbl_SWRST_CTRL_fpllSyncRstn(r16,v)      _BFSET_(r16,13,13,v)

#define   GET32avioGbl_SWRST_CTRL_vipPipeSyncRstn(r32)     _BFGET_(r32,14,14)
#define   SET32avioGbl_SWRST_CTRL_vipPipeSyncRstn(r32,v)   _BFSET_(r32,14,14,v)
#define   GET16avioGbl_SWRST_CTRL_vipPipeSyncRstn(r16)     _BFGET_(r16,14,14)
#define   SET16avioGbl_SWRST_CTRL_vipPipeSyncRstn(r16,v)   _BFSET_(r16,14,14,v)

#define   GET32avioGbl_SWRST_CTRL_scl1dSbSyncRstn(r32)     _BFGET_(r32,15,15)
#define   SET32avioGbl_SWRST_CTRL_scl1dSbSyncRstn(r32,v)   _BFSET_(r32,15,15,v)
#define   GET16avioGbl_SWRST_CTRL_scl1dSbSyncRstn(r16)     _BFGET_(r16,15,15)
#define   SET16avioGbl_SWRST_CTRL_scl1dSbSyncRstn(r16,v)   _BFSET_(r16,15,15,v)

#define   GET32avioGbl_SWRST_CTRL_mclkspfClkRstn(r32)      _BFGET_(r32,16,16)
#define   SET32avioGbl_SWRST_CTRL_mclkspfClkRstn(r32,v)    _BFSET_(r32,16,16,v)
#define   GET16avioGbl_SWRST_CTRL_mclkspfClkRstn(r16)      _BFGET_(r16, 0, 0)
#define   SET16avioGbl_SWRST_CTRL_mclkspfClkRstn(r16,v)    _BFSET_(r16, 0, 0,v)

#define     w32avioGbl_SWRST_CTRL                          {\
            UNSG32 uSWRST_CTRL_audio0SyncRstn                  :  1;\
            UNSG32 uSWRST_CTRL_audio1SyncRstn                  :  1;\
            UNSG32 uSWRST_CTRL_audio2SyncRstn                  :  1;\
            UNSG32 uSWRST_CTRL_audio3SyncRstn                  :  1;\
            UNSG32 uSWRST_CTRL_audio4SyncRstn                  :  1;\
            UNSG32 uSWRST_CTRL_audioHdSyncRstn                 :  1;\
            UNSG32 uSWRST_CTRL_spdifRxSyncRstn                 :  1;\
            UNSG32 uSWRST_CTRL_vppSyncRstn                     :  1;\
            UNSG32 uSWRST_CTRL_eddcSyncRstn                    :  1;\
            UNSG32 uSWRST_CTRL_appSyncRstn                     :  1;\
            UNSG32 uSWRST_CTRL_biuSyncRstn                     :  1;\
            UNSG32 uSWRST_CTRL_CarDeintSyncRstn                :  1;\
            UNSG32 uSWRST_CTRL_hdmiRxSyncRstn                  :  1;\
            UNSG32 uSWRST_CTRL_fpllSyncRstn                    :  1;\
            UNSG32 uSWRST_CTRL_vipPipeSyncRstn                 :  1;\
            UNSG32 uSWRST_CTRL_scl1dSbSyncRstn                 :  1;\
            UNSG32 uSWRST_CTRL_mclkspfClkRstn                  :  1;\
            UNSG32 RSVDx118_b17                                : 15;\
          }
		union {
			UNSG32 u32avioGbl_SWRST_CTRL;
			struct w32avioGbl_SWRST_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_SWPDWN_CTRL_hdmirx_PDWN(r32)        _BFGET_(r32, 0, 0)
#define   SET32avioGbl_SWPDWN_CTRL_hdmirx_PDWN(r32,v)      _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_SWPDWN_CTRL_hdmirx_PDWN(r16)        _BFGET_(r16, 0, 0)
#define   SET16avioGbl_SWPDWN_CTRL_hdmirx_PDWN(r16,v)      _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_SWPDWN_CTRL_hdmitx_PDWN(r32)        _BFGET_(r32, 1, 1)
#define   SET32avioGbl_SWPDWN_CTRL_hdmitx_PDWN(r32,v)      _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_SWPDWN_CTRL_hdmitx_PDWN(r16)        _BFGET_(r16, 1, 1)
#define   SET16avioGbl_SWPDWN_CTRL_hdmitx_PDWN(r16,v)      _BFSET_(r16, 1, 1,v)

#define   GET32avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN(r32)    _BFGET_(r32, 2, 2)
#define   SET32avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN(r32,v)  _BFSET_(r32, 2, 2,v)
#define   GET16avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN(r16)    _BFGET_(r16, 2, 2)
#define   SET16avioGbl_SWPDWN_CTRL_aio64bDhub_PDWN(r16,v)  _BFSET_(r16, 2, 2,v)

#define   GET32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN(r32)   _BFGET_(r32, 3, 3)
#define   SET32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN(r32,v) _BFSET_(r32, 3, 3,v)
#define   GET16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN(r16)   _BFGET_(r16, 3, 3)
#define   SET16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDWN(r16,v) _BFSET_(r16, 3, 3,v)

#define   GET32avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC(r32)      _BFGET_(r32, 4, 4)
#define   SET32avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC(r32,v)    _BFSET_(r32, 4, 4,v)
#define   GET16avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC(r16)      _BFGET_(r16, 4, 4)
#define   SET16avioGbl_SWPDWN_CTRL_hdmirx_PDLVMC(r16,v)    _BFSET_(r16, 4, 4,v)

#define   GET32avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC(r32)      _BFGET_(r32, 5, 5)
#define   SET32avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC(r32,v)    _BFSET_(r32, 5, 5,v)
#define   GET16avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC(r16)      _BFGET_(r16, 5, 5)
#define   SET16avioGbl_SWPDWN_CTRL_hdmitx_PDLVMC(r16,v)    _BFSET_(r16, 5, 5,v)

#define   GET32avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC(r32)  _BFGET_(r32, 6, 6)
#define   SET32avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC(r32,v) _BFSET_(r32, 6, 6,v)
#define   GET16avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC(r16)  _BFGET_(r16, 6, 6)
#define   SET16avioGbl_SWPDWN_CTRL_aio64bDhub_PDLVMC(r16,v) _BFSET_(r16, 6, 6,v)

#define   GET32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC(r32) _BFGET_(r32, 7, 7)
#define   SET32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC(r32,v) _BFSET_(r32, 7, 7,v)
#define   GET16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC(r16) _BFGET_(r16, 7, 7)
#define   SET16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDLVMC(r16,v) _BFSET_(r16, 7, 7,v)

#define   GET32avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM(r32)     _BFGET_(r32, 8, 8)
#define   SET32avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM(r32,v)   _BFSET_(r32, 8, 8,v)
#define   GET16avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM(r16)     _BFGET_(r16, 8, 8)
#define   SET16avioGbl_SWPDWN_CTRL_hdmirx_PDFVSSM(r16,v)   _BFSET_(r16, 8, 8,v)

#define   GET32avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM(r32)     _BFGET_(r32, 9, 9)
#define   SET32avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM(r32,v)   _BFSET_(r32, 9, 9,v)
#define   GET16avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM(r16)     _BFGET_(r16, 9, 9)
#define   SET16avioGbl_SWPDWN_CTRL_hdmitx_PDFVSSM(r16,v)   _BFSET_(r16, 9, 9,v)

#define   GET32avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM(r32) _BFGET_(r32,10,10)
#define   SET32avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM(r32,v) _BFSET_(r32,10,10,v)
#define   GET16avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM(r16) _BFGET_(r16,10,10)
#define   SET16avioGbl_SWPDWN_CTRL_aio64bDhub_PDFVSSM(r16,v) _BFSET_(r16,10,10,v)

#define   GET32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM(r32) _BFGET_(r32,11,11)
#define   SET32avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM(r32,v) _BFSET_(r32,11,11,v)
#define   GET16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM(r16) _BFGET_(r16,11,11)
#define   SET16avioGbl_SWPDWN_CTRL_vpp128bDhub_PDFVSSM(r16,v) _BFSET_(r16,11,11,v)

#define     w32avioGbl_SWPDWN_CTRL                         {\
            UNSG32 uSWPDWN_CTRL_hdmirx_PDWN                    :  1;\
            UNSG32 uSWPDWN_CTRL_hdmitx_PDWN                    :  1;\
            UNSG32 uSWPDWN_CTRL_aio64bDhub_PDWN                :  1;\
            UNSG32 uSWPDWN_CTRL_vpp128bDhub_PDWN               :  1;\
            UNSG32 uSWPDWN_CTRL_hdmirx_PDLVMC                  :  1;\
            UNSG32 uSWPDWN_CTRL_hdmitx_PDLVMC                  :  1;\
            UNSG32 uSWPDWN_CTRL_aio64bDhub_PDLVMC              :  1;\
            UNSG32 uSWPDWN_CTRL_vpp128bDhub_PDLVMC             :  1;\
            UNSG32 uSWPDWN_CTRL_hdmirx_PDFVSSM                 :  1;\
            UNSG32 uSWPDWN_CTRL_hdmitx_PDFVSSM                 :  1;\
            UNSG32 uSWPDWN_CTRL_aio64bDhub_PDFVSSM             :  1;\
            UNSG32 uSWPDWN_CTRL_vpp128bDhub_PDFVSSM            :  1;\
            UNSG32 RSVDx11C_b12                                : 20;\
          }
		union {
			UNSG32 u32avioGbl_SWPDWN_CTRL;
			struct w32avioGbl_SWPDWN_CTRL;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_HDMI_CLK_EN_HdmiTx(r32)             _BFGET_(r32, 0, 0)
#define   SET32avioGbl_HDMI_CLK_EN_HdmiTx(r32,v)           _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_HDMI_CLK_EN_HdmiTx(r16)             _BFGET_(r16, 0, 0)
#define   SET16avioGbl_HDMI_CLK_EN_HdmiTx(r16,v)           _BFSET_(r16, 0, 0,v)

#define   GET32avioGbl_HDMI_CLK_EN_EddcMaster(r32)         _BFGET_(r32, 1, 1)
#define   SET32avioGbl_HDMI_CLK_EN_EddcMaster(r32,v)       _BFSET_(r32, 1, 1,v)
#define   GET16avioGbl_HDMI_CLK_EN_EddcMaster(r16)         _BFGET_(r16, 1, 1)
#define   SET16avioGbl_HDMI_CLK_EN_EddcMaster(r16,v)       _BFSET_(r16, 1, 1,v)

#define     w32avioGbl_HDMI_CLK_EN                         {\
            UNSG32 uHDMI_CLK_EN_HdmiTx                         :  1;\
            UNSG32 uHDMI_CLK_EN_EddcMaster                     :  1;\
            UNSG32 RSVDx120_b2                                 : 30;\
          }
		union {
			UNSG32 u32avioGbl_HDMI_CLK_EN;
			struct w32avioGbl_HDMI_CLK_EN;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_RWTC_31to0_value(r32)               _BFGET_(r32,31, 0)
#define   SET32avioGbl_RWTC_31to0_value(r32,v)             _BFSET_(r32,31, 0,v)

#define     w32avioGbl_RWTC_31to0                          {\
            UNSG32 uRWTC_31to0_value                           : 32;\
          }
		union {
			UNSG32 u32avioGbl_RWTC_31to0;
			struct w32avioGbl_RWTC_31to0;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_RWTC_57to32_value(r32)              _BFGET_(r32,25, 0)
#define   SET32avioGbl_RWTC_57to32_value(r32,v)            _BFSET_(r32,25, 0,v)

#define     w32avioGbl_RWTC_57to32                         {\
            UNSG32 uRWTC_57to32_value                          : 26;\
            UNSG32 RSVDx128_b26                                :  6;\
          }
		union {
			UNSG32 u32avioGbl_RWTC_57to32;
			struct w32avioGbl_RWTC_57to32;
		};
		///////////////////////////////////////////////////////////
#define   GET32avioGbl_VIPPIPECLK_CTRL_vipClkSel(r32)      _BFGET_(r32, 0, 0)
#define   SET32avioGbl_VIPPIPECLK_CTRL_vipClkSel(r32,v)    _BFSET_(r32, 0, 0,v)
#define   GET16avioGbl_VIPPIPECLK_CTRL_vipClkSel(r16)      _BFGET_(r16, 0, 0)
#define   SET16avioGbl_VIPPIPECLK_CTRL_vipClkSel(r16,v)    _BFSET_(r16, 0, 0,v)

#define     w32avioGbl_VIPPIPECLK_CTRL                     {\
            UNSG32 uVIPPIPECLK_CTRL_vipClkSel                  :  1;\
            UNSG32 RSVDx12C_b1                                 : 31;\
          }
		union {
			UNSG32 u32avioGbl_VIPPIPECLK_CTRL;
			struct w32avioGbl_VIPPIPECLK_CTRL;
		};
		///////////////////////////////////////////////////////////
	} SIE_avioGbl;

	typedef union T32avioGbl_AVPLLA_CLK_EN {
		UNSG32 u32;
		struct w32avioGbl_AVPLLA_CLK_EN;
	} T32avioGbl_AVPLLA_CLK_EN;
	typedef union T32avioGbl_VCLK0_CTRL {
		UNSG32 u32;
		struct w32avioGbl_VCLK0_CTRL;
	} T32avioGbl_VCLK0_CTRL;
	typedef union T32avioGbl_VCLK1_CTRL {
		UNSG32 u32;
		struct w32avioGbl_VCLK1_CTRL;
	} T32avioGbl_VCLK1_CTRL;
	typedef union T32avioGbl_VCLK2_CTRL {
		UNSG32 u32;
		struct w32avioGbl_VCLK2_CTRL;
	} T32avioGbl_VCLK2_CTRL;
	typedef union T32avioGbl_ACLK0_CTRL {
		UNSG32 u32;
		struct w32avioGbl_ACLK0_CTRL;
	} T32avioGbl_ACLK0_CTRL;
	typedef union T32avioGbl_ACLK1_CTRL {
		UNSG32 u32;
		struct w32avioGbl_ACLK1_CTRL;
	} T32avioGbl_ACLK1_CTRL;
	typedef union T32avioGbl_ACLK2_CTRL {
		UNSG32 u32;
		struct w32avioGbl_ACLK2_CTRL;
	} T32avioGbl_ACLK2_CTRL;
	typedef union T32avioGbl_ACLK3_CTRL {
		UNSG32 u32;
		struct w32avioGbl_ACLK3_CTRL;
	} T32avioGbl_ACLK3_CTRL;
	typedef union T32avioGbl_ACLK4_CTRL {
		UNSG32 u32;
		struct w32avioGbl_ACLK4_CTRL;
	} T32avioGbl_ACLK4_CTRL;
	typedef union T32avioGbl_DRM_VCLK_CTRL {
		UNSG32 u32;
		struct w32avioGbl_DRM_VCLK_CTRL;
	} T32avioGbl_DRM_VCLK_CTRL;
	typedef union T32avioGbl_HDMIRX_VCLK_CTRL {
		UNSG32 u32;
		struct w32avioGbl_HDMIRX_VCLK_CTRL;
	} T32avioGbl_HDMIRX_VCLK_CTRL;
	typedef union T32avioGbl_SWRST_CTRL {
		UNSG32 u32;
		struct w32avioGbl_SWRST_CTRL;
	} T32avioGbl_SWRST_CTRL;
	typedef union T32avioGbl_SWPDWN_CTRL {
		UNSG32 u32;
		struct w32avioGbl_SWPDWN_CTRL;
	} T32avioGbl_SWPDWN_CTRL;
	typedef union T32avioGbl_HDMI_CLK_EN {
		UNSG32 u32;
		struct w32avioGbl_HDMI_CLK_EN;
	} T32avioGbl_HDMI_CLK_EN;
	typedef union T32avioGbl_RWTC_31to0 {
		UNSG32 u32;
		struct w32avioGbl_RWTC_31to0;
	} T32avioGbl_RWTC_31to0;
	typedef union T32avioGbl_RWTC_57to32 {
		UNSG32 u32;
		struct w32avioGbl_RWTC_57to32;
	} T32avioGbl_RWTC_57to32;
	typedef union T32avioGbl_VIPPIPECLK_CTRL {
		UNSG32 u32;
		struct w32avioGbl_VIPPIPECLK_CTRL;
	} T32avioGbl_VIPPIPECLK_CTRL;
	///////////////////////////////////////////////////////////

	typedef union TavioGbl_AVPLLA_CLK_EN {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_AVPLLA_CLK_EN;
		};
	} TavioGbl_AVPLLA_CLK_EN;
	typedef union TavioGbl_VCLK0_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_VCLK0_CTRL;
		};
	} TavioGbl_VCLK0_CTRL;
	typedef union TavioGbl_VCLK1_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_VCLK1_CTRL;
		};
	} TavioGbl_VCLK1_CTRL;
	typedef union TavioGbl_VCLK2_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_VCLK2_CTRL;
		};
	} TavioGbl_VCLK2_CTRL;
	typedef union TavioGbl_ACLK0_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_ACLK0_CTRL;
		};
	} TavioGbl_ACLK0_CTRL;
	typedef union TavioGbl_ACLK1_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_ACLK1_CTRL;
		};
	} TavioGbl_ACLK1_CTRL;
	typedef union TavioGbl_ACLK2_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_ACLK2_CTRL;
		};
	} TavioGbl_ACLK2_CTRL;
	typedef union TavioGbl_ACLK3_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_ACLK3_CTRL;
		};
	} TavioGbl_ACLK3_CTRL;
	typedef union TavioGbl_ACLK4_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_ACLK4_CTRL;
		};
	} TavioGbl_ACLK4_CTRL;
	typedef union TavioGbl_DRM_VCLK_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_DRM_VCLK_CTRL;
		};
	} TavioGbl_DRM_VCLK_CTRL;
	typedef union TavioGbl_HDMIRX_VCLK_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_HDMIRX_VCLK_CTRL;
		};
	} TavioGbl_HDMIRX_VCLK_CTRL;
	typedef union TavioGbl_SWRST_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_SWRST_CTRL;
		};
	} TavioGbl_SWRST_CTRL;
	typedef union TavioGbl_SWPDWN_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_SWPDWN_CTRL;
		};
	} TavioGbl_SWPDWN_CTRL;
	typedef union TavioGbl_HDMI_CLK_EN {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_HDMI_CLK_EN;
		};
	} TavioGbl_HDMI_CLK_EN;
	typedef union TavioGbl_RWTC_31to0 {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_RWTC_31to0;
		};
	} TavioGbl_RWTC_31to0;
	typedef union TavioGbl_RWTC_57to32 {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_RWTC_57to32;
		};
	} TavioGbl_RWTC_57to32;
	typedef union TavioGbl_VIPPIPECLK_CTRL {
		UNSG32 u32[1];
		struct {
			struct w32avioGbl_VIPPIPECLK_CTRL;
		};
	} TavioGbl_VIPPIPECLK_CTRL;

	///////////////////////////////////////////////////////////
	SIGN32 avioGbl_drvrd(SIE_avioGbl * p, UNSG32 base, SIGN32 mem,
			     SIGN32 tst);
	SIGN32 avioGbl_drvwr(SIE_avioGbl * p, UNSG32 base, SIGN32 mem,
			     SIGN32 tst, UNSG32 * pcmd);
	void avioGbl_reset(SIE_avioGbl * p);
	SIGN32 avioGbl_cmp(SIE_avioGbl * p, SIE_avioGbl * pie, char *pfx,
			   void *hLOG, SIGN32 mem, SIGN32 tst);
#define avioGbl_check(p,pie,pfx,hLOG) avioGbl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
#define avioGbl_print(p,    pfx,hLOG) avioGbl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: avioGbl
////////////////////////////////////////////////////////////

#ifdef __cplusplus
}
#endif
#pragma  pack()
#endif
///////// ENDOFFILE: avioGbl.h////////////////////////////////////////////////////////////
